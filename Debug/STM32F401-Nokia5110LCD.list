
STM32F401-Nokia5110LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a264  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800a408  0800a408  0001a408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b0  0800a9b0  00020d40  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9b8  0800a9b8  00020d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9b8  0800a9b8  0001a9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d40  20000000  0800a9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000d40  0800b700  00020d40  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e88  0800b700  00020e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020d40  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c210  00000000  00000000  00020d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d44  00000000  00000000  0002cf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f4b  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d98f  00000000  00000000  0004709b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008950e  00000000  00000000  00054a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddf38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  000ddf88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000d40 	.word	0x20000d40
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3ec 	.word	0x0800a3ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000d44 	.word	0x20000d44
 80001dc:	0800a3ec 	.word	0x0800a3ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8001020:	23aa      	movs	r3, #170	; 0xaa
 8001022:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8001024:	8afa      	ldrh	r2, [r7, #22]
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2316      	movs	r3, #22
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	463b      	mov	r3, r7
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	21ee      	movs	r1, #238	; 0xee
 8001038:	4836      	ldr	r0, [pc, #216]	; (8001114 <read_calliberation_data+0x10c>)
 800103a:	f002 f84b 	bl	80030d4 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 800103e:	783b      	ldrb	r3, [r7, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <read_calliberation_data+0x110>)
 800104e:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001050:	78bb      	ldrb	r3, [r7, #2]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <read_calliberation_data+0x114>)
 8001060:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001062:	793b      	ldrb	r3, [r7, #4]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <read_calliberation_data+0x118>)
 8001072:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <read_calliberation_data+0x11c>)
 8001086:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001088:	7a3b      	ldrb	r3, [r7, #8]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7a7b      	ldrb	r3, [r7, #9]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <read_calliberation_data+0x120>)
 800109a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <read_calliberation_data+0x124>)
 80010ae:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80010b0:	7b3b      	ldrb	r3, [r7, #12]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7b7b      	ldrb	r3, [r7, #13]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <read_calliberation_data+0x128>)
 80010c0:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <read_calliberation_data+0x12c>)
 80010d2:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010d4:	7c3b      	ldrb	r3, [r7, #16]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7c7b      	ldrb	r3, [r7, #17]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <read_calliberation_data+0x130>)
 80010e4:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80010e6:	7cbb      	ldrb	r3, [r7, #18]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7cfb      	ldrb	r3, [r7, #19]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <read_calliberation_data+0x134>)
 80010f6:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80010f8:	7d3b      	ldrb	r3, [r7, #20]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7d7b      	ldrb	r3, [r7, #21]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <read_calliberation_data+0x138>)
 8001108:	801a      	strh	r2, [r3, #0]

}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000da4 	.word	0x20000da4
 8001118:	20000d5c 	.word	0x20000d5c
 800111c:	20000d5e 	.word	0x20000d5e
 8001120:	20000d60 	.word	0x20000d60
 8001124:	20000d62 	.word	0x20000d62
 8001128:	20000d64 	.word	0x20000d64
 800112c:	20000d66 	.word	0x20000d66
 8001130:	20000d68 	.word	0x20000d68
 8001134:	20000d6a 	.word	0x20000d6a
 8001138:	20000d6c 	.word	0x20000d6c
 800113c:	20000d6e 	.word	0x20000d6e
 8001140:	20000d70 	.word	0x20000d70

08001144 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800114a:	232e      	movs	r3, #46	; 0x2e
 800114c:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 800114e:	2300      	movs	r3, #0
 8001150:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	22f4      	movs	r2, #244	; 0xf4
 8001164:	21ee      	movs	r1, #238	; 0xee
 8001166:	480f      	ldr	r0, [pc, #60]	; (80011a4 <Get_UTemp+0x60>)
 8001168:	f001 feba 	bl	8002ee0 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 800116c:	2005      	movs	r0, #5
 800116e:	f001 facb 	bl	8002708 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2302      	movs	r3, #2
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	22f6      	movs	r2, #246	; 0xf6
 8001184:	21ee      	movs	r1, #238	; 0xee
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <Get_UTemp+0x60>)
 8001188:	f001 ffa4 	bl	80030d4 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	b29b      	uxth	r3, r3
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b29a      	uxth	r2, r3
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4413      	add	r3, r2
 800119a:	b29b      	uxth	r3, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000da4 	.word	0x20000da4

080011a8 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80011ac:	f7ff ffca 	bl	8001144 <Get_UTemp>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <BMP180_GetTemp+0x108>)
 80011b6:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80011b8:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <BMP180_GetTemp+0x108>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	; (80012b4 <BMP180_GetTemp+0x10c>)
 80011be:	8812      	ldrh	r2, [r2, #0]
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9b6 	bl	8000534 <__aeabi_i2d>
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
 80011cc:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <BMP180_GetTemp+0x110>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9af 	bl	8000534 <__aeabi_i2d>
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <BMP180_GetTemp+0x114>)
 80011dc:	f7ff fb3e 	bl	800085c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fa0e 	bl	8000608 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcb8 	bl	8000b68 <__aeabi_d2iz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <BMP180_GetTemp+0x118>)
 80011fc:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <BMP180_GetTemp+0x11c>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f995 	bl	8000534 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <BMP180_GetTemp+0x120>)
 8001210:	f7ff f9fa 	bl	8000608 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4614      	mov	r4, r2
 800121a:	461d      	mov	r5, r3
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <BMP180_GetTemp+0x124>)
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	461a      	mov	r2, r3
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <BMP180_GetTemp+0x118>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4413      	add	r3, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f982 	bl	8000534 <__aeabi_i2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4620      	mov	r0, r4
 8001236:	4629      	mov	r1, r5
 8001238:	f7ff fb10 	bl	800085c <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fc90 	bl	8000b68 <__aeabi_d2iz>
 8001248:	4603      	mov	r3, r0
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <BMP180_GetTemp+0x128>)
 800124c:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <BMP180_GetTemp+0x118>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <BMP180_GetTemp+0x128>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <BMP180_GetTemp+0x12c>)
 800125a:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <BMP180_GetTemp+0x12c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3308      	adds	r3, #8
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f966 	bl	8000534 <__aeabi_i2d>
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <BMP180_GetTemp+0x130>)
 800126e:	f7ff faf5 	bl	800085c <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc75 	bl	8000b68 <__aeabi_d2iz>
 800127e:	4603      	mov	r3, r0
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <BMP180_GetTemp+0x134>)
 8001282:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <BMP180_GetTemp+0x134>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f953 	bl	8000534 <__aeabi_i2d>
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <BMP180_GetTemp+0x138>)
 8001294:	f7ff fae2 	bl	800085c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fcaa 	bl	8000bf8 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	ee07 3a90 	vmov	s15, r3
}
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}
 80012b0:	20000d74 	.word	0x20000d74
 80012b4:	20000d66 	.word	0x20000d66
 80012b8:	20000d64 	.word	0x20000d64
 80012bc:	40e00000 	.word	0x40e00000
 80012c0:	20000d7c 	.word	0x20000d7c
 80012c4:	20000d6e 	.word	0x20000d6e
 80012c8:	40a00000 	.word	0x40a00000
 80012cc:	20000d70 	.word	0x20000d70
 80012d0:	20000d80 	.word	0x20000d80
 80012d4:	20000d8c 	.word	0x20000d8c
 80012d8:	40300000 	.word	0x40300000
 80012dc:	20000da0 	.word	0x20000da0
 80012e0:	40240000 	.word	0x40240000

080012e4 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3334      	adds	r3, #52	; 0x34
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <Get_UPress+0xb4>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	81bb      	strh	r3, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f4      	movs	r2, #244	; 0xf4
 8001318:	21ee      	movs	r1, #238	; 0xee
 800131a:	4820      	ldr	r0, [pc, #128]	; (800139c <Get_UPress+0xb8>)
 800131c:	f001 fde0 	bl	8002ee0 <HAL_I2C_Mem_Write>
	switch (oss)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d81a      	bhi.n	800135c <Get_UPress+0x78>
 8001326:	a201      	add	r2, pc, #4	; (adr r2, 800132c <Get_UPress+0x48>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	0800133d 	.word	0x0800133d
 8001330:	08001345 	.word	0x08001345
 8001334:	0800134d 	.word	0x0800134d
 8001338:	08001355 	.word	0x08001355
	{
		case (0):
			HAL_Delay (5);
 800133c:	2005      	movs	r0, #5
 800133e:	f001 f9e3 	bl	8002708 <HAL_Delay>
			break;
 8001342:	e00b      	b.n	800135c <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001344:	2008      	movs	r0, #8
 8001346:	f001 f9df 	bl	8002708 <HAL_Delay>
			break;
 800134a:	e007      	b.n	800135c <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 800134c:	200e      	movs	r0, #14
 800134e:	f001 f9db 	bl	8002708 <HAL_Delay>
			break;
 8001352:	e003      	b.n	800135c <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001354:	201a      	movs	r0, #26
 8001356:	f001 f9d7 	bl	8002708 <HAL_Delay>
			break;
 800135a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800135c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2303      	movs	r3, #3
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	22f6      	movs	r2, #246	; 0xf6
 8001370:	21ee      	movs	r1, #238	; 0xee
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <Get_UPress+0xb8>)
 8001374:	f001 feae 	bl	80030d4 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4413      	add	r3, r2
 8001382:	7bba      	ldrb	r2, [r7, #14]
 8001384:	441a      	add	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f1c3 0308 	rsb	r3, r3, #8
 800138c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800a408 	.word	0x0800a408
 800139c:	20000da4 	.word	0x20000da4

080013a0 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff9b 	bl	80012e4 <Get_UPress>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4ba8      	ldr	r3, [pc, #672]	; (8001654 <BMP180_GetPress+0x2b4>)
 80013b4:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80013b6:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <BMP180_GetPress+0x2b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4aa8      	ldr	r2, [pc, #672]	; (800165c <BMP180_GetPress+0x2bc>)
 80013bc:	8812      	ldrh	r2, [r2, #0]
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8b7 	bl	8000534 <__aeabi_i2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	4ba5      	ldr	r3, [pc, #660]	; (8001660 <BMP180_GetPress+0x2c0>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8b0 	bl	8000534 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <BMP180_GetPress+0x2c4>)
 80013da:	f7ff fa3f 	bl	800085c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff f90f 	bl	8000608 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbb9 	bl	8000b68 <__aeabi_d2iz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a9b      	ldr	r2, [pc, #620]	; (8001668 <BMP180_GetPress+0x2c8>)
 80013fa:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013fc:	4b9b      	ldr	r3, [pc, #620]	; (800166c <BMP180_GetPress+0x2cc>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f896 	bl	8000534 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b98      	ldr	r3, [pc, #608]	; (8001670 <BMP180_GetPress+0x2d0>)
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	4b96      	ldr	r3, [pc, #600]	; (8001674 <BMP180_GetPress+0x2d4>)
 800141c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001420:	461a      	mov	r2, r3
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <BMP180_GetPress+0x2c8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f883 	bl	8000534 <__aeabi_i2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff fa11 	bl	800085c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fb91 	bl	8000b68 <__aeabi_d2iz>
 8001446:	4603      	mov	r3, r0
 8001448:	4a8b      	ldr	r2, [pc, #556]	; (8001678 <BMP180_GetPress+0x2d8>)
 800144a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800144c:	4b86      	ldr	r3, [pc, #536]	; (8001668 <BMP180_GetPress+0x2c8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b89      	ldr	r3, [pc, #548]	; (8001678 <BMP180_GetPress+0x2d8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4413      	add	r3, r2
 8001456:	4a89      	ldr	r2, [pc, #548]	; (800167c <BMP180_GetPress+0x2dc>)
 8001458:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <BMP180_GetPress+0x2dc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001462:	4a87      	ldr	r2, [pc, #540]	; (8001680 <BMP180_GetPress+0x2e0>)
 8001464:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001466:	4b87      	ldr	r3, [pc, #540]	; (8001684 <BMP180_GetPress+0x2e4>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f861 	bl	8000534 <__aeabi_i2d>
 8001472:	4604      	mov	r4, r0
 8001474:	460d      	mov	r5, r1
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <BMP180_GetPress+0x2e0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a81      	ldr	r2, [pc, #516]	; (8001680 <BMP180_GetPress+0x2e0>)
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f856 	bl	8000534 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <BMP180_GetPress+0x2e8>)
 800148e:	f7ff f9e5 	bl	800085c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7ff f8b5 	bl	8000608 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b71      	ldr	r3, [pc, #452]	; (8001670 <BMP180_GetPress+0x2d0>)
 80014ac:	f7ff f9d6 	bl	800085c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb56 	bl	8000b68 <__aeabi_d2iz>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <BMP180_GetPress+0x2c8>)
 80014c0:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <BMP180_GetPress+0x2ec>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <BMP180_GetPress+0x2e0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f82e 	bl	8000534 <__aeabi_i2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <BMP180_GetPress+0x2d0>)
 80014de:	f7ff f9bd 	bl	800085c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb3d 	bl	8000b68 <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a61      	ldr	r2, [pc, #388]	; (8001678 <BMP180_GetPress+0x2d8>)
 80014f2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <BMP180_GetPress+0x2c8>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <BMP180_GetPress+0x2d8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a64      	ldr	r2, [pc, #400]	; (8001690 <BMP180_GetPress+0x2f0>)
 8001500:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001502:	4b64      	ldr	r3, [pc, #400]	; (8001694 <BMP180_GetPress+0x2f4>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	4b61      	ldr	r3, [pc, #388]	; (8001690 <BMP180_GetPress+0x2f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	441a      	add	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	3302      	adds	r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	da00      	bge.n	800151e <BMP180_GetPress+0x17e>
 800151c:	3303      	adds	r3, #3
 800151e:	109b      	asrs	r3, r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <BMP180_GetPress+0x2f8>)
 8001524:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <BMP180_GetPress+0x2fc>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	461a      	mov	r2, r3
 800152e:	4b54      	ldr	r3, [pc, #336]	; (8001680 <BMP180_GetPress+0x2e0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fffc 	bl	8000534 <__aeabi_i2d>
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <BMP180_GetPress+0x300>)
 8001542:	f7ff f98b 	bl	800085c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb0b 	bl	8000b68 <__aeabi_d2iz>
 8001552:	4603      	mov	r3, r0
 8001554:	4a44      	ldr	r2, [pc, #272]	; (8001668 <BMP180_GetPress+0x2c8>)
 8001556:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001558:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <BMP180_GetPress+0x304>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffe8 	bl	8000534 <__aeabi_i2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <BMP180_GetPress+0x2e0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <BMP180_GetPress+0x2e0>)
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffdd 	bl	8000534 <__aeabi_i2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b42      	ldr	r3, [pc, #264]	; (8001688 <BMP180_GetPress+0x2e8>)
 8001580:	f7ff f96c 	bl	800085c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7ff f83c 	bl	8000608 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <BMP180_GetPress+0x308>)
 800159e:	f7ff f95d 	bl	800085c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fadd 	bl	8000b68 <__aeabi_d2iz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a31      	ldr	r2, [pc, #196]	; (8001678 <BMP180_GetPress+0x2d8>)
 80015b2:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <BMP180_GetPress+0x2c8>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <BMP180_GetPress+0x2d8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	3302      	adds	r3, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffb7 	bl	8000534 <__aeabi_i2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <BMP180_GetPress+0x30c>)
 80015cc:	f7ff f946 	bl	800085c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fac6 	bl	8000b68 <__aeabi_d2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <BMP180_GetPress+0x2f0>)
 80015e0:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <BMP180_GetPress+0x310>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <BMP180_GetPress+0x2f0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff8d 	bl	8000514 <__aeabi_ui2d>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <BMP180_GetPress+0x2c4>)
 8001600:	f7ff f92c 	bl	800085c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fad4 	bl	8000bb8 <__aeabi_d2uiz>
 8001610:	4603      	mov	r3, r0
 8001612:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <BMP180_GetPress+0x314>)
 8001614:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <BMP180_GetPress+0x2b4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <BMP180_GetPress+0x2f8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	fa41 f202 	asr.w	r2, r1, r2
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <BMP180_GetPress+0x318>)
 8001632:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <BMP180_GetPress+0x318>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db41      	blt.n	80016c0 <BMP180_GetPress+0x320>
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <BMP180_GetPress+0x318>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <BMP180_GetPress+0x314>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	461a      	mov	r2, r3
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <BMP180_GetPress+0x31c>)
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e040      	b.n	80016d4 <BMP180_GetPress+0x334>
 8001652:	bf00      	nop
 8001654:	20000d78 	.word	0x20000d78
 8001658:	20000d74 	.word	0x20000d74
 800165c:	20000d66 	.word	0x20000d66
 8001660:	20000d64 	.word	0x20000d64
 8001664:	40e00000 	.word	0x40e00000
 8001668:	20000d7c 	.word	0x20000d7c
 800166c:	20000d6e 	.word	0x20000d6e
 8001670:	40a00000 	.word	0x40a00000
 8001674:	20000d70 	.word	0x20000d70
 8001678:	20000d80 	.word	0x20000d80
 800167c:	20000d8c 	.word	0x20000d8c
 8001680:	20000d94 	.word	0x20000d94
 8001684:	20000d6a 	.word	0x20000d6a
 8001688:	40b00000 	.word	0x40b00000
 800168c:	20000d5e 	.word	0x20000d5e
 8001690:	20000d84 	.word	0x20000d84
 8001694:	20000d5c 	.word	0x20000d5c
 8001698:	20000d88 	.word	0x20000d88
 800169c:	20000d60 	.word	0x20000d60
 80016a0:	40c00000 	.word	0x40c00000
 80016a4:	20000d68 	.word	0x20000d68
 80016a8:	40f00000 	.word	0x40f00000
 80016ac:	40100000 	.word	0x40100000
 80016b0:	20000d62 	.word	0x20000d62
 80016b4:	20000d90 	.word	0x20000d90
 80016b8:	20000d98 	.word	0x20000d98
 80016bc:	20000d9c 	.word	0x20000d9c
	else Press = (B7/B4)*2;
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <BMP180_GetPress+0x43c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <BMP180_GetPress+0x440>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <BMP180_GetPress+0x444>)
 80016d2:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <BMP180_GetPress+0x444>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff2b 	bl	8000534 <__aeabi_i2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <BMP180_GetPress+0x448>)
 80016e4:	f7ff f8ba 	bl	800085c <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	461d      	mov	r5, r3
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <BMP180_GetPress+0x444>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff1d 	bl	8000534 <__aeabi_i2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <BMP180_GetPress+0x448>)
 8001700:	f7ff f8ac 	bl	800085c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff7c 	bl	8000608 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa26 	bl	8000b68 <__aeabi_d2iz>
 800171c:	4603      	mov	r3, r0
 800171e:	4a33      	ldr	r2, [pc, #204]	; (80017ec <BMP180_GetPress+0x44c>)
 8001720:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <BMP180_GetPress+0x44c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f640 32de 	movw	r2, #3038	; 0xbde
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff00 	bl	8000534 <__aeabi_i2d>
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <BMP180_GetPress+0x450>)
 800173a:	f7ff f88f 	bl	800085c <__aeabi_ddiv>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff fa0f 	bl	8000b68 <__aeabi_d2iz>
 800174a:	4603      	mov	r3, r0
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <BMP180_GetPress+0x44c>)
 800174e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <BMP180_GetPress+0x444>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <BMP180_GetPress+0x454>)
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe feea 	bl	8000534 <__aeabi_i2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <BMP180_GetPress+0x450>)
 8001766:	f7ff f879 	bl	800085c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f9f9 	bl	8000b68 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <BMP180_GetPress+0x458>)
 800177a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <BMP180_GetPress+0x444>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fed7 	bl	8000534 <__aeabi_i2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <BMP180_GetPress+0x44c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <BMP180_GetPress+0x458>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fecb 	bl	8000534 <__aeabi_i2d>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <BMP180_GetPress+0x45c>)
 80017a4:	f7ff f85a 	bl	800085c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd74 	bl	800029c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f9d4 	bl	8000b68 <__aeabi_d2iz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <BMP180_GetPress+0x444>)
 80017c4:	6013      	str	r3, [r2, #0]

	return Press;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <BMP180_GetPress+0x444>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdb0      	pop	{r4, r5, r7, pc}
 80017dc:	20000d98 	.word	0x20000d98
 80017e0:	20000d90 	.word	0x20000d90
 80017e4:	20000d9c 	.word	0x20000d9c
 80017e8:	40700000 	.word	0x40700000
 80017ec:	20000d7c 	.word	0x20000d7c
 80017f0:	40f00000 	.word	0x40f00000
 80017f4:	ffffe343 	.word	0xffffe343
 80017f8:	20000d80 	.word	0x20000d80
 80017fc:	40300000 	.word	0x40300000

08001800 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fdc9 	bl	80013a0 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <BMP180_GetAlt+0x88>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800188c <BMP180_GetAlt+0x8c>
 800181e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001822:	ee16 0a90 	vmov	r0, s13
 8001826:	f7fe fe97 	bl	8000558 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001878 <BMP180_GetAlt+0x78>
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f007 febf 	bl	80095b8 <pow>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	4913      	ldr	r1, [pc, #76]	; (8001890 <BMP180_GetAlt+0x90>)
 8001844:	f7fe fd28 	bl	8000298 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	a30b      	add	r3, pc, #44	; (adr r3, 8001880 <BMP180_GetAlt+0x80>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fed7 	bl	8000608 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f9c9 	bl	8000bf8 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	ee07 3a90 	vmov	s15, r3
}
 800186c:	eeb0 0a67 	vmov.f32	s0, s15
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	ccd745e4 	.word	0xccd745e4
 800187c:	3fc85b95 	.word	0x3fc85b95
 8001880:	00000000 	.word	0x00000000
 8001884:	40e5a540 	.word	0x40e5a540
 8001888:	20000d9c 	.word	0x20000d9c
 800188c:	47c5e680 	.word	0x47c5e680
 8001890:	3ff00000 	.word	0x3ff00000

08001894 <BMP180_Start>:

void BMP180_Start (void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001898:	f7ff fbb6 	bl	8001008 <read_calliberation_data>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80018b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80018c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80018c8:	e000      	b.n	80018cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80018ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80018cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f9      	beq.n	80018ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_write>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void test(uint8_t n, uint8_t k);

int _write(int file, char *ptr, int len)
 {
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e009      	b.n	8001914 <_write+0x26>
         ITM_SendChar(*ptr++);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ffc9 	bl	80018a0 <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf1      	blt.n	8001900 <_write+0x12>
     return len;
 800191c:	687b      	ldr	r3, [r7, #4]
 }
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <baslangic>:


void baslangic()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	LCD_print("**************", 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2100      	movs	r1, #0
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <baslangic+0x58>)
 8001932:	f000 fc57 	bl	80021e4 <LCD_print>
	LCD_print("*Cihaz       *", 0, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	2100      	movs	r1, #0
 800193a:	4812      	ldr	r0, [pc, #72]	; (8001984 <baslangic+0x5c>)
 800193c:	f000 fc52 	bl	80021e4 <LCD_print>
	LCD_print("*Basliyor    *", 0, 2);
 8001940:	2202      	movs	r2, #2
 8001942:	2100      	movs	r1, #0
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <baslangic+0x60>)
 8001946:	f000 fc4d 	bl	80021e4 <LCD_print>
	LCD_print("*Lutfen      *", 0, 3);
 800194a:	2203      	movs	r2, #3
 800194c:	2100      	movs	r1, #0
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <baslangic+0x64>)
 8001950:	f000 fc48 	bl	80021e4 <LCD_print>
	LCD_print("*Bekleyin..  *", 0, 4);
 8001954:	2204      	movs	r2, #4
 8001956:	2100      	movs	r1, #0
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <baslangic+0x68>)
 800195a:	f000 fc43 	bl	80021e4 <LCD_print>
	LCD_print("**************", 0, 5);
 800195e:	2205      	movs	r2, #5
 8001960:	2100      	movs	r1, #0
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <baslangic+0x58>)
 8001964:	f000 fc3e 	bl	80021e4 <LCD_print>
	HAL_Delay(1000);
 8001968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196c:	f000 fecc 	bl	8002708 <HAL_Delay>
	LCD_clear();
 8001970:	f000 fc57 	bl	8002222 <LCD_clear>
	LCD_goXY(0,0);
 8001974:	2100      	movs	r1, #0
 8001976:	2000      	movs	r0, #0
 8001978:	f000 fc6f 	bl	800225a <LCD_goXY>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	0800a40c 	.word	0x0800a40c
 8001984:	0800a41c 	.word	0x0800a41c
 8001988:	0800a42c 	.word	0x0800a42c
 800198c:	0800a43c 	.word	0x0800a43c
 8001990:	0800a44c 	.word	0x0800a44c

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	; 0x40
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199a:	f000 fe43 	bl	8002624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199e:	f000 f8fb 	bl	8001b98 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a2:	f000 f9bb 	bl	8001d1c <MX_GPIO_Init>
  MX_I2C1_Init();
 80019a6:	f000 f961 	bl	8001c6c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80019aa:	f000 f98d 	bl	8001cc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 80019ae:	2108      	movs	r1, #8
 80019b0:	486c      	ldr	r0, [pc, #432]	; (8001b64 <main+0x1d0>)
 80019b2:	f000 fa43 	bl	8001e3c <LCD_setRST>
	LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 80019b6:	2120      	movs	r1, #32
 80019b8:	486a      	ldr	r0, [pc, #424]	; (8001b64 <main+0x1d0>)
 80019ba:	f000 fa53 	bl	8001e64 <LCD_setDC>
	LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 80019be:	2110      	movs	r1, #16
 80019c0:	4868      	ldr	r0, [pc, #416]	; (8001b64 <main+0x1d0>)
 80019c2:	f000 fa8b 	bl	8001edc <LCD_setCE>
	LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	4866      	ldr	r0, [pc, #408]	; (8001b64 <main+0x1d0>)
 80019ca:	f000 fa73 	bl	8001eb4 <LCD_setCLK>
	LCD_setDATA(LCD_DATA_GPIO_Port, LCD_DATA_Pin);
 80019ce:	2140      	movs	r1, #64	; 0x40
 80019d0:	4864      	ldr	r0, [pc, #400]	; (8001b64 <main+0x1d0>)
 80019d2:	f000 fa5b 	bl	8001e8c <LCD_setDATA>
	LCD_init();
 80019d6:	f000 fb2b 	bl	8002030 <LCD_init>
	BMP180_Start();
 80019da:	f7ff ff5b 	bl	8001894 <BMP180_Start>
	baslangic(); // welcome message
 80019de:	f7ff ffa3 	bl	8001928 <baslangic>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sicaklik = BMP180_GetTemp();
 80019e2:	f7ff fbe1 	bl	80011a8 <BMP180_GetTemp>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <main+0x1d4>)
 80019ec:	edc3 7a00 	vstr	s15, [r3]

	  basinc = BMP180_GetPress (0);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff fcd5 	bl	80013a0 <BMP180_GetPress>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <main+0x1d8>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]

	  yukseklik = BMP180_GetAlt(0);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fefd 	bl	8001800 <BMP180_GetAlt>
 8001a06:	eef0 7a40 	vmov.f32	s15, s0
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <main+0x1dc>)
 8001a0c:	edc3 7a00 	vstr	s15, [r3]

	  char sicaklik_s[15];
	  char basinc_s[15];
	  char yukseklik_s[15];

	  int sicaklik_len = sprintf(sicaklik_s, "%.1f\n", sicaklik);
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <main+0x1d4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd9f 	bl	8000558 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a22:	4954      	ldr	r1, [pc, #336]	; (8001b74 <main+0x1e0>)
 8001a24:	f003 ffd8 	bl	80059d8 <siprintf>
 8001a28:	63f8      	str	r0, [r7, #60]	; 0x3c
	  int basinc_len = sprintf(basinc_s, "%.1f\n", basinc);
 8001a2a:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <main+0x1d8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd92 	bl	8000558 <__aeabi_f2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	f107 0014 	add.w	r0, r7, #20
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <main+0x1e0>)
 8001a3e:	f003 ffcb 	bl	80059d8 <siprintf>
 8001a42:	63b8      	str	r0, [r7, #56]	; 0x38
	  int yukseklik_len = sprintf(yukseklik_s, "%.1f\n", yukseklik);
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <main+0x1dc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd85 	bl	8000558 <__aeabi_f2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	1d38      	adds	r0, r7, #4
 8001a54:	4947      	ldr	r1, [pc, #284]	; (8001b74 <main+0x1e0>)
 8001a56:	f003 ffbf 	bl	80059d8 <siprintf>
 8001a5a:	6378      	str	r0, [r7, #52]	; 0x34

	  HAL_UART_Transmit(&huart1, (uint8_t*)(&sicaklik_s), sicaklik_len, HAL_MAX_DELAY);
 8001a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	4843      	ldr	r0, [pc, #268]	; (8001b78 <main+0x1e4>)
 8001a6a:	f002 fd5a 	bl	8004522 <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1, (uint8_t*) "\n\r", 2, 100);
	  HAL_UART_Transmit(&huart1, (uint8_t*)(&yukseklik_s), yukseklik_len, HAL_MAX_DELAY);
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	1d39      	adds	r1, r7, #4
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	483f      	ldr	r0, [pc, #252]	; (8001b78 <main+0x1e4>)
 8001a7a:	f002 fd52 	bl	8004522 <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1, (uint8_t*) "\n\r", 2, 100);
	  HAL_UART_Transmit(&huart1, (uint8_t*)(&basinc_s), basinc_len, HAL_MAX_DELAY);
 8001a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f107 0114 	add.w	r1, r7, #20
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	483b      	ldr	r0, [pc, #236]	; (8001b78 <main+0x1e4>)
 8001a8c:	f002 fd49 	bl	8004522 <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1, (uint8_t*) "\n\r", 2, 100);

	  HAL_Delay(500);
 8001a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a94:	f000 fe38 	bl	8002708 <HAL_Delay>

	//  veri_oku();
	//  veri_yaz(data_oku, voltaj);

	  LCD_print("Barometre ", 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4837      	ldr	r0, [pc, #220]	; (8001b7c <main+0x1e8>)
 8001a9e:	f000 fba1 	bl	80021e4 <LCD_print>
	  LCD_print("==============", 0, 1);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4836      	ldr	r0, [pc, #216]	; (8001b80 <main+0x1ec>)
 8001aa8:	f000 fb9c 	bl	80021e4 <LCD_print>
	  LCD_print("Sicaklik: ", 0, 2);
 8001aac:	2202      	movs	r2, #2
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4834      	ldr	r0, [pc, #208]	; (8001b84 <main+0x1f0>)
 8001ab2:	f000 fb97 	bl	80021e4 <LCD_print>
	  LCD_print_float(sicaklik, 55, 2, FONT_SMALL);
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <main+0x1d4>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2102      	movs	r1, #2
 8001ac0:	2037      	movs	r0, #55	; 0x37
 8001ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac6:	f000 fb5d 	bl	8002184 <LCD_print_float>
	  LCD_print("Basinc: ", 0, 3);
 8001aca:	2203      	movs	r2, #3
 8001acc:	2100      	movs	r1, #0
 8001ace:	482e      	ldr	r0, [pc, #184]	; (8001b88 <main+0x1f4>)
 8001ad0:	f000 fb88 	bl	80021e4 <LCD_print>
	  LCD_print_float(basinc, 55, 3, FONT_SMALL);
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <main+0x1d8>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2103      	movs	r1, #3
 8001ade:	2037      	movs	r0, #55	; 0x37
 8001ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae4:	f000 fb4e 	bl	8002184 <LCD_print_float>
	  LCD_print("Yksklik: ", 0, 4);
 8001ae8:	2204      	movs	r2, #4
 8001aea:	2100      	movs	r1, #0
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <main+0x1f8>)
 8001aee:	f000 fb79 	bl	80021e4 <LCD_print>
	  LCD_print_float(yukseklik, 55, 4, FONT_SMALL);
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <main+0x1dc>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2104      	movs	r1, #4
 8001afc:	2037      	movs	r0, #55	; 0x37
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f000 fb3f 	bl	8002184 <LCD_print_float>
	  HAL_Delay(100);
 8001b06:	2064      	movs	r0, #100	; 0x64
 8001b08:	f000 fdfe 	bl	8002708 <HAL_Delay>
	if(sicaklik > 30 )
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <main+0x1d4>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	dd10      	ble.n	8001b42 <main+0x1ae>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	481a      	ldr	r0, [pc, #104]	; (8001b90 <main+0x1fc>)
 8001b28:	f001 f87c 	bl	8002c24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2102      	movs	r1, #2
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <main+0x1d0>)
 8001b32:	f001 f877 	bl	8002c24 <HAL_GPIO_WritePin>
		LCD_print("YUKSEKSICAKLIK", 0, 5);
 8001b36:	2205      	movs	r2, #5
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4816      	ldr	r0, [pc, #88]	; (8001b94 <main+0x200>)
 8001b3c:	f000 fb52 	bl	80021e4 <LCD_print>
 8001b40:	e74f      	b.n	80019e2 <main+0x4e>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <main+0x1fc>)
 8001b4a:	f001 f86b 	bl	8002c24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2102      	movs	r1, #2
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <main+0x1d0>)
 8001b54:	f001 f866 	bl	8002c24 <HAL_GPIO_WritePin>
		LCD_print("==============", 0, 5);
 8001b58:	2205      	movs	r2, #5
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <main+0x1ec>)
 8001b5e:	f000 fb41 	bl	80021e4 <LCD_print>
  {
 8001b62:	e73e      	b.n	80019e2 <main+0x4e>
 8001b64:	40020000 	.word	0x40020000
 8001b68:	20000e3c 	.word	0x20000e3c
 8001b6c:	20000e40 	.word	0x20000e40
 8001b70:	20000e44 	.word	0x20000e44
 8001b74:	0800a45c 	.word	0x0800a45c
 8001b78:	20000df8 	.word	0x20000df8
 8001b7c:	0800a464 	.word	0x0800a464
 8001b80:	0800a470 	.word	0x0800a470
 8001b84:	0800a480 	.word	0x0800a480
 8001b88:	0800a48c 	.word	0x0800a48c
 8001b8c:	0800a498 	.word	0x0800a498
 8001b90:	40020800 	.word	0x40020800
 8001b94:	0800a4a4 	.word	0x0800a4a4

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b094      	sub	sp, #80	; 0x50
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	2230      	movs	r2, #48	; 0x30
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 f85a 	bl	8004c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <SystemClock_Config+0xd0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001be4:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <SystemClock_Config+0xd0>)
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <SystemClock_Config+0xd0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c00:	2310      	movs	r3, #16
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c04:	2302      	movs	r3, #2
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c10:	2354      	movs	r3, #84	; 0x54
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 ffd9 	bl	8003bd8 <HAL_RCC_OscConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c2c:	f000 f900 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c30:	230f      	movs	r3, #15
 8001c32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fa3b 	bl	80040c8 <HAL_RCC_ClockConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c58:	f000 f8ea 	bl	8001e30 <Error_Handler>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3750      	adds	r7, #80	; 0x50
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40007000 	.word	0x40007000

08001c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <MX_I2C1_Init+0x54>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <MX_I2C1_Init+0x58>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001caa:	f000 ffd5 	bl	8002c58 <HAL_I2C_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cb4:	f000 f8bc 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000da4 	.word	0x20000da4
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	000186a0 	.word	0x000186a0

08001cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cfe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d02:	f002 fbc1 	bl	8004488 <HAL_UART_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001d0c:	f000 f890 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000df8 	.word	0x20000df8
 8001d18:	40011000 	.word	0x40011000

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a3a      	ldr	r2, [pc, #232]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a2c      	ldr	r2, [pc, #176]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <MX_GPIO_Init+0x108>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da8:	481f      	ldr	r0, [pc, #124]	; (8001e28 <MX_GPIO_Init+0x10c>)
 8001daa:	f000 ff3b 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <MX_GPIO_Init+0x10c>)
 8001db6:	f000 ff35 	bl	8002c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDA1_Pin|LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin
 8001dba:	2200      	movs	r2, #0
 8001dbc:	21fa      	movs	r1, #250	; 0xfa
 8001dbe:	481b      	ldr	r0, [pc, #108]	; (8001e2c <MX_GPIO_Init+0x110>)
 8001dc0:	f000 ff30 	bl	8002c24 <HAL_GPIO_WritePin>
                          |LCD_DATA_Pin|LCD_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4812      	ldr	r0, [pc, #72]	; (8001e28 <MX_GPIO_Init+0x10c>)
 8001dde:	f000 fd9d 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480b      	ldr	r0, [pc, #44]	; (8001e28 <MX_GPIO_Init+0x10c>)
 8001dfc:	f000 fd8e 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA1_Pin LCD_RST_Pin LCD_CE_Pin LCD_DC_Pin
                           LCD_DATA_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LEDA1_Pin|LCD_RST_Pin|LCD_CE_Pin|LCD_DC_Pin
 8001e00:	23fa      	movs	r3, #250	; 0xfa
 8001e02:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_Pin|LCD_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_GPIO_Init+0x110>)
 8001e18:	f000 fd80 	bl	800291c <HAL_GPIO_Init>

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <Error_Handler+0x8>
	...

08001e3c <LCD_setRST>:
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
    lcd_gpio.RSTPORT = PORT;
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <LCD_setRST+0x24>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
    lcd_gpio.RSTPIN = PIN;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <LCD_setRST+0x24>)
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	8093      	strh	r3, [r2, #4]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	20000e48 	.word	0x20000e48

08001e64 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
    lcd_gpio.DCPORT = PORT;
 8001e70:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <LCD_setDC+0x24>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6093      	str	r3, [r2, #8]
    lcd_gpio.DCPIN = PIN;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <LCD_setDC+0x24>)
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	8193      	strh	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000e48 	.word	0x20000e48

08001e8c <LCD_setDATA>:

void LCD_setDATA(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
    lcd_gpio.DATAPORT = PORT;
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <LCD_setDATA+0x24>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6193      	str	r3, [r2, #24]
    lcd_gpio.DATAPIN = PIN;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <LCD_setDATA+0x24>)
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	8393      	strh	r3, [r2, #28]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	20000e48 	.word	0x20000e48

08001eb4 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
    lcd_gpio.CLKPORT = PORT;
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <LCD_setCLK+0x24>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6113      	str	r3, [r2, #16]
    lcd_gpio.CLKPIN = PIN;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <LCD_setCLK+0x24>)
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	8293      	strh	r3, [r2, #20]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	20000e48 	.word	0x20000e48

08001edc <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef *PORT, uint16_t PIN)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
    lcd_gpio.CEPORT = PORT;
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <LCD_setCE+0x24>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6213      	str	r3, [r2, #32]
    lcd_gpio.CEPIN = PIN;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <LCD_setCE+0x24>)
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20000e48 	.word	0x20000e48

08001f04 <LCD_send>:
/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t* val, uint16_t len)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, 0);
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <LCD_send+0xac>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <LCD_send+0xac>)
 8001f16:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fe82 	bl	8002c24 <HAL_GPIO_WritePin>

    for (uint16_t x = 0; x < len; x++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	81fb      	strh	r3, [r7, #14]
 8001f24:	e034      	b.n	8001f90 <LCD_send+0x8c>
    {
        for (int8_t i = 7; i >= 0; i--)
 8001f26:	2307      	movs	r3, #7
 8001f28:	737b      	strb	r3, [r7, #13]
 8001f2a:	e02a      	b.n	8001f82 <LCD_send+0x7e>
        {
            HAL_GPIO_WritePin(lcd_gpio.DATAPORT, lcd_gpio.DATAPIN, (val[x] & (1 << i)));
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <LCD_send+0xac>)
 8001f2e:	6998      	ldr	r0, [r3, #24]
 8001f30:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <LCD_send+0xac>)
 8001f32:	8b99      	ldrh	r1, [r3, #28]
 8001f34:	89fb      	ldrh	r3, [r7, #14]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f42:	2401      	movs	r4, #1
 8001f44:	fa04 f303 	lsl.w	r3, r4, r3
 8001f48:	b25b      	sxtb	r3, r3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	f000 fe67 	bl	8002c24 <HAL_GPIO_WritePin>

            HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, 1);
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <LCD_send+0xac>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <LCD_send+0xac>)
 8001f5c:	8a91      	ldrh	r1, [r2, #20]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fe5f 	bl	8002c24 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, 0);
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <LCD_send+0xac>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <LCD_send+0xac>)
 8001f6c:	8a91      	ldrh	r1, [r2, #20]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 fe57 	bl	8002c24 <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 8001f76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	737b      	strb	r3, [r7, #13]
 8001f82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dad0      	bge.n	8001f2c <LCD_send+0x28>
    for (uint16_t x = 0; x < len; x++)
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	81fb      	strh	r3, [r7, #14]
 8001f90:	89fa      	ldrh	r2, [r7, #14]
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3c6      	bcc.n	8001f26 <LCD_send+0x22>
        }
    }

    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, 1);
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <LCD_send+0xac>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <LCD_send+0xac>)
 8001f9e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fe3e 	bl	8002c24 <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	20000e48 	.word	0x20000e48

08001fb4 <LCD_write>:
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t* data, uint8_t mode, uint16_t len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	803b      	strh	r3, [r7, #0]
    if (mode == LCD_COMMAND)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <LCD_write+0x32>
    {
        HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <LCD_write+0x54>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <LCD_write+0x54>)
 8001fd0:	8991      	ldrh	r1, [r2, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fe25 	bl	8002c24 <HAL_GPIO_WritePin>
        LCD_send(data, len);
 8001fda:	883b      	ldrh	r3, [r7, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff90 	bl	8001f04 <LCD_send>
    else
    {
        HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
        LCD_send(data, len);
    }
}
 8001fe4:	e00c      	b.n	8002000 <LCD_write+0x4c>
        HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LCD_write+0x54>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <LCD_write+0x54>)
 8001fec:	8991      	ldrh	r1, [r2, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fe17 	bl	8002c24 <HAL_GPIO_WritePin>
        LCD_send(data, len);
 8001ff6:	883b      	ldrh	r3, [r7, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff82 	bl	8001f04 <LCD_send>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000e48 	.word	0x20000e48

0800200c <LCD_write_byte>:
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write_byte(uint8_t data, int8_t mode)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	460a      	mov	r2, r1
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	4613      	mov	r3, r2
 800201a:	71bb      	strb	r3, [r7, #6]
    LCD_write(&data, mode, 1);
 800201c:	79b9      	ldrb	r1, [r7, #6]
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	2201      	movs	r2, #1
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ffc6 	bl	8001fb4 <LCD_write>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <LCD_init+0x6c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <LCD_init+0x6c>)
 800203a:	8891      	ldrh	r1, [r2, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fdf0 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <LCD_init+0x6c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <LCD_init+0x6c>)
 800204a:	8891      	ldrh	r1, [r2, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fde8 	bl	8002c24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <LCD_init+0x6c>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a10      	ldr	r2, [pc, #64]	; (800209c <LCD_init+0x6c>)
 800205a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800205c:	2201      	movs	r2, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fde0 	bl	8002c24 <HAL_GPIO_WritePin>

    LCD_write_byte(0x21, LCD_COMMAND);                   //LCD extended commands.
 8002064:	2100      	movs	r1, #0
 8002066:	2021      	movs	r0, #33	; 0x21
 8002068:	f7ff ffd0 	bl	800200c <LCD_write_byte>
    LCD_write_byte(0xB8, LCD_COMMAND);                   //set LCD Vop(Contrast).
 800206c:	2100      	movs	r1, #0
 800206e:	20b8      	movs	r0, #184	; 0xb8
 8002070:	f7ff ffcc 	bl	800200c <LCD_write_byte>
    LCD_write_byte(0x04, LCD_COMMAND);                   //set temp coefficent.
 8002074:	2100      	movs	r1, #0
 8002076:	2004      	movs	r0, #4
 8002078:	f7ff ffc8 	bl	800200c <LCD_write_byte>
    LCD_write_byte(0x14, LCD_COMMAND);                   //LCD bias mode 1:40.
 800207c:	2100      	movs	r1, #0
 800207e:	2014      	movs	r0, #20
 8002080:	f7ff ffc4 	bl	800200c <LCD_write_byte>
    LCD_write_byte(0x20, LCD_COMMAND);                   //LCD basic commands.
 8002084:	2100      	movs	r1, #0
 8002086:	2020      	movs	r0, #32
 8002088:	f7ff ffc0 	bl	800200c <LCD_write_byte>
    LCD_write_byte(LCD_DISPLAY_NORMAL, LCD_COMMAND);     //LCD normal.
 800208c:	2100      	movs	r1, #0
 800208e:	200c      	movs	r0, #12
 8002090:	f7ff ffbc 	bl	800200c <LCD_write_byte>

    LCD_clear();
 8002094:	f000 f8c5 	bl	8002222 <LCD_clear>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000e48 	.word	0x20000e48

080020a0 <LCD_putChar>:
/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
    unsigned char * s = &font_8x6.font[(c-0x20) * font_8x6.WIDTH];
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <LCD_putChar+0x38>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	79fa      	ldrb	r2, [r7, #7]
 80020b0:	3a20      	subs	r2, #32
 80020b2:	4909      	ldr	r1, [pc, #36]	; (80020d8 <LCD_putChar+0x38>)
 80020b4:	7809      	ldrb	r1, [r1, #0]
 80020b6:	fb01 f202 	mul.w	r2, r1, r2
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    LCD_write(s, LCD_DATA, font_8x6.WIDTH);
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <LCD_putChar+0x38>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	2101      	movs	r1, #1
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ff73 	bl	8001fb4 <LCD_write>
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000b58 	.word	0x20000b58

080020dc <LCD_print_large>:
 * @brief Print a large string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print_large(char *str, uint8_t x, uint8_t y)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]
 80020e8:	4613      	mov	r3, r2
 80020ea:	70bb      	strb	r3, [r7, #2]
    int len = strlen(str);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe f877 	bl	80001e0 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	60fb      	str	r3, [r7, #12]
    unsigned char *s;

    // Loop over characters
    for (int i = 0; i < len; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e037      	b.n	800216c <LCD_print_large+0x90>
    {
        s = &font_32x16.font[(((unsigned char) str[i]) - 32) * 64];
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <LCD_print_large+0xa4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	440a      	add	r2, r1
 8002106:	7812      	ldrb	r2, [r2, #0]
 8002108:	3a20      	subs	r2, #32
 800210a:	0192      	lsls	r2, r2, #6
 800210c:	4413      	add	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]

        for(int j = 0; j < 4; j++)
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e024      	b.n	8002160 <LCD_print_large+0x84>
        {
            LCD_goXY(x + (i * font_32x16.WIDTH), y + j);
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <LCD_print_large+0xa4>)
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	fb12 f303 	smulbb	r3, r2, r3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	4413      	add	r3, r2
 8002128:	b2d8      	uxtb	r0, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	78bb      	ldrb	r3, [r7, #2]
 8002130:	4413      	add	r3, r2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	f000 f890 	bl	800225a <LCD_goXY>
            LCD_write(s + font_32x16.WIDTH * j, LCD_DATA, font_32x16.WIDTH);
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <LCD_print_large+0xa4>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4413      	add	r3, r2
 800214c:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <LCD_print_large+0xa4>)
 800214e:	7812      	ldrb	r2, [r2, #0]
 8002150:	b292      	uxth	r2, r2
 8002152:	2101      	movs	r1, #1
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff2d 	bl	8001fb4 <LCD_write>
        for(int j = 0; j < 4; j++)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	3301      	adds	r3, #1
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b03      	cmp	r3, #3
 8002164:	ddd7      	ble.n	8002116 <LCD_print_large+0x3a>
    for (int i = 0; i < len; i++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbc3      	blt.n	80020fc <LCD_print_large+0x20>
        }
    }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000b50 	.word	0x20000b50

08002184 <LCD_print_float>:

void LCD_print_float(float number, uint8_t x, uint8_t y, uint16_t size)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	ed87 0a01 	vstr	s0, [r7, #4]
 800218e:	4603      	mov	r3, r0
 8002190:	70fb      	strb	r3, [r7, #3]
 8002192:	460b      	mov	r3, r1
 8002194:	70bb      	strb	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	803b      	strh	r3, [r7, #0]
    char buffer[5];
    snprintf(buffer, 5, "%.1f", number);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe f9dc 	bl	8000558 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	f107 0008 	add.w	r0, r7, #8
 80021a8:	e9cd 2300 	strd	r2, r3, [sp]
 80021ac:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <LCD_print_float+0x5c>)
 80021ae:	2105      	movs	r1, #5
 80021b0:	f003 fbde 	bl	8005970 <sniprintf>

    if(size == FONT_BIG)
 80021b4:	883b      	ldrh	r3, [r7, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <LCD_print_float+0x46>
        LCD_print_large(buffer, x, y);
 80021ba:	78ba      	ldrb	r2, [r7, #2]
 80021bc:	78f9      	ldrb	r1, [r7, #3]
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff8a 	bl	80020dc <LCD_print_large>
    else
        LCD_print(buffer, x, y);
}
 80021c8:	e006      	b.n	80021d8 <LCD_print_float+0x54>
        LCD_print(buffer, x, y);
 80021ca:	78ba      	ldrb	r2, [r7, #2]
 80021cc:	78f9      	ldrb	r1, [r7, #3]
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f806 	bl	80021e4 <LCD_print>
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0800a4b4 	.word	0x0800a4b4

080021e4 <LCD_print>:
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
 80021f0:	4613      	mov	r3, r2
 80021f2:	70bb      	strb	r3, [r7, #2]
    LCD_goXY(x, y);
 80021f4:	78ba      	ldrb	r2, [r7, #2]
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f82d 	bl	800225a <LCD_goXY>

    while (*str)
 8002200:	e006      	b.n	8002210 <LCD_print+0x2c>
    {
        LCD_putChar(*str++);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ff48 	bl	80020a0 <LCD_putChar>
    while (*str)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f4      	bne.n	8002202 <LCD_print+0x1e>
    }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <LCD_clear>:

/*
 * @brief Clear the screen
 */
void LCD_clear()
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b0fe      	sub	sp, #504	; 0x1f8
 8002226:	af00      	add	r7, sp, #0
    uint8_t clear[LCD_SIZE] = {0x00};
 8002228:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800222c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	3304      	adds	r3, #4
 8002236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fd0f 	bl	8004c60 <memset>
    LCD_write(clear, LCD_DATA, LCD_SIZE);
 8002242:	463b      	mov	r3, r7
 8002244:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff feb2 	bl	8001fb4 <LCD_write>
}
 8002250:	bf00      	nop
 8002252:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <LCD_goXY>:
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	460a      	mov	r2, r1
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	4613      	mov	r3, r2
 8002268:	71bb      	strb	r3, [r7, #6]
    LCD_write_byte(LCD_SETXADDR | x, LCD_COMMAND); //Column.
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fec9 	bl	800200c <LCD_write_byte>
    LCD_write_byte(LCD_SETYADDR | y, LCD_COMMAND); //Row.
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fec1 	bl	800200c <LCD_write_byte>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_MspInit+0x4c>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_MspInit+0x4c>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_MspInit+0x4c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_MspInit+0x4c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_MspInit+0x4c>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_MspInit+0x4c>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_I2C_MspInit+0x84>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12b      	bne.n	800235e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <HAL_I2C_MspInit+0x88>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_I2C_MspInit+0x88>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_I2C_MspInit+0x88>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002322:	23c0      	movs	r3, #192	; 0xc0
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002326:	2312      	movs	r3, #18
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002332:	2304      	movs	r3, #4
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <HAL_I2C_MspInit+0x8c>)
 800233e:	f000 faed 	bl	800291c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_I2C_MspInit+0x88>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_I2C_MspInit+0x88>)
 800234c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_I2C_MspInit+0x88>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40005400 	.word	0x40005400
 800236c:	40023800 	.word	0x40023800
 8002370:	40020400 	.word	0x40020400

08002374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_UART_MspInit+0x84>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d12c      	bne.n	80023f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <HAL_UART_MspInit+0x88>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <HAL_UART_MspInit+0x88>)
 80023a0:	f043 0310 	orr.w	r3, r3, #16
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_UART_MspInit+0x88>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_UART_MspInit+0x88>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_UART_MspInit+0x88>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_UART_MspInit+0x88>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e0:	2307      	movs	r3, #7
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4805      	ldr	r0, [pc, #20]	; (8002400 <HAL_UART_MspInit+0x8c>)
 80023ec:	f000 fa96 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	; 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020000 	.word	0x40020000

08002404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <NMI_Handler+0x4>

0800240a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <MemManage_Handler+0x4>

08002416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <BusFault_Handler+0x4>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <UsageFault_Handler+0x4>

08002422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002450:	f000 f93a 	bl	80026c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002472:	f002 fbcb 	bl	8004c0c <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
	return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
	while (1) {}		/* Make sure we hang here */
 800249a:	e7fe      	b.n	800249a <_exit+0x12>

0800249c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
	}

return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_isatty>:

int _isatty(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
	return 1;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f002 fb4c 	bl	8004c0c <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20010000 	.word	0x20010000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	20000e70 	.word	0x20000e70
 80025a8:	20000e88 	.word	0x20000e88

080025ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025d6:	490e      	ldr	r1, [pc, #56]	; (8002610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025ec:	4c0b      	ldr	r4, [pc, #44]	; (800261c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025fa:	f7ff ffd7 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fe:	f002 fb0b 	bl	8004c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002602:	f7ff f9c7 	bl	8001994 <main>
  bx  lr    
 8002606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002608:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	20000d40 	.word	0x20000d40
  ldr r2, =_sidata
 8002614:	0800a9c0 	.word	0x0800a9c0
  ldr r2, =_sbss
 8002618:	20000d40 	.word	0x20000d40
  ldr r4, =_ebss
 800261c:	20000e88 	.word	0x20000e88

08002620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC_IRQHandler>
	...

08002624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <HAL_Init+0x40>)
 800262e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_Init+0x40>)
 800263a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_Init+0x40>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 f931 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	200f      	movs	r0, #15
 8002654:	f000 f808 	bl	8002668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff fe1c 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x54>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_InitTick+0x58>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f93b 	bl	8002902 <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e00e      	b.n	80026b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b0f      	cmp	r3, #15
 800269a:	d80a      	bhi.n	80026b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269c:	2200      	movs	r2, #0
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f000 f911 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <HAL_InitTick+0x5c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000b60 	.word	0x20000b60
 80026c0:	20000b68 	.word	0x20000b68
 80026c4:	20000b64 	.word	0x20000b64

080026c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000b68 	.word	0x20000b68
 80026ec:	20000e74 	.word	0x20000e74

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000e74 	.word	0x20000e74

08002708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff ffee 	bl	80026f0 <HAL_GetTick>
 8002714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d005      	beq.n	800272e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_Delay+0x44>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800272e:	bf00      	nop
 8002730:	f7ff ffde 	bl	80026f0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d8f7      	bhi.n	8002730 <HAL_Delay+0x28>
  {
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000b68 	.word	0x20000b68

08002750 <__NVIC_SetPriorityGrouping>:
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_SetPriority>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <SysTick_Config>:
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff8e 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff47 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff5c 	bl	8002798 <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff8e 	bl	8002808 <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5d 	bl	80027b4 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffb0 	bl	8002870 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	e159      	b.n	8002bec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	429a      	cmp	r2, r3
 8002952:	f040 8148 	bne.w	8002be6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d005      	beq.n	800296e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	2b02      	cmp	r3, #2
 800296c:	d130      	bne.n	80029d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 0201 	and.w	r2, r3, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d017      	beq.n	8002a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d123      	bne.n	8002a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	220f      	movs	r2, #15
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0203 	and.w	r2, r3, #3
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a2 	beq.w	8002be6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a56      	ldr	r2, [pc, #344]	; (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b54      	ldr	r3, [pc, #336]	; (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002abe:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_GPIO_Init+0x2ec>)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a49      	ldr	r2, [pc, #292]	; (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x202>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a48      	ldr	r2, [pc, #288]	; (8002c10 <HAL_GPIO_Init+0x2f4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x1fe>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a47      	ldr	r2, [pc, #284]	; (8002c14 <HAL_GPIO_Init+0x2f8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <HAL_GPIO_Init+0x2fc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x1f6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a45      	ldr	r2, [pc, #276]	; (8002c1c <HAL_GPIO_Init+0x300>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x1f2>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e008      	b.n	8002b20 <HAL_GPIO_Init+0x204>
 8002b0e:	2307      	movs	r3, #7
 8002b10:	e006      	b.n	8002b20 <HAL_GPIO_Init+0x204>
 8002b12:	2303      	movs	r3, #3
 8002b14:	e004      	b.n	8002b20 <HAL_GPIO_Init+0x204>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_Init+0x204>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_GPIO_Init+0x204>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f002 0203 	and.w	r2, r2, #3
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4093      	lsls	r3, r2
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b30:	4935      	ldr	r1, [pc, #212]	; (8002c08 <HAL_GPIO_Init+0x2ec>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	3302      	adds	r3, #2
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb6:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be0:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <HAL_GPIO_Init+0x304>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3301      	adds	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b0f      	cmp	r3, #15
 8002bf0:	f67f aea2 	bls.w	8002938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	40020400 	.word	0x40020400
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020c00 	.word	0x40020c00
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e12b      	b.n	8002ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff fb30 	bl	80022e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2224      	movs	r2, #36	; 0x24
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cbc:	f001 fbbc 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8002cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a81      	ldr	r2, [pc, #516]	; (8002ecc <HAL_I2C_Init+0x274>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d807      	bhi.n	8002cdc <HAL_I2C_Init+0x84>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_I2C_Init+0x278>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e006      	b.n	8002cea <HAL_I2C_Init+0x92>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a7d      	ldr	r2, [pc, #500]	; (8002ed4 <HAL_I2C_Init+0x27c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bf94      	ite	ls
 8002ce4:	2301      	movls	r3, #1
 8002ce6:	2300      	movhi	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0e7      	b.n	8002ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a78      	ldr	r2, [pc, #480]	; (8002ed8 <HAL_I2C_Init+0x280>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <HAL_I2C_Init+0x274>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d802      	bhi.n	8002d2c <HAL_I2C_Init+0xd4>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	e009      	b.n	8002d40 <HAL_I2C_Init+0xe8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	4a69      	ldr	r2, [pc, #420]	; (8002edc <HAL_I2C_Init+0x284>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	3301      	adds	r3, #1
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	495c      	ldr	r1, [pc, #368]	; (8002ecc <HAL_I2C_Init+0x274>)
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	d819      	bhi.n	8002d94 <HAL_I2C_Init+0x13c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e59      	subs	r1, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6e:	1c59      	adds	r1, r3, #1
 8002d70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d74:	400b      	ands	r3, r1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_I2C_Init+0x138>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e59      	subs	r1, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8e:	e051      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e04f      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d111      	bne.n	8002dc0 <HAL_I2C_Init+0x168>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e012      	b.n	8002de6 <HAL_I2C_Init+0x18e>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e58      	subs	r0, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	0099      	lsls	r1, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Init+0x196>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e022      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10e      	bne.n	8002e14 <HAL_I2C_Init+0x1bc>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e58      	subs	r0, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	440b      	add	r3, r1
 8002e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e58      	subs	r0, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	0099      	lsls	r1, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6809      	ldr	r1, [r1, #0]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6911      	ldr	r1, [r2, #16]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	000186a0 	.word	0x000186a0
 8002ed0:	001e847f 	.word	0x001e847f
 8002ed4:	003d08ff 	.word	0x003d08ff
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	10624dd3 	.word	0x10624dd3

08002ee0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	461a      	mov	r2, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	817b      	strh	r3, [r7, #10]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	813b      	strh	r3, [r7, #8]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002efa:	f7ff fbf9 	bl	80026f0 <HAL_GetTick>
 8002efe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	f040 80d9 	bne.w	80030c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2319      	movs	r3, #25
 8002f14:	2201      	movs	r2, #1
 8002f16:	496d      	ldr	r1, [pc, #436]	; (80030cc <HAL_I2C_Mem_Write+0x1ec>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fc7f 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0cc      	b.n	80030c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_I2C_Mem_Write+0x56>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0c5      	b.n	80030c2 <HAL_I2C_Mem_Write+0x1e2>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d007      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2221      	movs	r2, #33	; 0x21
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_I2C_Mem_Write+0x1f0>)
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9e:	88f8      	ldrh	r0, [r7, #6]
 8002fa0:	893a      	ldrh	r2, [r7, #8]
 8002fa2:	8979      	ldrh	r1, [r7, #10]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4603      	mov	r3, r0
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fab6 	bl	8003520 <I2C_RequestMemoryWrite>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d052      	beq.n	8003060 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e081      	b.n	80030c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fd00 	bl	80039c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d107      	bne.n	8002fe6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d11b      	bne.n	8003060 <HAL_I2C_Mem_Write+0x180>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1aa      	bne.n	8002fbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fcec 	bl	8003a4a <I2C_WaitOnBTFFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b04      	cmp	r3, #4
 800307e:	d107      	bne.n	8003090 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e016      	b.n	80030c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	00100002 	.word	0x00100002
 80030d0:	ffff0000 	.word	0xffff0000

080030d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08c      	sub	sp, #48	; 0x30
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	817b      	strh	r3, [r7, #10]
 80030e6:	460b      	mov	r3, r1
 80030e8:	813b      	strh	r3, [r7, #8]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ee:	f7ff faff 	bl	80026f0 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	f040 8208 	bne.w	8003512 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2319      	movs	r3, #25
 8003108:	2201      	movs	r2, #1
 800310a:	497b      	ldr	r1, [pc, #492]	; (80032f8 <HAL_I2C_Mem_Read+0x224>)
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fb85 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
 800311a:	e1fb      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_I2C_Mem_Read+0x56>
 8003126:	2302      	movs	r3, #2
 8003128:	e1f4      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d007      	beq.n	8003150 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2222      	movs	r2, #34	; 0x22
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_I2C_Mem_Read+0x228>)
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003192:	88f8      	ldrh	r0, [r7, #6]
 8003194:	893a      	ldrh	r2, [r7, #8]
 8003196:	8979      	ldrh	r1, [r7, #10]
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4603      	mov	r3, r0
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fa52 	bl	800364c <I2C_RequestMemoryRead>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e1b0      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d113      	bne.n	80031e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	623b      	str	r3, [r7, #32]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e184      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d11b      	bne.n	8003222 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e164      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	2b02      	cmp	r3, #2
 8003228:	d11b      	bne.n	8003262 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003238:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	e144      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003278:	e138      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	2b03      	cmp	r3, #3
 8003280:	f200 80f1 	bhi.w	8003466 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	2b01      	cmp	r3, #1
 800328a:	d123      	bne.n	80032d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fc1b 	bl	8003acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e139      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d2:	e10b      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d14e      	bne.n	800337a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	2200      	movs	r2, #0
 80032e4:	4906      	ldr	r1, [pc, #24]	; (8003300 <HAL_I2C_Mem_Read+0x22c>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa98 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e10e      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
 80032f6:	bf00      	nop
 80032f8:	00100002 	.word	0x00100002
 80032fc:	ffff0000 	.word	0xffff0000
 8003300:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003378:	e0b8      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2200      	movs	r2, #0
 8003382:	4966      	ldr	r1, [pc, #408]	; (800351c <HAL_I2C_Mem_Read+0x448>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa49 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0bf      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2200      	movs	r2, #0
 80033de:	494f      	ldr	r1, [pc, #316]	; (800351c <HAL_I2C_Mem_Read+0x448>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fa1b 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e091      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003464:	e042      	b.n	80034ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fb2e 	bl	8003acc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e04c      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d118      	bne.n	80034ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f aec2 	bne.w	800327a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00010004 	.word	0x00010004

08003520 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	461a      	mov	r2, r3
 800352e:	4603      	mov	r3, r0
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	460b      	mov	r3, r1
 8003534:	813b      	strh	r3, [r7, #8]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2200      	movs	r2, #0
 8003552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f960 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003570:	d103      	bne.n	800357a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e05f      	b.n	800363e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800357e:	897b      	ldrh	r3, [r7, #10]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800358c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	492d      	ldr	r1, [pc, #180]	; (8003648 <I2C_RequestMemoryWrite+0x128>)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f998 	bl	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04c      	b.n	800363e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa02 	bl	80039c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d107      	bne.n	80035e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e02b      	b.n	800363e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ec:	893b      	ldrh	r3, [r7, #8]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	e021      	b.n	800363c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	6a39      	ldr	r1, [r7, #32]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f9dc 	bl	80039c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e005      	b.n	800363e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	00010002 	.word	0x00010002

0800364c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003674:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003684:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2200      	movs	r2, #0
 800368e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8c2 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ac:	d103      	bne.n	80036b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0aa      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	4952      	ldr	r1, [pc, #328]	; (8003818 <I2C_RequestMemoryRead+0x1cc>)
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8fa 	bl	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e097      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f964 	bl	80039c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e076      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e021      	b.n	8003778 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003734:	893b      	ldrh	r3, [r7, #8]
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	b29b      	uxth	r3, r3
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f93e 	bl	80039c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e050      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800376e:	893b      	ldrh	r3, [r7, #8]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	6a39      	ldr	r1, [r7, #32]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f923 	bl	80039c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b04      	cmp	r3, #4
 800378e:	d107      	bne.n	80037a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e035      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f82b 	bl	800381c <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00d      	beq.n	80037e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037da:	d103      	bne.n	80037e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e013      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	6a3a      	ldr	r2, [r7, #32]
 80037fc:	4906      	ldr	r1, [pc, #24]	; (8003818 <I2C_RequestMemoryRead+0x1cc>)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f863 	bl	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	00010002 	.word	0x00010002

0800381c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382c:	e025      	b.n	800387a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d021      	beq.n	800387a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fe ff5b 	bl	80026f0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e023      	b.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10d      	bne.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	e00c      	b.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d0b6      	beq.n	800382e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d8:	e051      	b.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d123      	bne.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0204 	orr.w	r2, r3, #4
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e046      	b.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d021      	beq.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fe fed9 	bl	80026f0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e020      	b.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10c      	bne.n	80039a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf14      	ite	ne
 800399a:	2301      	movne	r3, #1
 800399c:	2300      	moveq	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	e00b      	b.n	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	43da      	mvns	r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d18d      	bne.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039d4:	e02d      	b.n	8003a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f8ce 	bl	8003b78 <I2C_IsAcknowledgeFailed>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e02d      	b.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d021      	beq.n	8003a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fe fe7f 	bl	80026f0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d116      	bne.n	8003a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e007      	b.n	8003a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d1ca      	bne.n	80039d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a56:	e02d      	b.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f88d 	bl	8003b78 <I2C_IsAcknowledgeFailed>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e02d      	b.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6e:	d021      	beq.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7fe fe3e 	bl	80026f0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e007      	b.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d1ca      	bne.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ad8:	e042      	b.n	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d119      	bne.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0210 	mvn.w	r2, #16
 8003af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e029      	b.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1c:	f7fe fde8 	bl	80026f0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e007      	b.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d1b5      	bne.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	d11b      	bne.n	8003bc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e267      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d075      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d00c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d112      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0e:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x108>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d157      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e242      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x74>
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x98>
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6c      	ldr	r2, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a65      	ldr	r2, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe fd2e 	bl	80026f0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe fd2a 	bl	80026f0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e207      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xc0>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fd1a 	bl	80026f0 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fe fd16 	bl	80026f0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1f3      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xe8>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d063      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x152>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1c7      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4937      	ldr	r1, [pc, #220]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e03a      	b.n	8003db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_OscConfig+0x244>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe fccf 	bl	80026f0 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fe fccb 	bl	80026f0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1a8      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x244>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fcae 	bl	80026f0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fe fcaa 	bl	80026f0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e187      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d036      	beq.n	8003e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_RCC_OscConfig+0x248>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fe fc8e 	bl	80026f0 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7fe fc8a 	bl	80026f0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e167      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x200>
 8003df6:	e01b      	b.n	8003e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_OscConfig+0x248>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fe fc77 	bl	80026f0 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	e00e      	b.n	8003e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fe fc73 	bl	80026f0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d907      	bls.n	8003e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e150      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470000 	.word	0x42470000
 8003e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ea      	bne.n	8003e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8097 	beq.w	8003f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e42:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	4b7d      	ldr	r3, [pc, #500]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a7c      	ldr	r2, [pc, #496]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b7a      	ldr	r3, [pc, #488]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b77      	ldr	r3, [pc, #476]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b74      	ldr	r3, [pc, #464]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a73      	ldr	r2, [pc, #460]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fe fc33 	bl	80026f0 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fe fc2f 	bl	80026f0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e10c      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2ea>
 8003eb4:	4b64      	ldr	r3, [pc, #400]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a63      	ldr	r2, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e01c      	b.n	8003efc <HAL_RCC_OscConfig+0x324>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x30c>
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a5e      	ldr	r2, [pc, #376]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a5b      	ldr	r2, [pc, #364]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0x324>
 8003ee4:	4b58      	ldr	r3, [pc, #352]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	4b55      	ldr	r3, [pc, #340]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a54      	ldr	r2, [pc, #336]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe fbf4 	bl	80026f0 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fbf0 	bl	80026f0 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0cb      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ee      	beq.n	8003f0c <HAL_RCC_OscConfig+0x334>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fe fbde 	bl	80026f0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fe fbda 	bl	80026f0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0b5      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b39      	ldr	r3, [pc, #228]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	4a38      	ldr	r2, [pc, #224]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a1 	beq.w	80040b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d05c      	beq.n	800403c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d141      	bne.n	800400e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fbae 	bl	80026f0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fe fbaa 	bl	80026f0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e087      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	491b      	ldr	r1, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fb83 	bl	80026f0 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe fb7f 	bl	80026f0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e05c      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x416>
 800400c:	e054      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fe fb6c 	bl	80026f0 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7fe fb68 	bl	80026f0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e045      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x444>
 800403a:	e03d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d107      	bne.n	8004054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e038      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
 8004050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x4ec>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d028      	beq.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d121      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d11a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	4293      	cmp	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0cc      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d90c      	bls.n	8004104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	494d      	ldr	r1, [pc, #308]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d044      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d119      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d003      	beq.n	8004186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004182:	2b03      	cmp	r3, #3
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e06f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e067      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4934      	ldr	r1, [pc, #208]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fe fa9a 	bl	80026f0 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fe fa96 	bl	80026f0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e04f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20c      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e032      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424e:	f000 f821 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004252:	4602      	mov	r2, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	490a      	ldr	r1, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	5ccb      	ldrb	r3, [r1, r3]
 8004262:	fa22 f303 	lsr.w	r3, r2, r3
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f9fa 	bl	8002668 <HAL_InitTick>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023c00 	.word	0x40023c00
 8004284:	40023800 	.word	0x40023800
 8004288:	0800a4c0 	.word	0x0800a4c0
 800428c:	20000b60 	.word	0x20000b60
 8004290:	20000b64 	.word	0x20000b64

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b090      	sub	sp, #64	; 0x40
 800429a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	637b      	str	r3, [r7, #52]	; 0x34
 80042a0:	2300      	movs	r3, #0
 80042a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a4:	2300      	movs	r3, #0
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ac:	4b59      	ldr	r3, [pc, #356]	; (8004414 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x40>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	f200 80a1 	bhi.w	8004400 <HAL_RCC_GetSysClockFreq+0x16c>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x34>
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x3a>
 80042c6:	e09b      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b53      	ldr	r3, [pc, #332]	; (8004418 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042cc:	e09b      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ce:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_GetSysClockFreq+0x188>)
 80042d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042d2:	e098      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042de:	4b4d      	ldr	r3, [pc, #308]	; (8004414 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d028      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	2200      	movs	r2, #0
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	627a      	str	r2, [r7, #36]	; 0x24
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042fc:	2100      	movs	r1, #0
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_RCC_GetSysClockFreq+0x188>)
 8004300:	fb03 f201 	mul.w	r2, r3, r1
 8004304:	2300      	movs	r3, #0
 8004306:	fb00 f303 	mul.w	r3, r0, r3
 800430a:	4413      	add	r3, r2
 800430c:	4a43      	ldr	r2, [pc, #268]	; (800441c <HAL_RCC_GetSysClockFreq+0x188>)
 800430e:	fba0 1202 	umull	r1, r2, r0, r2
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004314:	460a      	mov	r2, r1
 8004316:	62ba      	str	r2, [r7, #40]	; 0x28
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	4413      	add	r3, r2
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	2200      	movs	r2, #0
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	61fa      	str	r2, [r7, #28]
 8004326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800432a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800432e:	f7fc fcb3 	bl	8000c98 <__aeabi_uldivmod>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4613      	mov	r3, r2
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433a:	e053      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_RCC_GetSysClockFreq+0x180>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	2200      	movs	r2, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	617a      	str	r2, [r7, #20]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800434e:	f04f 0b00 	mov.w	fp, #0
 8004352:	4652      	mov	r2, sl
 8004354:	465b      	mov	r3, fp
 8004356:	f04f 0000 	mov.w	r0, #0
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	0159      	lsls	r1, r3, #5
 8004360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004364:	0150      	lsls	r0, r2, #5
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	ebb2 080a 	subs.w	r8, r2, sl
 800436e:	eb63 090b 	sbc.w	r9, r3, fp
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800437e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004382:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004386:	ebb2 0408 	subs.w	r4, r2, r8
 800438a:	eb63 0509 	sbc.w	r5, r3, r9
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	00eb      	lsls	r3, r5, #3
 8004398:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439c:	00e2      	lsls	r2, r4, #3
 800439e:	4614      	mov	r4, r2
 80043a0:	461d      	mov	r5, r3
 80043a2:	eb14 030a 	adds.w	r3, r4, sl
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	eb45 030b 	adc.w	r3, r5, fp
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ba:	4629      	mov	r1, r5
 80043bc:	028b      	lsls	r3, r1, #10
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c4:	4621      	mov	r1, r4
 80043c6:	028a      	lsls	r2, r1, #10
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	2200      	movs	r2, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	60fa      	str	r2, [r7, #12]
 80043d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d8:	f7fc fc5e 	bl	8000c98 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	3301      	adds	r3, #1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043fe:	e002      	b.n	8004406 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetSysClockFreq+0x184>)
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004408:	4618      	mov	r0, r3
 800440a:	3740      	adds	r7, #64	; 0x40
 800440c:	46bd      	mov	sp, r7
 800440e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	00f42400 	.word	0x00f42400
 800441c:	017d7840 	.word	0x017d7840

08004420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <HAL_RCC_GetHCLKFreq+0x14>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000b60 	.word	0x20000b60

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800443c:	f7ff fff0 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	0800a4d0 	.word	0x0800a4d0

08004460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004464:	f7ff ffdc 	bl	8004420 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0b5b      	lsrs	r3, r3, #13
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	0800a4d0 	.word	0x0800a4d0

08004488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e03f      	b.n	800451a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd ff60 	bl	8002374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f929 	bl	8004724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08a      	sub	sp, #40	; 0x28
 8004526:	af02      	add	r7, sp, #8
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	d17c      	bne.n	800463c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_UART_Transmit+0x2c>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e075      	b.n	800463e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UART_Transmit+0x3e>
 800455c:	2302      	movs	r3, #2
 800455e:	e06e      	b.n	800463e <HAL_UART_Transmit+0x11c>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2221      	movs	r2, #33	; 0x21
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004576:	f7fe f8bb 	bl	80026f0 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d108      	bne.n	80045a4 <HAL_UART_Transmit+0x82>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e003      	b.n	80045ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045b4:	e02a      	b.n	800460c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f840 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e036      	b.n	800463e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	3302      	adds	r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e007      	b.n	80045fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1cf      	bne.n	80045b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2140      	movs	r1, #64	; 0x40
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f810 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e006      	b.n	800463e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b090      	sub	sp, #64	; 0x40
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	e050      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d04c      	beq.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <UART_WaitOnFlagUntilTimeout+0x30>
 8004666:	f7fe f843 	bl	80026f0 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004672:	429a      	cmp	r2, r3
 8004674:	d241      	bcs.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004696:	637a      	str	r2, [r7, #52]	; 0x34
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ca:	623a      	str	r2, [r7, #32]
 80046cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	69f9      	ldr	r1, [r7, #28]
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e00f      	b.n	800471a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d09f      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3740      	adds	r7, #64	; 0x40
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004728:	b0c0      	sub	sp, #256	; 0x100
 800472a:	af00      	add	r7, sp, #0
 800472c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	68d9      	ldr	r1, [r3, #12]
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	ea40 0301 	orr.w	r3, r0, r1
 800474c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	431a      	orrs	r2, r3
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	431a      	orrs	r2, r3
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800477c:	f021 010c 	bic.w	r1, r1, #12
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800478a:	430b      	orrs	r3, r1
 800478c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	6999      	ldr	r1, [r3, #24]
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	ea40 0301 	orr.w	r3, r0, r1
 80047aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b8f      	ldr	r3, [pc, #572]	; (80049f0 <UART_SetConfig+0x2cc>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d005      	beq.n	80047c4 <UART_SetConfig+0xa0>
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b8d      	ldr	r3, [pc, #564]	; (80049f4 <UART_SetConfig+0x2d0>)
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d104      	bne.n	80047ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047c4:	f7ff fe4c 	bl	8004460 <HAL_RCC_GetPCLK2Freq>
 80047c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047cc:	e003      	b.n	80047d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ce:	f7ff fe33 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 80047d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e0:	f040 810c 	bne.w	80049fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e8:	2200      	movs	r2, #0
 80047ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	1891      	adds	r1, r2, r2
 80047fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80047fe:	415b      	adcs	r3, r3
 8004800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004806:	4621      	mov	r1, r4
 8004808:	eb12 0801 	adds.w	r8, r2, r1
 800480c:	4629      	mov	r1, r5
 800480e:	eb43 0901 	adc.w	r9, r3, r1
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800481e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004826:	4690      	mov	r8, r2
 8004828:	4699      	mov	r9, r3
 800482a:	4623      	mov	r3, r4
 800482c:	eb18 0303 	adds.w	r3, r8, r3
 8004830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004834:	462b      	mov	r3, r5
 8004836:	eb49 0303 	adc.w	r3, r9, r3
 800483a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800484a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800484e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004852:	460b      	mov	r3, r1
 8004854:	18db      	adds	r3, r3, r3
 8004856:	653b      	str	r3, [r7, #80]	; 0x50
 8004858:	4613      	mov	r3, r2
 800485a:	eb42 0303 	adc.w	r3, r2, r3
 800485e:	657b      	str	r3, [r7, #84]	; 0x54
 8004860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004868:	f7fc fa16 	bl	8000c98 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <UART_SetConfig+0x2d4>)
 8004872:	fba3 2302 	umull	r2, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	011c      	lsls	r4, r3, #4
 800487a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800487e:	2200      	movs	r2, #0
 8004880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004884:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800488c:	4642      	mov	r2, r8
 800488e:	464b      	mov	r3, r9
 8004890:	1891      	adds	r1, r2, r2
 8004892:	64b9      	str	r1, [r7, #72]	; 0x48
 8004894:	415b      	adcs	r3, r3
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800489c:	4641      	mov	r1, r8
 800489e:	eb12 0a01 	adds.w	sl, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb43 0b01 	adc.w	fp, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048bc:	4692      	mov	sl, r2
 80048be:	469b      	mov	fp, r3
 80048c0:	4643      	mov	r3, r8
 80048c2:	eb1a 0303 	adds.w	r3, sl, r3
 80048c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ca:	464b      	mov	r3, r9
 80048cc:	eb4b 0303 	adc.w	r3, fp, r3
 80048d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048e8:	460b      	mov	r3, r1
 80048ea:	18db      	adds	r3, r3, r3
 80048ec:	643b      	str	r3, [r7, #64]	; 0x40
 80048ee:	4613      	mov	r3, r2
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
 80048f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048fe:	f7fc f9cb 	bl	8000c98 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4611      	mov	r1, r2
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <UART_SetConfig+0x2d4>)
 800490a:	fba3 2301 	umull	r2, r3, r3, r1
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2264      	movs	r2, #100	; 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <UART_SetConfig+0x2d4>)
 8004920:	fba3 2302 	umull	r2, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800492c:	441c      	add	r4, r3
 800492e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004932:	2200      	movs	r2, #0
 8004934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004938:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800493c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004940:	4642      	mov	r2, r8
 8004942:	464b      	mov	r3, r9
 8004944:	1891      	adds	r1, r2, r2
 8004946:	63b9      	str	r1, [r7, #56]	; 0x38
 8004948:	415b      	adcs	r3, r3
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004950:	4641      	mov	r1, r8
 8004952:	1851      	adds	r1, r2, r1
 8004954:	6339      	str	r1, [r7, #48]	; 0x30
 8004956:	4649      	mov	r1, r9
 8004958:	414b      	adcs	r3, r1
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004968:	4659      	mov	r1, fp
 800496a:	00cb      	lsls	r3, r1, #3
 800496c:	4651      	mov	r1, sl
 800496e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004972:	4651      	mov	r1, sl
 8004974:	00ca      	lsls	r2, r1, #3
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	4603      	mov	r3, r0
 800497c:	4642      	mov	r2, r8
 800497e:	189b      	adds	r3, r3, r2
 8004980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004984:	464b      	mov	r3, r9
 8004986:	460a      	mov	r2, r1
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800499c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049a4:	460b      	mov	r3, r1
 80049a6:	18db      	adds	r3, r3, r3
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049aa:	4613      	mov	r3, r2
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049ba:	f7fc f96d 	bl	8000c98 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <UART_SetConfig+0x2d4>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <UART_SetConfig+0x2d4>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4422      	add	r2, r4
 80049ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049ec:	e105      	b.n	8004bfa <UART_SetConfig+0x4d6>
 80049ee:	bf00      	nop
 80049f0:	40011000 	.word	0x40011000
 80049f4:	40011400 	.word	0x40011400
 80049f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	1891      	adds	r1, r2, r2
 8004a14:	6239      	str	r1, [r7, #32]
 8004a16:	415b      	adcs	r3, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a1e:	4641      	mov	r1, r8
 8004a20:	1854      	adds	r4, r2, r1
 8004a22:	4649      	mov	r1, r9
 8004a24:	eb43 0501 	adc.w	r5, r3, r1
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	00eb      	lsls	r3, r5, #3
 8004a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a36:	00e2      	lsls	r2, r4, #3
 8004a38:	4614      	mov	r4, r2
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	4643      	mov	r3, r8
 8004a3e:	18e3      	adds	r3, r4, r3
 8004a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a44:	464b      	mov	r3, r9
 8004a46:	eb45 0303 	adc.w	r3, r5, r3
 8004a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	008b      	lsls	r3, r1, #2
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a74:	4621      	mov	r1, r4
 8004a76:	008a      	lsls	r2, r1, #2
 8004a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a7c:	f7fc f90c 	bl	8000c98 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011c      	lsls	r4, r3, #4
 8004a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	61b9      	str	r1, [r7, #24]
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	1851      	adds	r1, r2, r1
 8004ab4:	6139      	str	r1, [r7, #16]
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	414b      	adcs	r3, r1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	00cb      	lsls	r3, r1, #3
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	00ca      	lsls	r2, r1, #3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	4642      	mov	r2, r8
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	eb42 0303 	adc.w	r3, r2, r3
 8004aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004afa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b08:	4649      	mov	r1, r9
 8004b0a:	008b      	lsls	r3, r1, #2
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b12:	4641      	mov	r1, r8
 8004b14:	008a      	lsls	r2, r1, #2
 8004b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b1a:	f7fc f8bd 	bl	8000c98 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4b39      	ldr	r3, [pc, #228]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004b24:	fba3 1302 	umull	r1, r3, r3, r2
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	2164      	movs	r1, #100	; 0x64
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	3332      	adds	r3, #50	; 0x32
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b42:	441c      	add	r4, r3
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b62:	4641      	mov	r1, r8
 8004b64:	1851      	adds	r1, r2, r1
 8004b66:	6039      	str	r1, [r7, #0]
 8004b68:	4649      	mov	r1, r9
 8004b6a:	414b      	adcs	r3, r1
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	00cb      	lsls	r3, r1, #3
 8004b7e:	4651      	mov	r1, sl
 8004b80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b84:	4651      	mov	r1, sl
 8004b86:	00ca      	lsls	r2, r1, #3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4642      	mov	r2, r8
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba8:	667a      	str	r2, [r7, #100]	; 0x64
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	008b      	lsls	r3, r1, #2
 8004bba:	4641      	mov	r1, r8
 8004bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	008a      	lsls	r2, r1, #2
 8004bc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bc8:	f7fc f866 	bl	8000c98 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2164      	movs	r1, #100	; 0x64
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <UART_SetConfig+0x4e4>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4422      	add	r2, r4
 8004bf8:	609a      	str	r2, [r3, #8]
}
 8004bfa:	bf00      	nop
 8004bfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <__errno>:
 8004c0c:	4b01      	ldr	r3, [pc, #4]	; (8004c14 <__errno+0x8>)
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000b6c 	.word	0x20000b6c

08004c18 <__libc_init_array>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	4d0d      	ldr	r5, [pc, #52]	; (8004c50 <__libc_init_array+0x38>)
 8004c1c:	4c0d      	ldr	r4, [pc, #52]	; (8004c54 <__libc_init_array+0x3c>)
 8004c1e:	1b64      	subs	r4, r4, r5
 8004c20:	10a4      	asrs	r4, r4, #2
 8004c22:	2600      	movs	r6, #0
 8004c24:	42a6      	cmp	r6, r4
 8004c26:	d109      	bne.n	8004c3c <__libc_init_array+0x24>
 8004c28:	4d0b      	ldr	r5, [pc, #44]	; (8004c58 <__libc_init_array+0x40>)
 8004c2a:	4c0c      	ldr	r4, [pc, #48]	; (8004c5c <__libc_init_array+0x44>)
 8004c2c:	f005 fbde 	bl	800a3ec <_init>
 8004c30:	1b64      	subs	r4, r4, r5
 8004c32:	10a4      	asrs	r4, r4, #2
 8004c34:	2600      	movs	r6, #0
 8004c36:	42a6      	cmp	r6, r4
 8004c38:	d105      	bne.n	8004c46 <__libc_init_array+0x2e>
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c40:	4798      	blx	r3
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7ee      	b.n	8004c24 <__libc_init_array+0xc>
 8004c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4a:	4798      	blx	r3
 8004c4c:	3601      	adds	r6, #1
 8004c4e:	e7f2      	b.n	8004c36 <__libc_init_array+0x1e>
 8004c50:	0800a9b8 	.word	0x0800a9b8
 8004c54:	0800a9b8 	.word	0x0800a9b8
 8004c58:	0800a9b8 	.word	0x0800a9b8
 8004c5c:	0800a9bc 	.word	0x0800a9bc

08004c60 <memset>:
 8004c60:	4402      	add	r2, r0
 8004c62:	4603      	mov	r3, r0
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d100      	bne.n	8004c6a <memset+0xa>
 8004c68:	4770      	bx	lr
 8004c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6e:	e7f9      	b.n	8004c64 <memset+0x4>

08004c70 <__cvt>:
 8004c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	ec55 4b10 	vmov	r4, r5, d0
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	460e      	mov	r6, r1
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	462b      	mov	r3, r5
 8004c80:	bfbb      	ittet	lt
 8004c82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c86:	461d      	movlt	r5, r3
 8004c88:	2300      	movge	r3, #0
 8004c8a:	232d      	movlt	r3, #45	; 0x2d
 8004c8c:	700b      	strb	r3, [r1, #0]
 8004c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c94:	4691      	mov	r9, r2
 8004c96:	f023 0820 	bic.w	r8, r3, #32
 8004c9a:	bfbc      	itt	lt
 8004c9c:	4622      	movlt	r2, r4
 8004c9e:	4614      	movlt	r4, r2
 8004ca0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ca4:	d005      	beq.n	8004cb2 <__cvt+0x42>
 8004ca6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004caa:	d100      	bne.n	8004cae <__cvt+0x3e>
 8004cac:	3601      	adds	r6, #1
 8004cae:	2102      	movs	r1, #2
 8004cb0:	e000      	b.n	8004cb4 <__cvt+0x44>
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	ab03      	add	r3, sp, #12
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	ab02      	add	r3, sp, #8
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	ec45 4b10 	vmov	d0, r4, r5
 8004cc0:	4653      	mov	r3, sl
 8004cc2:	4632      	mov	r2, r6
 8004cc4:	f001 fde0 	bl	8006888 <_dtoa_r>
 8004cc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ccc:	4607      	mov	r7, r0
 8004cce:	d102      	bne.n	8004cd6 <__cvt+0x66>
 8004cd0:	f019 0f01 	tst.w	r9, #1
 8004cd4:	d022      	beq.n	8004d1c <__cvt+0xac>
 8004cd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cda:	eb07 0906 	add.w	r9, r7, r6
 8004cde:	d110      	bne.n	8004d02 <__cvt+0x92>
 8004ce0:	783b      	ldrb	r3, [r7, #0]
 8004ce2:	2b30      	cmp	r3, #48	; 0x30
 8004ce4:	d10a      	bne.n	8004cfc <__cvt+0x8c>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4620      	mov	r0, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7fb fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cf2:	b918      	cbnz	r0, 8004cfc <__cvt+0x8c>
 8004cf4:	f1c6 0601 	rsb	r6, r6, #1
 8004cf8:	f8ca 6000 	str.w	r6, [sl]
 8004cfc:	f8da 3000 	ldr.w	r3, [sl]
 8004d00:	4499      	add	r9, r3
 8004d02:	2200      	movs	r2, #0
 8004d04:	2300      	movs	r3, #0
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	f7fb fee5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d0e:	b108      	cbz	r0, 8004d14 <__cvt+0xa4>
 8004d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d14:	2230      	movs	r2, #48	; 0x30
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	454b      	cmp	r3, r9
 8004d1a:	d307      	bcc.n	8004d2c <__cvt+0xbc>
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d20:	1bdb      	subs	r3, r3, r7
 8004d22:	4638      	mov	r0, r7
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	b004      	add	sp, #16
 8004d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	9103      	str	r1, [sp, #12]
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e7f0      	b.n	8004d16 <__cvt+0xa6>

08004d34 <__exponent>:
 8004d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d36:	4603      	mov	r3, r0
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	bfb8      	it	lt
 8004d3c:	4249      	neglt	r1, r1
 8004d3e:	f803 2b02 	strb.w	r2, [r3], #2
 8004d42:	bfb4      	ite	lt
 8004d44:	222d      	movlt	r2, #45	; 0x2d
 8004d46:	222b      	movge	r2, #43	; 0x2b
 8004d48:	2909      	cmp	r1, #9
 8004d4a:	7042      	strb	r2, [r0, #1]
 8004d4c:	dd2a      	ble.n	8004da4 <__exponent+0x70>
 8004d4e:	f10d 0407 	add.w	r4, sp, #7
 8004d52:	46a4      	mov	ip, r4
 8004d54:	270a      	movs	r7, #10
 8004d56:	46a6      	mov	lr, r4
 8004d58:	460a      	mov	r2, r1
 8004d5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d5e:	fb07 1516 	mls	r5, r7, r6, r1
 8004d62:	3530      	adds	r5, #48	; 0x30
 8004d64:	2a63      	cmp	r2, #99	; 0x63
 8004d66:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d6e:	4631      	mov	r1, r6
 8004d70:	dcf1      	bgt.n	8004d56 <__exponent+0x22>
 8004d72:	3130      	adds	r1, #48	; 0x30
 8004d74:	f1ae 0502 	sub.w	r5, lr, #2
 8004d78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d7c:	1c44      	adds	r4, r0, #1
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4561      	cmp	r1, ip
 8004d82:	d30a      	bcc.n	8004d9a <__exponent+0x66>
 8004d84:	f10d 0209 	add.w	r2, sp, #9
 8004d88:	eba2 020e 	sub.w	r2, r2, lr
 8004d8c:	4565      	cmp	r5, ip
 8004d8e:	bf88      	it	hi
 8004d90:	2200      	movhi	r2, #0
 8004d92:	4413      	add	r3, r2
 8004d94:	1a18      	subs	r0, r3, r0
 8004d96:	b003      	add	sp, #12
 8004d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004da2:	e7ed      	b.n	8004d80 <__exponent+0x4c>
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	3130      	adds	r1, #48	; 0x30
 8004da8:	7083      	strb	r3, [r0, #2]
 8004daa:	70c1      	strb	r1, [r0, #3]
 8004dac:	1d03      	adds	r3, r0, #4
 8004dae:	e7f1      	b.n	8004d94 <__exponent+0x60>

08004db0 <_printf_float>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	ed2d 8b02 	vpush	{d8}
 8004db8:	b08d      	sub	sp, #52	; 0x34
 8004dba:	460c      	mov	r4, r1
 8004dbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	461f      	mov	r7, r3
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	f002 febd 	bl	8007b44 <_localeconv_r>
 8004dca:	f8d0 a000 	ldr.w	sl, [r0]
 8004dce:	4650      	mov	r0, sl
 8004dd0:	f7fb fa06 	bl	80001e0 <strlen>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	9305      	str	r3, [sp, #20]
 8004ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8004de0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004de4:	3307      	adds	r3, #7
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	f103 0208 	add.w	r2, r3, #8
 8004dee:	f8c8 2000 	str.w	r2, [r8]
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e02:	9307      	str	r3, [sp, #28]
 8004e04:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e08:	ee08 0a10 	vmov	s16, r0
 8004e0c:	4b9f      	ldr	r3, [pc, #636]	; (800508c <_printf_float+0x2dc>)
 8004e0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e12:	f04f 32ff 	mov.w	r2, #4294967295
 8004e16:	f7fb fe91 	bl	8000b3c <__aeabi_dcmpun>
 8004e1a:	bb88      	cbnz	r0, 8004e80 <_printf_float+0xd0>
 8004e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e20:	4b9a      	ldr	r3, [pc, #616]	; (800508c <_printf_float+0x2dc>)
 8004e22:	f04f 32ff 	mov.w	r2, #4294967295
 8004e26:	f7fb fe6b 	bl	8000b00 <__aeabi_dcmple>
 8004e2a:	bb48      	cbnz	r0, 8004e80 <_printf_float+0xd0>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4640      	mov	r0, r8
 8004e32:	4649      	mov	r1, r9
 8004e34:	f7fb fe5a 	bl	8000aec <__aeabi_dcmplt>
 8004e38:	b110      	cbz	r0, 8004e40 <_printf_float+0x90>
 8004e3a:	232d      	movs	r3, #45	; 0x2d
 8004e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e40:	4b93      	ldr	r3, [pc, #588]	; (8005090 <_printf_float+0x2e0>)
 8004e42:	4894      	ldr	r0, [pc, #592]	; (8005094 <_printf_float+0x2e4>)
 8004e44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e48:	bf94      	ite	ls
 8004e4a:	4698      	movls	r8, r3
 8004e4c:	4680      	movhi	r8, r0
 8004e4e:	2303      	movs	r3, #3
 8004e50:	6123      	str	r3, [r4, #16]
 8004e52:	9b05      	ldr	r3, [sp, #20]
 8004e54:	f023 0204 	bic.w	r2, r3, #4
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	f04f 0900 	mov.w	r9, #0
 8004e5e:	9700      	str	r7, [sp, #0]
 8004e60:	4633      	mov	r3, r6
 8004e62:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e64:	4621      	mov	r1, r4
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f9d8 	bl	800521c <_printf_common>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	f040 8090 	bne.w	8004f92 <_printf_float+0x1e2>
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	b00d      	add	sp, #52	; 0x34
 8004e78:	ecbd 8b02 	vpop	{d8}
 8004e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	4649      	mov	r1, r9
 8004e88:	f7fb fe58 	bl	8000b3c <__aeabi_dcmpun>
 8004e8c:	b140      	cbz	r0, 8004ea0 <_printf_float+0xf0>
 8004e8e:	464b      	mov	r3, r9
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfbc      	itt	lt
 8004e94:	232d      	movlt	r3, #45	; 0x2d
 8004e96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e9a:	487f      	ldr	r0, [pc, #508]	; (8005098 <_printf_float+0x2e8>)
 8004e9c:	4b7f      	ldr	r3, [pc, #508]	; (800509c <_printf_float+0x2ec>)
 8004e9e:	e7d1      	b.n	8004e44 <_printf_float+0x94>
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ea6:	9206      	str	r2, [sp, #24]
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	d13f      	bne.n	8004f2c <_printf_float+0x17c>
 8004eac:	2306      	movs	r3, #6
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	9b05      	ldr	r3, [sp, #20]
 8004eb2:	6861      	ldr	r1, [r4, #4]
 8004eb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	ab0a      	add	r3, sp, #40	; 0x28
 8004ebe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ec2:	ab09      	add	r3, sp, #36	; 0x24
 8004ec4:	ec49 8b10 	vmov	d0, r8, r9
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6022      	str	r2, [r4, #0]
 8004ecc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7ff fecd 	bl	8004c70 <__cvt>
 8004ed6:	9b06      	ldr	r3, [sp, #24]
 8004ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eda:	2b47      	cmp	r3, #71	; 0x47
 8004edc:	4680      	mov	r8, r0
 8004ede:	d108      	bne.n	8004ef2 <_printf_float+0x142>
 8004ee0:	1cc8      	adds	r0, r1, #3
 8004ee2:	db02      	blt.n	8004eea <_printf_float+0x13a>
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	4299      	cmp	r1, r3
 8004ee8:	dd41      	ble.n	8004f6e <_printf_float+0x1be>
 8004eea:	f1ab 0b02 	sub.w	fp, fp, #2
 8004eee:	fa5f fb8b 	uxtb.w	fp, fp
 8004ef2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ef6:	d820      	bhi.n	8004f3a <_printf_float+0x18a>
 8004ef8:	3901      	subs	r1, #1
 8004efa:	465a      	mov	r2, fp
 8004efc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f00:	9109      	str	r1, [sp, #36]	; 0x24
 8004f02:	f7ff ff17 	bl	8004d34 <__exponent>
 8004f06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f08:	1813      	adds	r3, r2, r0
 8004f0a:	2a01      	cmp	r2, #1
 8004f0c:	4681      	mov	r9, r0
 8004f0e:	6123      	str	r3, [r4, #16]
 8004f10:	dc02      	bgt.n	8004f18 <_printf_float+0x168>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	07d2      	lsls	r2, r2, #31
 8004f16:	d501      	bpl.n	8004f1c <_printf_float+0x16c>
 8004f18:	3301      	adds	r3, #1
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d09c      	beq.n	8004e5e <_printf_float+0xae>
 8004f24:	232d      	movs	r3, #45	; 0x2d
 8004f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f2a:	e798      	b.n	8004e5e <_printf_float+0xae>
 8004f2c:	9a06      	ldr	r2, [sp, #24]
 8004f2e:	2a47      	cmp	r2, #71	; 0x47
 8004f30:	d1be      	bne.n	8004eb0 <_printf_float+0x100>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1bc      	bne.n	8004eb0 <_printf_float+0x100>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e7b9      	b.n	8004eae <_printf_float+0xfe>
 8004f3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f3e:	d118      	bne.n	8004f72 <_printf_float+0x1c2>
 8004f40:	2900      	cmp	r1, #0
 8004f42:	6863      	ldr	r3, [r4, #4]
 8004f44:	dd0b      	ble.n	8004f5e <_printf_float+0x1ae>
 8004f46:	6121      	str	r1, [r4, #16]
 8004f48:	b913      	cbnz	r3, 8004f50 <_printf_float+0x1a0>
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	07d0      	lsls	r0, r2, #31
 8004f4e:	d502      	bpl.n	8004f56 <_printf_float+0x1a6>
 8004f50:	3301      	adds	r3, #1
 8004f52:	440b      	add	r3, r1
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f58:	f04f 0900 	mov.w	r9, #0
 8004f5c:	e7de      	b.n	8004f1c <_printf_float+0x16c>
 8004f5e:	b913      	cbnz	r3, 8004f66 <_printf_float+0x1b6>
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	07d2      	lsls	r2, r2, #31
 8004f64:	d501      	bpl.n	8004f6a <_printf_float+0x1ba>
 8004f66:	3302      	adds	r3, #2
 8004f68:	e7f4      	b.n	8004f54 <_printf_float+0x1a4>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7f2      	b.n	8004f54 <_printf_float+0x1a4>
 8004f6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f74:	4299      	cmp	r1, r3
 8004f76:	db05      	blt.n	8004f84 <_printf_float+0x1d4>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	6121      	str	r1, [r4, #16]
 8004f7c:	07d8      	lsls	r0, r3, #31
 8004f7e:	d5ea      	bpl.n	8004f56 <_printf_float+0x1a6>
 8004f80:	1c4b      	adds	r3, r1, #1
 8004f82:	e7e7      	b.n	8004f54 <_printf_float+0x1a4>
 8004f84:	2900      	cmp	r1, #0
 8004f86:	bfd4      	ite	le
 8004f88:	f1c1 0202 	rsble	r2, r1, #2
 8004f8c:	2201      	movgt	r2, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	e7e0      	b.n	8004f54 <_printf_float+0x1a4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	055a      	lsls	r2, r3, #21
 8004f96:	d407      	bmi.n	8004fa8 <_printf_float+0x1f8>
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	4642      	mov	r2, r8
 8004f9c:	4631      	mov	r1, r6
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d12c      	bne.n	8005000 <_printf_float+0x250>
 8004fa6:	e764      	b.n	8004e72 <_printf_float+0xc2>
 8004fa8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fac:	f240 80e0 	bls.w	8005170 <_printf_float+0x3c0>
 8004fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f7fb fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d034      	beq.n	800502a <_printf_float+0x27a>
 8004fc0:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <_printf_float+0x2f0>)
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b8      	blx	r7
 8004fca:	3001      	adds	r0, #1
 8004fcc:	f43f af51 	beq.w	8004e72 <_printf_float+0xc2>
 8004fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	db02      	blt.n	8004fde <_printf_float+0x22e>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	07d8      	lsls	r0, r3, #31
 8004fdc:	d510      	bpl.n	8005000 <_printf_float+0x250>
 8004fde:	ee18 3a10 	vmov	r3, s16
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f af41 	beq.w	8004e72 <_printf_float+0xc2>
 8004ff0:	f04f 0800 	mov.w	r8, #0
 8004ff4:	f104 091a 	add.w	r9, r4, #26
 8004ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	4543      	cmp	r3, r8
 8004ffe:	dc09      	bgt.n	8005014 <_printf_float+0x264>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	079b      	lsls	r3, r3, #30
 8005004:	f100 8105 	bmi.w	8005212 <_printf_float+0x462>
 8005008:	68e0      	ldr	r0, [r4, #12]
 800500a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800500c:	4298      	cmp	r0, r3
 800500e:	bfb8      	it	lt
 8005010:	4618      	movlt	r0, r3
 8005012:	e730      	b.n	8004e76 <_printf_float+0xc6>
 8005014:	2301      	movs	r3, #1
 8005016:	464a      	mov	r2, r9
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f af27 	beq.w	8004e72 <_printf_float+0xc2>
 8005024:	f108 0801 	add.w	r8, r8, #1
 8005028:	e7e6      	b.n	8004ff8 <_printf_float+0x248>
 800502a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	dc39      	bgt.n	80050a4 <_printf_float+0x2f4>
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <_printf_float+0x2f0>)
 8005032:	2301      	movs	r3, #1
 8005034:	4631      	mov	r1, r6
 8005036:	4628      	mov	r0, r5
 8005038:	47b8      	blx	r7
 800503a:	3001      	adds	r0, #1
 800503c:	f43f af19 	beq.w	8004e72 <_printf_float+0xc2>
 8005040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005044:	4313      	orrs	r3, r2
 8005046:	d102      	bne.n	800504e <_printf_float+0x29e>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	07d9      	lsls	r1, r3, #31
 800504c:	d5d8      	bpl.n	8005000 <_printf_float+0x250>
 800504e:	ee18 3a10 	vmov	r3, s16
 8005052:	4652      	mov	r2, sl
 8005054:	4631      	mov	r1, r6
 8005056:	4628      	mov	r0, r5
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	f43f af09 	beq.w	8004e72 <_printf_float+0xc2>
 8005060:	f04f 0900 	mov.w	r9, #0
 8005064:	f104 0a1a 	add.w	sl, r4, #26
 8005068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506a:	425b      	negs	r3, r3
 800506c:	454b      	cmp	r3, r9
 800506e:	dc01      	bgt.n	8005074 <_printf_float+0x2c4>
 8005070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005072:	e792      	b.n	8004f9a <_printf_float+0x1ea>
 8005074:	2301      	movs	r3, #1
 8005076:	4652      	mov	r2, sl
 8005078:	4631      	mov	r1, r6
 800507a:	4628      	mov	r0, r5
 800507c:	47b8      	blx	r7
 800507e:	3001      	adds	r0, #1
 8005080:	f43f aef7 	beq.w	8004e72 <_printf_float+0xc2>
 8005084:	f109 0901 	add.w	r9, r9, #1
 8005088:	e7ee      	b.n	8005068 <_printf_float+0x2b8>
 800508a:	bf00      	nop
 800508c:	7fefffff 	.word	0x7fefffff
 8005090:	0800a4dc 	.word	0x0800a4dc
 8005094:	0800a4e0 	.word	0x0800a4e0
 8005098:	0800a4e8 	.word	0x0800a4e8
 800509c:	0800a4e4 	.word	0x0800a4e4
 80050a0:	0800a4ec 	.word	0x0800a4ec
 80050a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050a8:	429a      	cmp	r2, r3
 80050aa:	bfa8      	it	ge
 80050ac:	461a      	movge	r2, r3
 80050ae:	2a00      	cmp	r2, #0
 80050b0:	4691      	mov	r9, r2
 80050b2:	dc37      	bgt.n	8005124 <_printf_float+0x374>
 80050b4:	f04f 0b00 	mov.w	fp, #0
 80050b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050bc:	f104 021a 	add.w	r2, r4, #26
 80050c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	eba3 0309 	sub.w	r3, r3, r9
 80050c8:	455b      	cmp	r3, fp
 80050ca:	dc33      	bgt.n	8005134 <_printf_float+0x384>
 80050cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050d0:	429a      	cmp	r2, r3
 80050d2:	db3b      	blt.n	800514c <_printf_float+0x39c>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	07da      	lsls	r2, r3, #31
 80050d8:	d438      	bmi.n	800514c <_printf_float+0x39c>
 80050da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050dc:	9a05      	ldr	r2, [sp, #20]
 80050de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050e0:	1a9a      	subs	r2, r3, r2
 80050e2:	eba3 0901 	sub.w	r9, r3, r1
 80050e6:	4591      	cmp	r9, r2
 80050e8:	bfa8      	it	ge
 80050ea:	4691      	movge	r9, r2
 80050ec:	f1b9 0f00 	cmp.w	r9, #0
 80050f0:	dc35      	bgt.n	800515e <_printf_float+0x3ae>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050fa:	f104 0a1a 	add.w	sl, r4, #26
 80050fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	eba3 0309 	sub.w	r3, r3, r9
 8005108:	4543      	cmp	r3, r8
 800510a:	f77f af79 	ble.w	8005000 <_printf_float+0x250>
 800510e:	2301      	movs	r3, #1
 8005110:	4652      	mov	r2, sl
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f aeaa 	beq.w	8004e72 <_printf_float+0xc2>
 800511e:	f108 0801 	add.w	r8, r8, #1
 8005122:	e7ec      	b.n	80050fe <_printf_float+0x34e>
 8005124:	4613      	mov	r3, r2
 8005126:	4631      	mov	r1, r6
 8005128:	4642      	mov	r2, r8
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	d1c0      	bne.n	80050b4 <_printf_float+0x304>
 8005132:	e69e      	b.n	8004e72 <_printf_float+0xc2>
 8005134:	2301      	movs	r3, #1
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	9205      	str	r2, [sp, #20]
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f ae97 	beq.w	8004e72 <_printf_float+0xc2>
 8005144:	9a05      	ldr	r2, [sp, #20]
 8005146:	f10b 0b01 	add.w	fp, fp, #1
 800514a:	e7b9      	b.n	80050c0 <_printf_float+0x310>
 800514c:	ee18 3a10 	vmov	r3, s16
 8005150:	4652      	mov	r2, sl
 8005152:	4631      	mov	r1, r6
 8005154:	4628      	mov	r0, r5
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	d1be      	bne.n	80050da <_printf_float+0x32a>
 800515c:	e689      	b.n	8004e72 <_printf_float+0xc2>
 800515e:	9a05      	ldr	r2, [sp, #20]
 8005160:	464b      	mov	r3, r9
 8005162:	4442      	add	r2, r8
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	d1c1      	bne.n	80050f2 <_printf_float+0x342>
 800516e:	e680      	b.n	8004e72 <_printf_float+0xc2>
 8005170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005172:	2a01      	cmp	r2, #1
 8005174:	dc01      	bgt.n	800517a <_printf_float+0x3ca>
 8005176:	07db      	lsls	r3, r3, #31
 8005178:	d538      	bpl.n	80051ec <_printf_float+0x43c>
 800517a:	2301      	movs	r3, #1
 800517c:	4642      	mov	r2, r8
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	f43f ae74 	beq.w	8004e72 <_printf_float+0xc2>
 800518a:	ee18 3a10 	vmov	r3, s16
 800518e:	4652      	mov	r2, sl
 8005190:	4631      	mov	r1, r6
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	f43f ae6b 	beq.w	8004e72 <_printf_float+0xc2>
 800519c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051a0:	2200      	movs	r2, #0
 80051a2:	2300      	movs	r3, #0
 80051a4:	f7fb fc98 	bl	8000ad8 <__aeabi_dcmpeq>
 80051a8:	b9d8      	cbnz	r0, 80051e2 <_printf_float+0x432>
 80051aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ac:	f108 0201 	add.w	r2, r8, #1
 80051b0:	3b01      	subs	r3, #1
 80051b2:	4631      	mov	r1, r6
 80051b4:	4628      	mov	r0, r5
 80051b6:	47b8      	blx	r7
 80051b8:	3001      	adds	r0, #1
 80051ba:	d10e      	bne.n	80051da <_printf_float+0x42a>
 80051bc:	e659      	b.n	8004e72 <_printf_float+0xc2>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b8      	blx	r7
 80051c8:	3001      	adds	r0, #1
 80051ca:	f43f ae52 	beq.w	8004e72 <_printf_float+0xc2>
 80051ce:	f108 0801 	add.w	r8, r8, #1
 80051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	4543      	cmp	r3, r8
 80051d8:	dcf1      	bgt.n	80051be <_printf_float+0x40e>
 80051da:	464b      	mov	r3, r9
 80051dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051e0:	e6dc      	b.n	8004f9c <_printf_float+0x1ec>
 80051e2:	f04f 0800 	mov.w	r8, #0
 80051e6:	f104 0a1a 	add.w	sl, r4, #26
 80051ea:	e7f2      	b.n	80051d2 <_printf_float+0x422>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4642      	mov	r2, r8
 80051f0:	e7df      	b.n	80051b2 <_printf_float+0x402>
 80051f2:	2301      	movs	r3, #1
 80051f4:	464a      	mov	r2, r9
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f ae38 	beq.w	8004e72 <_printf_float+0xc2>
 8005202:	f108 0801 	add.w	r8, r8, #1
 8005206:	68e3      	ldr	r3, [r4, #12]
 8005208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800520a:	1a5b      	subs	r3, r3, r1
 800520c:	4543      	cmp	r3, r8
 800520e:	dcf0      	bgt.n	80051f2 <_printf_float+0x442>
 8005210:	e6fa      	b.n	8005008 <_printf_float+0x258>
 8005212:	f04f 0800 	mov.w	r8, #0
 8005216:	f104 0919 	add.w	r9, r4, #25
 800521a:	e7f4      	b.n	8005206 <_printf_float+0x456>

0800521c <_printf_common>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	4616      	mov	r6, r2
 8005222:	4699      	mov	r9, r3
 8005224:	688a      	ldr	r2, [r1, #8]
 8005226:	690b      	ldr	r3, [r1, #16]
 8005228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800522c:	4293      	cmp	r3, r2
 800522e:	bfb8      	it	lt
 8005230:	4613      	movlt	r3, r2
 8005232:	6033      	str	r3, [r6, #0]
 8005234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005238:	4607      	mov	r7, r0
 800523a:	460c      	mov	r4, r1
 800523c:	b10a      	cbz	r2, 8005242 <_printf_common+0x26>
 800523e:	3301      	adds	r3, #1
 8005240:	6033      	str	r3, [r6, #0]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	0699      	lsls	r1, r3, #26
 8005246:	bf42      	ittt	mi
 8005248:	6833      	ldrmi	r3, [r6, #0]
 800524a:	3302      	addmi	r3, #2
 800524c:	6033      	strmi	r3, [r6, #0]
 800524e:	6825      	ldr	r5, [r4, #0]
 8005250:	f015 0506 	ands.w	r5, r5, #6
 8005254:	d106      	bne.n	8005264 <_printf_common+0x48>
 8005256:	f104 0a19 	add.w	sl, r4, #25
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	42ab      	cmp	r3, r5
 8005262:	dc26      	bgt.n	80052b2 <_printf_common+0x96>
 8005264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005268:	1e13      	subs	r3, r2, #0
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	bf18      	it	ne
 800526e:	2301      	movne	r3, #1
 8005270:	0692      	lsls	r2, r2, #26
 8005272:	d42b      	bmi.n	80052cc <_printf_common+0xb0>
 8005274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005278:	4649      	mov	r1, r9
 800527a:	4638      	mov	r0, r7
 800527c:	47c0      	blx	r8
 800527e:	3001      	adds	r0, #1
 8005280:	d01e      	beq.n	80052c0 <_printf_common+0xa4>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	68e5      	ldr	r5, [r4, #12]
 8005286:	6832      	ldr	r2, [r6, #0]
 8005288:	f003 0306 	and.w	r3, r3, #6
 800528c:	2b04      	cmp	r3, #4
 800528e:	bf08      	it	eq
 8005290:	1aad      	subeq	r5, r5, r2
 8005292:	68a3      	ldr	r3, [r4, #8]
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	bf0c      	ite	eq
 8005298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800529c:	2500      	movne	r5, #0
 800529e:	4293      	cmp	r3, r2
 80052a0:	bfc4      	itt	gt
 80052a2:	1a9b      	subgt	r3, r3, r2
 80052a4:	18ed      	addgt	r5, r5, r3
 80052a6:	2600      	movs	r6, #0
 80052a8:	341a      	adds	r4, #26
 80052aa:	42b5      	cmp	r5, r6
 80052ac:	d11a      	bne.n	80052e4 <_printf_common+0xc8>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e008      	b.n	80052c4 <_printf_common+0xa8>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4652      	mov	r2, sl
 80052b6:	4649      	mov	r1, r9
 80052b8:	4638      	mov	r0, r7
 80052ba:	47c0      	blx	r8
 80052bc:	3001      	adds	r0, #1
 80052be:	d103      	bne.n	80052c8 <_printf_common+0xac>
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c8:	3501      	adds	r5, #1
 80052ca:	e7c6      	b.n	800525a <_printf_common+0x3e>
 80052cc:	18e1      	adds	r1, r4, r3
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	2030      	movs	r0, #48	; 0x30
 80052d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d6:	4422      	add	r2, r4
 80052d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052e0:	3302      	adds	r3, #2
 80052e2:	e7c7      	b.n	8005274 <_printf_common+0x58>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4622      	mov	r2, r4
 80052e8:	4649      	mov	r1, r9
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c0      	blx	r8
 80052ee:	3001      	adds	r0, #1
 80052f0:	d0e6      	beq.n	80052c0 <_printf_common+0xa4>
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7d9      	b.n	80052aa <_printf_common+0x8e>
	...

080052f8 <_printf_i>:
 80052f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	7e0f      	ldrb	r7, [r1, #24]
 80052fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005300:	2f78      	cmp	r7, #120	; 0x78
 8005302:	4691      	mov	r9, r2
 8005304:	4680      	mov	r8, r0
 8005306:	460c      	mov	r4, r1
 8005308:	469a      	mov	sl, r3
 800530a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800530e:	d807      	bhi.n	8005320 <_printf_i+0x28>
 8005310:	2f62      	cmp	r7, #98	; 0x62
 8005312:	d80a      	bhi.n	800532a <_printf_i+0x32>
 8005314:	2f00      	cmp	r7, #0
 8005316:	f000 80d8 	beq.w	80054ca <_printf_i+0x1d2>
 800531a:	2f58      	cmp	r7, #88	; 0x58
 800531c:	f000 80a3 	beq.w	8005466 <_printf_i+0x16e>
 8005320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005328:	e03a      	b.n	80053a0 <_printf_i+0xa8>
 800532a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800532e:	2b15      	cmp	r3, #21
 8005330:	d8f6      	bhi.n	8005320 <_printf_i+0x28>
 8005332:	a101      	add	r1, pc, #4	; (adr r1, 8005338 <_printf_i+0x40>)
 8005334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005338:	08005391 	.word	0x08005391
 800533c:	080053a5 	.word	0x080053a5
 8005340:	08005321 	.word	0x08005321
 8005344:	08005321 	.word	0x08005321
 8005348:	08005321 	.word	0x08005321
 800534c:	08005321 	.word	0x08005321
 8005350:	080053a5 	.word	0x080053a5
 8005354:	08005321 	.word	0x08005321
 8005358:	08005321 	.word	0x08005321
 800535c:	08005321 	.word	0x08005321
 8005360:	08005321 	.word	0x08005321
 8005364:	080054b1 	.word	0x080054b1
 8005368:	080053d5 	.word	0x080053d5
 800536c:	08005493 	.word	0x08005493
 8005370:	08005321 	.word	0x08005321
 8005374:	08005321 	.word	0x08005321
 8005378:	080054d3 	.word	0x080054d3
 800537c:	08005321 	.word	0x08005321
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005321 	.word	0x08005321
 8005388:	08005321 	.word	0x08005321
 800538c:	0800549b 	.word	0x0800549b
 8005390:	682b      	ldr	r3, [r5, #0]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	602a      	str	r2, [r5, #0]
 8005398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800539c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0a3      	b.n	80054ec <_printf_i+0x1f4>
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	6829      	ldr	r1, [r5, #0]
 80053a8:	0606      	lsls	r6, r0, #24
 80053aa:	f101 0304 	add.w	r3, r1, #4
 80053ae:	d50a      	bpl.n	80053c6 <_printf_i+0xce>
 80053b0:	680e      	ldr	r6, [r1, #0]
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	2e00      	cmp	r6, #0
 80053b6:	da03      	bge.n	80053c0 <_printf_i+0xc8>
 80053b8:	232d      	movs	r3, #45	; 0x2d
 80053ba:	4276      	negs	r6, r6
 80053bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c0:	485e      	ldr	r0, [pc, #376]	; (800553c <_printf_i+0x244>)
 80053c2:	230a      	movs	r3, #10
 80053c4:	e019      	b.n	80053fa <_printf_i+0x102>
 80053c6:	680e      	ldr	r6, [r1, #0]
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053ce:	bf18      	it	ne
 80053d0:	b236      	sxthne	r6, r6
 80053d2:	e7ef      	b.n	80053b4 <_printf_i+0xbc>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	1d19      	adds	r1, r3, #4
 80053da:	6029      	str	r1, [r5, #0]
 80053dc:	0601      	lsls	r1, r0, #24
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0xec>
 80053e0:	681e      	ldr	r6, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0xf2>
 80053e4:	0646      	lsls	r6, r0, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0xe8>
 80053e8:	881e      	ldrh	r6, [r3, #0]
 80053ea:	4854      	ldr	r0, [pc, #336]	; (800553c <_printf_i+0x244>)
 80053ec:	2f6f      	cmp	r7, #111	; 0x6f
 80053ee:	bf0c      	ite	eq
 80053f0:	2308      	moveq	r3, #8
 80053f2:	230a      	movne	r3, #10
 80053f4:	2100      	movs	r1, #0
 80053f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053fa:	6865      	ldr	r5, [r4, #4]
 80053fc:	60a5      	str	r5, [r4, #8]
 80053fe:	2d00      	cmp	r5, #0
 8005400:	bfa2      	ittt	ge
 8005402:	6821      	ldrge	r1, [r4, #0]
 8005404:	f021 0104 	bicge.w	r1, r1, #4
 8005408:	6021      	strge	r1, [r4, #0]
 800540a:	b90e      	cbnz	r6, 8005410 <_printf_i+0x118>
 800540c:	2d00      	cmp	r5, #0
 800540e:	d04d      	beq.n	80054ac <_printf_i+0x1b4>
 8005410:	4615      	mov	r5, r2
 8005412:	fbb6 f1f3 	udiv	r1, r6, r3
 8005416:	fb03 6711 	mls	r7, r3, r1, r6
 800541a:	5dc7      	ldrb	r7, [r0, r7]
 800541c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005420:	4637      	mov	r7, r6
 8005422:	42bb      	cmp	r3, r7
 8005424:	460e      	mov	r6, r1
 8005426:	d9f4      	bls.n	8005412 <_printf_i+0x11a>
 8005428:	2b08      	cmp	r3, #8
 800542a:	d10b      	bne.n	8005444 <_printf_i+0x14c>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	07de      	lsls	r6, r3, #31
 8005430:	d508      	bpl.n	8005444 <_printf_i+0x14c>
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	6861      	ldr	r1, [r4, #4]
 8005436:	4299      	cmp	r1, r3
 8005438:	bfde      	ittt	le
 800543a:	2330      	movle	r3, #48	; 0x30
 800543c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005440:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005444:	1b52      	subs	r2, r2, r5
 8005446:	6122      	str	r2, [r4, #16]
 8005448:	f8cd a000 	str.w	sl, [sp]
 800544c:	464b      	mov	r3, r9
 800544e:	aa03      	add	r2, sp, #12
 8005450:	4621      	mov	r1, r4
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff fee2 	bl	800521c <_printf_common>
 8005458:	3001      	adds	r0, #1
 800545a:	d14c      	bne.n	80054f6 <_printf_i+0x1fe>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	b004      	add	sp, #16
 8005462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005466:	4835      	ldr	r0, [pc, #212]	; (800553c <_printf_i+0x244>)
 8005468:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800546c:	6829      	ldr	r1, [r5, #0]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	f851 6b04 	ldr.w	r6, [r1], #4
 8005474:	6029      	str	r1, [r5, #0]
 8005476:	061d      	lsls	r5, r3, #24
 8005478:	d514      	bpl.n	80054a4 <_printf_i+0x1ac>
 800547a:	07df      	lsls	r7, r3, #31
 800547c:	bf44      	itt	mi
 800547e:	f043 0320 	orrmi.w	r3, r3, #32
 8005482:	6023      	strmi	r3, [r4, #0]
 8005484:	b91e      	cbnz	r6, 800548e <_printf_i+0x196>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f023 0320 	bic.w	r3, r3, #32
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2310      	movs	r3, #16
 8005490:	e7b0      	b.n	80053f4 <_printf_i+0xfc>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f043 0320 	orr.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	2378      	movs	r3, #120	; 0x78
 800549c:	4828      	ldr	r0, [pc, #160]	; (8005540 <_printf_i+0x248>)
 800549e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054a2:	e7e3      	b.n	800546c <_printf_i+0x174>
 80054a4:	0659      	lsls	r1, r3, #25
 80054a6:	bf48      	it	mi
 80054a8:	b2b6      	uxthmi	r6, r6
 80054aa:	e7e6      	b.n	800547a <_printf_i+0x182>
 80054ac:	4615      	mov	r5, r2
 80054ae:	e7bb      	b.n	8005428 <_printf_i+0x130>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	6826      	ldr	r6, [r4, #0]
 80054b4:	6961      	ldr	r1, [r4, #20]
 80054b6:	1d18      	adds	r0, r3, #4
 80054b8:	6028      	str	r0, [r5, #0]
 80054ba:	0635      	lsls	r5, r6, #24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0x1cc>
 80054c0:	6019      	str	r1, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_printf_i+0x1d2>
 80054c4:	0670      	lsls	r0, r6, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0x1c8>
 80054c8:	8019      	strh	r1, [r3, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	4615      	mov	r5, r2
 80054d0:	e7ba      	b.n	8005448 <_printf_i+0x150>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	602a      	str	r2, [r5, #0]
 80054d8:	681d      	ldr	r5, [r3, #0]
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	2100      	movs	r1, #0
 80054de:	4628      	mov	r0, r5
 80054e0:	f7fa fe86 	bl	80001f0 <memchr>
 80054e4:	b108      	cbz	r0, 80054ea <_printf_i+0x1f2>
 80054e6:	1b40      	subs	r0, r0, r5
 80054e8:	6060      	str	r0, [r4, #4]
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	2300      	movs	r3, #0
 80054f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f4:	e7a8      	b.n	8005448 <_printf_i+0x150>
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	462a      	mov	r2, r5
 80054fa:	4649      	mov	r1, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	47d0      	blx	sl
 8005500:	3001      	adds	r0, #1
 8005502:	d0ab      	beq.n	800545c <_printf_i+0x164>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	079b      	lsls	r3, r3, #30
 8005508:	d413      	bmi.n	8005532 <_printf_i+0x23a>
 800550a:	68e0      	ldr	r0, [r4, #12]
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	4298      	cmp	r0, r3
 8005510:	bfb8      	it	lt
 8005512:	4618      	movlt	r0, r3
 8005514:	e7a4      	b.n	8005460 <_printf_i+0x168>
 8005516:	2301      	movs	r3, #1
 8005518:	4632      	mov	r2, r6
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	47d0      	blx	sl
 8005520:	3001      	adds	r0, #1
 8005522:	d09b      	beq.n	800545c <_printf_i+0x164>
 8005524:	3501      	adds	r5, #1
 8005526:	68e3      	ldr	r3, [r4, #12]
 8005528:	9903      	ldr	r1, [sp, #12]
 800552a:	1a5b      	subs	r3, r3, r1
 800552c:	42ab      	cmp	r3, r5
 800552e:	dcf2      	bgt.n	8005516 <_printf_i+0x21e>
 8005530:	e7eb      	b.n	800550a <_printf_i+0x212>
 8005532:	2500      	movs	r5, #0
 8005534:	f104 0619 	add.w	r6, r4, #25
 8005538:	e7f5      	b.n	8005526 <_printf_i+0x22e>
 800553a:	bf00      	nop
 800553c:	0800a4ee 	.word	0x0800a4ee
 8005540:	0800a4ff 	.word	0x0800a4ff

08005544 <_scanf_float>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	b087      	sub	sp, #28
 800554a:	4617      	mov	r7, r2
 800554c:	9303      	str	r3, [sp, #12]
 800554e:	688b      	ldr	r3, [r1, #8]
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005556:	bf83      	ittte	hi
 8005558:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800555c:	195b      	addhi	r3, r3, r5
 800555e:	9302      	strhi	r3, [sp, #8]
 8005560:	2300      	movls	r3, #0
 8005562:	bf86      	itte	hi
 8005564:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005568:	608b      	strhi	r3, [r1, #8]
 800556a:	9302      	strls	r3, [sp, #8]
 800556c:	680b      	ldr	r3, [r1, #0]
 800556e:	468b      	mov	fp, r1
 8005570:	2500      	movs	r5, #0
 8005572:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005576:	f84b 3b1c 	str.w	r3, [fp], #28
 800557a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800557e:	4680      	mov	r8, r0
 8005580:	460c      	mov	r4, r1
 8005582:	465e      	mov	r6, fp
 8005584:	46aa      	mov	sl, r5
 8005586:	46a9      	mov	r9, r5
 8005588:	9501      	str	r5, [sp, #4]
 800558a:	68a2      	ldr	r2, [r4, #8]
 800558c:	b152      	cbz	r2, 80055a4 <_scanf_float+0x60>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b4e      	cmp	r3, #78	; 0x4e
 8005594:	d864      	bhi.n	8005660 <_scanf_float+0x11c>
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d83c      	bhi.n	8005614 <_scanf_float+0xd0>
 800559a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800559e:	b2c8      	uxtb	r0, r1
 80055a0:	280e      	cmp	r0, #14
 80055a2:	d93a      	bls.n	800561a <_scanf_float+0xd6>
 80055a4:	f1b9 0f00 	cmp.w	r9, #0
 80055a8:	d003      	beq.n	80055b2 <_scanf_float+0x6e>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055b6:	f1ba 0f01 	cmp.w	sl, #1
 80055ba:	f200 8113 	bhi.w	80057e4 <_scanf_float+0x2a0>
 80055be:	455e      	cmp	r6, fp
 80055c0:	f200 8105 	bhi.w	80057ce <_scanf_float+0x28a>
 80055c4:	2501      	movs	r5, #1
 80055c6:	4628      	mov	r0, r5
 80055c8:	b007      	add	sp, #28
 80055ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80055d2:	2a0d      	cmp	r2, #13
 80055d4:	d8e6      	bhi.n	80055a4 <_scanf_float+0x60>
 80055d6:	a101      	add	r1, pc, #4	; (adr r1, 80055dc <_scanf_float+0x98>)
 80055d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055dc:	0800571b 	.word	0x0800571b
 80055e0:	080055a5 	.word	0x080055a5
 80055e4:	080055a5 	.word	0x080055a5
 80055e8:	080055a5 	.word	0x080055a5
 80055ec:	0800577b 	.word	0x0800577b
 80055f0:	08005753 	.word	0x08005753
 80055f4:	080055a5 	.word	0x080055a5
 80055f8:	080055a5 	.word	0x080055a5
 80055fc:	08005729 	.word	0x08005729
 8005600:	080055a5 	.word	0x080055a5
 8005604:	080055a5 	.word	0x080055a5
 8005608:	080055a5 	.word	0x080055a5
 800560c:	080055a5 	.word	0x080055a5
 8005610:	080056e1 	.word	0x080056e1
 8005614:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005618:	e7db      	b.n	80055d2 <_scanf_float+0x8e>
 800561a:	290e      	cmp	r1, #14
 800561c:	d8c2      	bhi.n	80055a4 <_scanf_float+0x60>
 800561e:	a001      	add	r0, pc, #4	; (adr r0, 8005624 <_scanf_float+0xe0>)
 8005620:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005624:	080056d3 	.word	0x080056d3
 8005628:	080055a5 	.word	0x080055a5
 800562c:	080056d3 	.word	0x080056d3
 8005630:	08005767 	.word	0x08005767
 8005634:	080055a5 	.word	0x080055a5
 8005638:	08005681 	.word	0x08005681
 800563c:	080056bd 	.word	0x080056bd
 8005640:	080056bd 	.word	0x080056bd
 8005644:	080056bd 	.word	0x080056bd
 8005648:	080056bd 	.word	0x080056bd
 800564c:	080056bd 	.word	0x080056bd
 8005650:	080056bd 	.word	0x080056bd
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056bd 	.word	0x080056bd
 800565c:	080056bd 	.word	0x080056bd
 8005660:	2b6e      	cmp	r3, #110	; 0x6e
 8005662:	d809      	bhi.n	8005678 <_scanf_float+0x134>
 8005664:	2b60      	cmp	r3, #96	; 0x60
 8005666:	d8b2      	bhi.n	80055ce <_scanf_float+0x8a>
 8005668:	2b54      	cmp	r3, #84	; 0x54
 800566a:	d077      	beq.n	800575c <_scanf_float+0x218>
 800566c:	2b59      	cmp	r3, #89	; 0x59
 800566e:	d199      	bne.n	80055a4 <_scanf_float+0x60>
 8005670:	2d07      	cmp	r5, #7
 8005672:	d197      	bne.n	80055a4 <_scanf_float+0x60>
 8005674:	2508      	movs	r5, #8
 8005676:	e029      	b.n	80056cc <_scanf_float+0x188>
 8005678:	2b74      	cmp	r3, #116	; 0x74
 800567a:	d06f      	beq.n	800575c <_scanf_float+0x218>
 800567c:	2b79      	cmp	r3, #121	; 0x79
 800567e:	e7f6      	b.n	800566e <_scanf_float+0x12a>
 8005680:	6821      	ldr	r1, [r4, #0]
 8005682:	05c8      	lsls	r0, r1, #23
 8005684:	d51a      	bpl.n	80056bc <_scanf_float+0x178>
 8005686:	9b02      	ldr	r3, [sp, #8]
 8005688:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800568c:	6021      	str	r1, [r4, #0]
 800568e:	f109 0901 	add.w	r9, r9, #1
 8005692:	b11b      	cbz	r3, 800569c <_scanf_float+0x158>
 8005694:	3b01      	subs	r3, #1
 8005696:	3201      	adds	r2, #1
 8005698:	9302      	str	r3, [sp, #8]
 800569a:	60a2      	str	r2, [r4, #8]
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	3b01      	subs	r3, #1
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	3301      	adds	r3, #1
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	f340 8084 	ble.w	80057bc <_scanf_float+0x278>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	e766      	b.n	800558a <_scanf_float+0x46>
 80056bc:	eb1a 0f05 	cmn.w	sl, r5
 80056c0:	f47f af70 	bne.w	80055a4 <_scanf_float+0x60>
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	f806 3b01 	strb.w	r3, [r6], #1
 80056d0:	e7e4      	b.n	800569c <_scanf_float+0x158>
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	0610      	lsls	r0, r2, #24
 80056d6:	f57f af65 	bpl.w	80055a4 <_scanf_float+0x60>
 80056da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056de:	e7f4      	b.n	80056ca <_scanf_float+0x186>
 80056e0:	f1ba 0f00 	cmp.w	sl, #0
 80056e4:	d10e      	bne.n	8005704 <_scanf_float+0x1c0>
 80056e6:	f1b9 0f00 	cmp.w	r9, #0
 80056ea:	d10e      	bne.n	800570a <_scanf_float+0x1c6>
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056f6:	d108      	bne.n	800570a <_scanf_float+0x1c6>
 80056f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056fc:	6022      	str	r2, [r4, #0]
 80056fe:	f04f 0a01 	mov.w	sl, #1
 8005702:	e7e3      	b.n	80056cc <_scanf_float+0x188>
 8005704:	f1ba 0f02 	cmp.w	sl, #2
 8005708:	d055      	beq.n	80057b6 <_scanf_float+0x272>
 800570a:	2d01      	cmp	r5, #1
 800570c:	d002      	beq.n	8005714 <_scanf_float+0x1d0>
 800570e:	2d04      	cmp	r5, #4
 8005710:	f47f af48 	bne.w	80055a4 <_scanf_float+0x60>
 8005714:	3501      	adds	r5, #1
 8005716:	b2ed      	uxtb	r5, r5
 8005718:	e7d8      	b.n	80056cc <_scanf_float+0x188>
 800571a:	f1ba 0f01 	cmp.w	sl, #1
 800571e:	f47f af41 	bne.w	80055a4 <_scanf_float+0x60>
 8005722:	f04f 0a02 	mov.w	sl, #2
 8005726:	e7d1      	b.n	80056cc <_scanf_float+0x188>
 8005728:	b97d      	cbnz	r5, 800574a <_scanf_float+0x206>
 800572a:	f1b9 0f00 	cmp.w	r9, #0
 800572e:	f47f af3c 	bne.w	80055aa <_scanf_float+0x66>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005738:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800573c:	f47f af39 	bne.w	80055b2 <_scanf_float+0x6e>
 8005740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005744:	6022      	str	r2, [r4, #0]
 8005746:	2501      	movs	r5, #1
 8005748:	e7c0      	b.n	80056cc <_scanf_float+0x188>
 800574a:	2d03      	cmp	r5, #3
 800574c:	d0e2      	beq.n	8005714 <_scanf_float+0x1d0>
 800574e:	2d05      	cmp	r5, #5
 8005750:	e7de      	b.n	8005710 <_scanf_float+0x1cc>
 8005752:	2d02      	cmp	r5, #2
 8005754:	f47f af26 	bne.w	80055a4 <_scanf_float+0x60>
 8005758:	2503      	movs	r5, #3
 800575a:	e7b7      	b.n	80056cc <_scanf_float+0x188>
 800575c:	2d06      	cmp	r5, #6
 800575e:	f47f af21 	bne.w	80055a4 <_scanf_float+0x60>
 8005762:	2507      	movs	r5, #7
 8005764:	e7b2      	b.n	80056cc <_scanf_float+0x188>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	0591      	lsls	r1, r2, #22
 800576a:	f57f af1b 	bpl.w	80055a4 <_scanf_float+0x60>
 800576e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005772:	6022      	str	r2, [r4, #0]
 8005774:	f8cd 9004 	str.w	r9, [sp, #4]
 8005778:	e7a8      	b.n	80056cc <_scanf_float+0x188>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005780:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005784:	d006      	beq.n	8005794 <_scanf_float+0x250>
 8005786:	0550      	lsls	r0, r2, #21
 8005788:	f57f af0c 	bpl.w	80055a4 <_scanf_float+0x60>
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	f43f af0f 	beq.w	80055b2 <_scanf_float+0x6e>
 8005794:	0591      	lsls	r1, r2, #22
 8005796:	bf58      	it	pl
 8005798:	9901      	ldrpl	r1, [sp, #4]
 800579a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800579e:	bf58      	it	pl
 80057a0:	eba9 0101 	subpl.w	r1, r9, r1
 80057a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80057a8:	bf58      	it	pl
 80057aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	f04f 0900 	mov.w	r9, #0
 80057b4:	e78a      	b.n	80056cc <_scanf_float+0x188>
 80057b6:	f04f 0a03 	mov.w	sl, #3
 80057ba:	e787      	b.n	80056cc <_scanf_float+0x188>
 80057bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057c0:	4639      	mov	r1, r7
 80057c2:	4640      	mov	r0, r8
 80057c4:	4798      	blx	r3
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f43f aedf 	beq.w	800558a <_scanf_float+0x46>
 80057cc:	e6ea      	b.n	80055a4 <_scanf_float+0x60>
 80057ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057d6:	463a      	mov	r2, r7
 80057d8:	4640      	mov	r0, r8
 80057da:	4798      	blx	r3
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	3b01      	subs	r3, #1
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	e6ec      	b.n	80055be <_scanf_float+0x7a>
 80057e4:	1e6b      	subs	r3, r5, #1
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d825      	bhi.n	8005836 <_scanf_float+0x2f2>
 80057ea:	2d02      	cmp	r5, #2
 80057ec:	d836      	bhi.n	800585c <_scanf_float+0x318>
 80057ee:	455e      	cmp	r6, fp
 80057f0:	f67f aee8 	bls.w	80055c4 <_scanf_float+0x80>
 80057f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057fc:	463a      	mov	r2, r7
 80057fe:	4640      	mov	r0, r8
 8005800:	4798      	blx	r3
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	3b01      	subs	r3, #1
 8005806:	6123      	str	r3, [r4, #16]
 8005808:	e7f1      	b.n	80057ee <_scanf_float+0x2aa>
 800580a:	9802      	ldr	r0, [sp, #8]
 800580c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005810:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005814:	9002      	str	r0, [sp, #8]
 8005816:	463a      	mov	r2, r7
 8005818:	4640      	mov	r0, r8
 800581a:	4798      	blx	r3
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	3b01      	subs	r3, #1
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005826:	fa5f fa8a 	uxtb.w	sl, sl
 800582a:	f1ba 0f02 	cmp.w	sl, #2
 800582e:	d1ec      	bne.n	800580a <_scanf_float+0x2c6>
 8005830:	3d03      	subs	r5, #3
 8005832:	b2ed      	uxtb	r5, r5
 8005834:	1b76      	subs	r6, r6, r5
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	05da      	lsls	r2, r3, #23
 800583a:	d52f      	bpl.n	800589c <_scanf_float+0x358>
 800583c:	055b      	lsls	r3, r3, #21
 800583e:	d510      	bpl.n	8005862 <_scanf_float+0x31e>
 8005840:	455e      	cmp	r6, fp
 8005842:	f67f aebf 	bls.w	80055c4 <_scanf_float+0x80>
 8005846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800584a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800584e:	463a      	mov	r2, r7
 8005850:	4640      	mov	r0, r8
 8005852:	4798      	blx	r3
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	3b01      	subs	r3, #1
 8005858:	6123      	str	r3, [r4, #16]
 800585a:	e7f1      	b.n	8005840 <_scanf_float+0x2fc>
 800585c:	46aa      	mov	sl, r5
 800585e:	9602      	str	r6, [sp, #8]
 8005860:	e7df      	b.n	8005822 <_scanf_float+0x2de>
 8005862:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	2965      	cmp	r1, #101	; 0x65
 800586a:	f103 33ff 	add.w	r3, r3, #4294967295
 800586e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	d00c      	beq.n	8005890 <_scanf_float+0x34c>
 8005876:	2945      	cmp	r1, #69	; 0x45
 8005878:	d00a      	beq.n	8005890 <_scanf_float+0x34c>
 800587a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800587e:	463a      	mov	r2, r7
 8005880:	4640      	mov	r0, r8
 8005882:	4798      	blx	r3
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800588a:	3b01      	subs	r3, #1
 800588c:	1eb5      	subs	r5, r6, #2
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005894:	463a      	mov	r2, r7
 8005896:	4640      	mov	r0, r8
 8005898:	4798      	blx	r3
 800589a:	462e      	mov	r6, r5
 800589c:	6825      	ldr	r5, [r4, #0]
 800589e:	f015 0510 	ands.w	r5, r5, #16
 80058a2:	d159      	bne.n	8005958 <_scanf_float+0x414>
 80058a4:	7035      	strb	r5, [r6, #0]
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d11b      	bne.n	80058ea <_scanf_float+0x3a6>
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	454b      	cmp	r3, r9
 80058b6:	eba3 0209 	sub.w	r2, r3, r9
 80058ba:	d123      	bne.n	8005904 <_scanf_float+0x3c0>
 80058bc:	2200      	movs	r2, #0
 80058be:	4659      	mov	r1, fp
 80058c0:	4640      	mov	r0, r8
 80058c2:	f000 fecb 	bl	800665c <_strtod_r>
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	9b03      	ldr	r3, [sp, #12]
 80058ca:	f012 0f02 	tst.w	r2, #2
 80058ce:	ec57 6b10 	vmov	r6, r7, d0
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	d021      	beq.n	800591a <_scanf_float+0x3d6>
 80058d6:	9903      	ldr	r1, [sp, #12]
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	600a      	str	r2, [r1, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	e9c3 6700 	strd	r6, r7, [r3]
 80058e2:	68e3      	ldr	r3, [r4, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60e3      	str	r3, [r4, #12]
 80058e8:	e66d      	b.n	80055c6 <_scanf_float+0x82>
 80058ea:	9b04      	ldr	r3, [sp, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0e5      	beq.n	80058bc <_scanf_float+0x378>
 80058f0:	9905      	ldr	r1, [sp, #20]
 80058f2:	230a      	movs	r3, #10
 80058f4:	462a      	mov	r2, r5
 80058f6:	3101      	adds	r1, #1
 80058f8:	4640      	mov	r0, r8
 80058fa:	f000 ff37 	bl	800676c <_strtol_r>
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	9e05      	ldr	r6, [sp, #20]
 8005902:	1ac2      	subs	r2, r0, r3
 8005904:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005908:	429e      	cmp	r6, r3
 800590a:	bf28      	it	cs
 800590c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005910:	4912      	ldr	r1, [pc, #72]	; (800595c <_scanf_float+0x418>)
 8005912:	4630      	mov	r0, r6
 8005914:	f000 f860 	bl	80059d8 <siprintf>
 8005918:	e7d0      	b.n	80058bc <_scanf_float+0x378>
 800591a:	9903      	ldr	r1, [sp, #12]
 800591c:	f012 0f04 	tst.w	r2, #4
 8005920:	f103 0204 	add.w	r2, r3, #4
 8005924:	600a      	str	r2, [r1, #0]
 8005926:	d1d9      	bne.n	80058dc <_scanf_float+0x398>
 8005928:	f8d3 8000 	ldr.w	r8, [r3]
 800592c:	ee10 2a10 	vmov	r2, s0
 8005930:	ee10 0a10 	vmov	r0, s0
 8005934:	463b      	mov	r3, r7
 8005936:	4639      	mov	r1, r7
 8005938:	f7fb f900 	bl	8000b3c <__aeabi_dcmpun>
 800593c:	b128      	cbz	r0, 800594a <_scanf_float+0x406>
 800593e:	4808      	ldr	r0, [pc, #32]	; (8005960 <_scanf_float+0x41c>)
 8005940:	f000 f810 	bl	8005964 <nanf>
 8005944:	ed88 0a00 	vstr	s0, [r8]
 8005948:	e7cb      	b.n	80058e2 <_scanf_float+0x39e>
 800594a:	4630      	mov	r0, r6
 800594c:	4639      	mov	r1, r7
 800594e:	f7fb f953 	bl	8000bf8 <__aeabi_d2f>
 8005952:	f8c8 0000 	str.w	r0, [r8]
 8005956:	e7c4      	b.n	80058e2 <_scanf_float+0x39e>
 8005958:	2500      	movs	r5, #0
 800595a:	e634      	b.n	80055c6 <_scanf_float+0x82>
 800595c:	0800a510 	.word	0x0800a510
 8005960:	0800a918 	.word	0x0800a918

08005964 <nanf>:
 8005964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800596c <nanf+0x8>
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	7fc00000 	.word	0x7fc00000

08005970 <sniprintf>:
 8005970:	b40c      	push	{r2, r3}
 8005972:	b530      	push	{r4, r5, lr}
 8005974:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <sniprintf+0x64>)
 8005976:	1e0c      	subs	r4, r1, #0
 8005978:	681d      	ldr	r5, [r3, #0]
 800597a:	b09d      	sub	sp, #116	; 0x74
 800597c:	da08      	bge.n	8005990 <sniprintf+0x20>
 800597e:	238b      	movs	r3, #139	; 0x8b
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f04f 30ff 	mov.w	r0, #4294967295
 8005986:	b01d      	add	sp, #116	; 0x74
 8005988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800598c:	b002      	add	sp, #8
 800598e:	4770      	bx	lr
 8005990:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005994:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005998:	bf14      	ite	ne
 800599a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800599e:	4623      	moveq	r3, r4
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059a8:	9002      	str	r0, [sp, #8]
 80059aa:	9006      	str	r0, [sp, #24]
 80059ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80059b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059b2:	ab21      	add	r3, sp, #132	; 0x84
 80059b4:	a902      	add	r1, sp, #8
 80059b6:	4628      	mov	r0, r5
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	f002 ff03 	bl	80087c4 <_svfiprintf_r>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	bfbc      	itt	lt
 80059c2:	238b      	movlt	r3, #139	; 0x8b
 80059c4:	602b      	strlt	r3, [r5, #0]
 80059c6:	2c00      	cmp	r4, #0
 80059c8:	d0dd      	beq.n	8005986 <sniprintf+0x16>
 80059ca:	9b02      	ldr	r3, [sp, #8]
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e7d9      	b.n	8005986 <sniprintf+0x16>
 80059d2:	bf00      	nop
 80059d4:	20000b6c 	.word	0x20000b6c

080059d8 <siprintf>:
 80059d8:	b40e      	push	{r1, r2, r3}
 80059da:	b500      	push	{lr}
 80059dc:	b09c      	sub	sp, #112	; 0x70
 80059de:	ab1d      	add	r3, sp, #116	; 0x74
 80059e0:	9002      	str	r0, [sp, #8]
 80059e2:	9006      	str	r0, [sp, #24]
 80059e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059e8:	4809      	ldr	r0, [pc, #36]	; (8005a10 <siprintf+0x38>)
 80059ea:	9107      	str	r1, [sp, #28]
 80059ec:	9104      	str	r1, [sp, #16]
 80059ee:	4909      	ldr	r1, [pc, #36]	; (8005a14 <siprintf+0x3c>)
 80059f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f4:	9105      	str	r1, [sp, #20]
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	a902      	add	r1, sp, #8
 80059fc:	f002 fee2 	bl	80087c4 <_svfiprintf_r>
 8005a00:	9b02      	ldr	r3, [sp, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	b01c      	add	sp, #112	; 0x70
 8005a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	20000b6c 	.word	0x20000b6c
 8005a14:	ffff0208 	.word	0xffff0208

08005a18 <sulp>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	ec45 4b10 	vmov	d0, r4, r5
 8005a22:	4616      	mov	r6, r2
 8005a24:	f002 fc2c 	bl	8008280 <__ulp>
 8005a28:	ec51 0b10 	vmov	r0, r1, d0
 8005a2c:	b17e      	cbz	r6, 8005a4e <sulp+0x36>
 8005a2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005a32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	dd09      	ble.n	8005a4e <sulp+0x36>
 8005a3a:	051b      	lsls	r3, r3, #20
 8005a3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a40:	2400      	movs	r4, #0
 8005a42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f7fa fddd 	bl	8000608 <__aeabi_dmul>
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}

08005a50 <_strtod_l>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	ed2d 8b02 	vpush	{d8}
 8005a58:	b09d      	sub	sp, #116	; 0x74
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	9318      	str	r3, [sp, #96]	; 0x60
 8005a60:	4ba2      	ldr	r3, [pc, #648]	; (8005cec <_strtod_l+0x29c>)
 8005a62:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	9305      	str	r3, [sp, #20]
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	4688      	mov	r8, r1
 8005a6e:	f7fa fbb7 	bl	80001e0 <strlen>
 8005a72:	f04f 0a00 	mov.w	sl, #0
 8005a76:	4605      	mov	r5, r0
 8005a78:	f04f 0b00 	mov.w	fp, #0
 8005a7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a82:	781a      	ldrb	r2, [r3, #0]
 8005a84:	2a2b      	cmp	r2, #43	; 0x2b
 8005a86:	d04e      	beq.n	8005b26 <_strtod_l+0xd6>
 8005a88:	d83b      	bhi.n	8005b02 <_strtod_l+0xb2>
 8005a8a:	2a0d      	cmp	r2, #13
 8005a8c:	d834      	bhi.n	8005af8 <_strtod_l+0xa8>
 8005a8e:	2a08      	cmp	r2, #8
 8005a90:	d834      	bhi.n	8005afc <_strtod_l+0xac>
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d03e      	beq.n	8005b14 <_strtod_l+0xc4>
 8005a96:	2300      	movs	r3, #0
 8005a98:	930a      	str	r3, [sp, #40]	; 0x28
 8005a9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005a9c:	7833      	ldrb	r3, [r6, #0]
 8005a9e:	2b30      	cmp	r3, #48	; 0x30
 8005aa0:	f040 80b0 	bne.w	8005c04 <_strtod_l+0x1b4>
 8005aa4:	7873      	ldrb	r3, [r6, #1]
 8005aa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005aaa:	2b58      	cmp	r3, #88	; 0x58
 8005aac:	d168      	bne.n	8005b80 <_strtod_l+0x130>
 8005aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	ab18      	add	r3, sp, #96	; 0x60
 8005ab4:	9702      	str	r7, [sp, #8]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	4a8d      	ldr	r2, [pc, #564]	; (8005cf0 <_strtod_l+0x2a0>)
 8005aba:	ab19      	add	r3, sp, #100	; 0x64
 8005abc:	a917      	add	r1, sp, #92	; 0x5c
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f001 fd38 	bl	8007534 <__gethex>
 8005ac4:	f010 0707 	ands.w	r7, r0, #7
 8005ac8:	4605      	mov	r5, r0
 8005aca:	d005      	beq.n	8005ad8 <_strtod_l+0x88>
 8005acc:	2f06      	cmp	r7, #6
 8005ace:	d12c      	bne.n	8005b2a <_strtod_l+0xda>
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9617      	str	r6, [sp, #92]	; 0x5c
 8005ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 8590 	bne.w	8006600 <_strtod_l+0xbb0>
 8005ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae2:	b1eb      	cbz	r3, 8005b20 <_strtod_l+0xd0>
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005aea:	ec43 2b10 	vmov	d0, r2, r3
 8005aee:	b01d      	add	sp, #116	; 0x74
 8005af0:	ecbd 8b02 	vpop	{d8}
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	2a20      	cmp	r2, #32
 8005afa:	d1cc      	bne.n	8005a96 <_strtod_l+0x46>
 8005afc:	3301      	adds	r3, #1
 8005afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b00:	e7be      	b.n	8005a80 <_strtod_l+0x30>
 8005b02:	2a2d      	cmp	r2, #45	; 0x2d
 8005b04:	d1c7      	bne.n	8005a96 <_strtod_l+0x46>
 8005b06:	2201      	movs	r2, #1
 8005b08:	920a      	str	r2, [sp, #40]	; 0x28
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1c2      	bne.n	8005a9a <_strtod_l+0x4a>
 8005b14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 856e 	bne.w	80065fc <_strtod_l+0xbac>
 8005b20:	4652      	mov	r2, sl
 8005b22:	465b      	mov	r3, fp
 8005b24:	e7e1      	b.n	8005aea <_strtod_l+0x9a>
 8005b26:	2200      	movs	r2, #0
 8005b28:	e7ee      	b.n	8005b08 <_strtod_l+0xb8>
 8005b2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005b2c:	b13a      	cbz	r2, 8005b3e <_strtod_l+0xee>
 8005b2e:	2135      	movs	r1, #53	; 0x35
 8005b30:	a81a      	add	r0, sp, #104	; 0x68
 8005b32:	f002 fcb0 	bl	8008496 <__copybits>
 8005b36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f002 f86f 	bl	8007c1c <_Bfree>
 8005b3e:	3f01      	subs	r7, #1
 8005b40:	2f04      	cmp	r7, #4
 8005b42:	d806      	bhi.n	8005b52 <_strtod_l+0x102>
 8005b44:	e8df f007 	tbb	[pc, r7]
 8005b48:	1714030a 	.word	0x1714030a
 8005b4c:	0a          	.byte	0x0a
 8005b4d:	00          	.byte	0x00
 8005b4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005b52:	0728      	lsls	r0, r5, #28
 8005b54:	d5c0      	bpl.n	8005ad8 <_strtod_l+0x88>
 8005b56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005b5a:	e7bd      	b.n	8005ad8 <_strtod_l+0x88>
 8005b5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005b60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005b62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b6e:	e7f0      	b.n	8005b52 <_strtod_l+0x102>
 8005b70:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005cf4 <_strtod_l+0x2a4>
 8005b74:	e7ed      	b.n	8005b52 <_strtod_l+0x102>
 8005b76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005b7a:	f04f 3aff 	mov.w	sl, #4294967295
 8005b7e:	e7e8      	b.n	8005b52 <_strtod_l+0x102>
 8005b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b30      	cmp	r3, #48	; 0x30
 8005b8a:	d0f9      	beq.n	8005b80 <_strtod_l+0x130>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0a3      	beq.n	8005ad8 <_strtod_l+0x88>
 8005b90:	2301      	movs	r3, #1
 8005b92:	f04f 0900 	mov.w	r9, #0
 8005b96:	9304      	str	r3, [sp, #16]
 8005b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b9a:	9308      	str	r3, [sp, #32]
 8005b9c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ba0:	464f      	mov	r7, r9
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005ba6:	7806      	ldrb	r6, [r0, #0]
 8005ba8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005bac:	b2d9      	uxtb	r1, r3
 8005bae:	2909      	cmp	r1, #9
 8005bb0:	d92a      	bls.n	8005c08 <_strtod_l+0x1b8>
 8005bb2:	9905      	ldr	r1, [sp, #20]
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	f002 ff1f 	bl	80089f8 <strncmp>
 8005bba:	b398      	cbz	r0, 8005c24 <_strtod_l+0x1d4>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	463d      	mov	r5, r7
 8005bc2:	9005      	str	r0, [sp, #20]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2a65      	cmp	r2, #101	; 0x65
 8005bc8:	d001      	beq.n	8005bce <_strtod_l+0x17e>
 8005bca:	2a45      	cmp	r2, #69	; 0x45
 8005bcc:	d118      	bne.n	8005c00 <_strtod_l+0x1b0>
 8005bce:	b91d      	cbnz	r5, 8005bd8 <_strtod_l+0x188>
 8005bd0:	9a04      	ldr	r2, [sp, #16]
 8005bd2:	4302      	orrs	r2, r0
 8005bd4:	d09e      	beq.n	8005b14 <_strtod_l+0xc4>
 8005bd6:	2500      	movs	r5, #0
 8005bd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005bdc:	f108 0201 	add.w	r2, r8, #1
 8005be0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005be2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005be6:	2a2b      	cmp	r2, #43	; 0x2b
 8005be8:	d075      	beq.n	8005cd6 <_strtod_l+0x286>
 8005bea:	2a2d      	cmp	r2, #45	; 0x2d
 8005bec:	d07b      	beq.n	8005ce6 <_strtod_l+0x296>
 8005bee:	f04f 0c00 	mov.w	ip, #0
 8005bf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005bf6:	2909      	cmp	r1, #9
 8005bf8:	f240 8082 	bls.w	8005d00 <_strtod_l+0x2b0>
 8005bfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c00:	2600      	movs	r6, #0
 8005c02:	e09d      	b.n	8005d40 <_strtod_l+0x2f0>
 8005c04:	2300      	movs	r3, #0
 8005c06:	e7c4      	b.n	8005b92 <_strtod_l+0x142>
 8005c08:	2f08      	cmp	r7, #8
 8005c0a:	bfd8      	it	le
 8005c0c:	9907      	ldrle	r1, [sp, #28]
 8005c0e:	f100 0001 	add.w	r0, r0, #1
 8005c12:	bfda      	itte	le
 8005c14:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c18:	9307      	strle	r3, [sp, #28]
 8005c1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005c1e:	3701      	adds	r7, #1
 8005c20:	9017      	str	r0, [sp, #92]	; 0x5c
 8005c22:	e7bf      	b.n	8005ba4 <_strtod_l+0x154>
 8005c24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c26:	195a      	adds	r2, r3, r5
 8005c28:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c2a:	5d5a      	ldrb	r2, [r3, r5]
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	d037      	beq.n	8005ca0 <_strtod_l+0x250>
 8005c30:	9005      	str	r0, [sp, #20]
 8005c32:	463d      	mov	r5, r7
 8005c34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c38:	2b09      	cmp	r3, #9
 8005c3a:	d912      	bls.n	8005c62 <_strtod_l+0x212>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e7c2      	b.n	8005bc6 <_strtod_l+0x176>
 8005c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c46:	785a      	ldrb	r2, [r3, #1]
 8005c48:	3001      	adds	r0, #1
 8005c4a:	2a30      	cmp	r2, #48	; 0x30
 8005c4c:	d0f8      	beq.n	8005c40 <_strtod_l+0x1f0>
 8005c4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	f200 84d9 	bhi.w	800660a <_strtod_l+0xbba>
 8005c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c5a:	9005      	str	r0, [sp, #20]
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	9308      	str	r3, [sp, #32]
 8005c60:	4605      	mov	r5, r0
 8005c62:	3a30      	subs	r2, #48	; 0x30
 8005c64:	f100 0301 	add.w	r3, r0, #1
 8005c68:	d014      	beq.n	8005c94 <_strtod_l+0x244>
 8005c6a:	9905      	ldr	r1, [sp, #20]
 8005c6c:	4419      	add	r1, r3
 8005c6e:	9105      	str	r1, [sp, #20]
 8005c70:	462b      	mov	r3, r5
 8005c72:	eb00 0e05 	add.w	lr, r0, r5
 8005c76:	210a      	movs	r1, #10
 8005c78:	4573      	cmp	r3, lr
 8005c7a:	d113      	bne.n	8005ca4 <_strtod_l+0x254>
 8005c7c:	182b      	adds	r3, r5, r0
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	f105 0501 	add.w	r5, r5, #1
 8005c84:	4405      	add	r5, r0
 8005c86:	dc1c      	bgt.n	8005cc2 <_strtod_l+0x272>
 8005c88:	9907      	ldr	r1, [sp, #28]
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	fb03 2301 	mla	r3, r3, r1, r2
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	2300      	movs	r3, #0
 8005c94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c96:	1c51      	adds	r1, r2, #1
 8005c98:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c9a:	7852      	ldrb	r2, [r2, #1]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	e7c9      	b.n	8005c34 <_strtod_l+0x1e4>
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	e7d2      	b.n	8005c4a <_strtod_l+0x1fa>
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	dc04      	bgt.n	8005cb2 <_strtod_l+0x262>
 8005ca8:	9e07      	ldr	r6, [sp, #28]
 8005caa:	434e      	muls	r6, r1
 8005cac:	9607      	str	r6, [sp, #28]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	e7e2      	b.n	8005c78 <_strtod_l+0x228>
 8005cb2:	f103 0c01 	add.w	ip, r3, #1
 8005cb6:	f1bc 0f10 	cmp.w	ip, #16
 8005cba:	bfd8      	it	le
 8005cbc:	fb01 f909 	mulle.w	r9, r1, r9
 8005cc0:	e7f5      	b.n	8005cae <_strtod_l+0x25e>
 8005cc2:	2d10      	cmp	r5, #16
 8005cc4:	bfdc      	itt	le
 8005cc6:	230a      	movle	r3, #10
 8005cc8:	fb03 2909 	mlale	r9, r3, r9, r2
 8005ccc:	e7e1      	b.n	8005c92 <_strtod_l+0x242>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9305      	str	r3, [sp, #20]
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e77c      	b.n	8005bd0 <_strtod_l+0x180>
 8005cd6:	f04f 0c00 	mov.w	ip, #0
 8005cda:	f108 0202 	add.w	r2, r8, #2
 8005cde:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ce0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005ce4:	e785      	b.n	8005bf2 <_strtod_l+0x1a2>
 8005ce6:	f04f 0c01 	mov.w	ip, #1
 8005cea:	e7f6      	b.n	8005cda <_strtod_l+0x28a>
 8005cec:	0800a760 	.word	0x0800a760
 8005cf0:	0800a518 	.word	0x0800a518
 8005cf4:	7ff00000 	.word	0x7ff00000
 8005cf8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cfa:	1c51      	adds	r1, r2, #1
 8005cfc:	9117      	str	r1, [sp, #92]	; 0x5c
 8005cfe:	7852      	ldrb	r2, [r2, #1]
 8005d00:	2a30      	cmp	r2, #48	; 0x30
 8005d02:	d0f9      	beq.n	8005cf8 <_strtod_l+0x2a8>
 8005d04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005d08:	2908      	cmp	r1, #8
 8005d0a:	f63f af79 	bhi.w	8005c00 <_strtod_l+0x1b0>
 8005d0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005d12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d14:	9206      	str	r2, [sp, #24]
 8005d16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005d18:	1c51      	adds	r1, r2, #1
 8005d1a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005d1c:	7852      	ldrb	r2, [r2, #1]
 8005d1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005d22:	2e09      	cmp	r6, #9
 8005d24:	d937      	bls.n	8005d96 <_strtod_l+0x346>
 8005d26:	9e06      	ldr	r6, [sp, #24]
 8005d28:	1b89      	subs	r1, r1, r6
 8005d2a:	2908      	cmp	r1, #8
 8005d2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005d30:	dc02      	bgt.n	8005d38 <_strtod_l+0x2e8>
 8005d32:	4576      	cmp	r6, lr
 8005d34:	bfa8      	it	ge
 8005d36:	4676      	movge	r6, lr
 8005d38:	f1bc 0f00 	cmp.w	ip, #0
 8005d3c:	d000      	beq.n	8005d40 <_strtod_l+0x2f0>
 8005d3e:	4276      	negs	r6, r6
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	d14d      	bne.n	8005de0 <_strtod_l+0x390>
 8005d44:	9904      	ldr	r1, [sp, #16]
 8005d46:	4301      	orrs	r1, r0
 8005d48:	f47f aec6 	bne.w	8005ad8 <_strtod_l+0x88>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f47f aee1 	bne.w	8005b14 <_strtod_l+0xc4>
 8005d52:	2a69      	cmp	r2, #105	; 0x69
 8005d54:	d027      	beq.n	8005da6 <_strtod_l+0x356>
 8005d56:	dc24      	bgt.n	8005da2 <_strtod_l+0x352>
 8005d58:	2a49      	cmp	r2, #73	; 0x49
 8005d5a:	d024      	beq.n	8005da6 <_strtod_l+0x356>
 8005d5c:	2a4e      	cmp	r2, #78	; 0x4e
 8005d5e:	f47f aed9 	bne.w	8005b14 <_strtod_l+0xc4>
 8005d62:	499f      	ldr	r1, [pc, #636]	; (8005fe0 <_strtod_l+0x590>)
 8005d64:	a817      	add	r0, sp, #92	; 0x5c
 8005d66:	f001 fe3d 	bl	80079e4 <__match>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	f43f aed2 	beq.w	8005b14 <_strtod_l+0xc4>
 8005d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b28      	cmp	r3, #40	; 0x28
 8005d76:	d12d      	bne.n	8005dd4 <_strtod_l+0x384>
 8005d78:	499a      	ldr	r1, [pc, #616]	; (8005fe4 <_strtod_l+0x594>)
 8005d7a:	aa1a      	add	r2, sp, #104	; 0x68
 8005d7c:	a817      	add	r0, sp, #92	; 0x5c
 8005d7e:	f001 fe45 	bl	8007a0c <__hexnan>
 8005d82:	2805      	cmp	r0, #5
 8005d84:	d126      	bne.n	8005dd4 <_strtod_l+0x384>
 8005d86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005d8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005d90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005d94:	e6a0      	b.n	8005ad8 <_strtod_l+0x88>
 8005d96:	210a      	movs	r1, #10
 8005d98:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005d9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005da0:	e7b9      	b.n	8005d16 <_strtod_l+0x2c6>
 8005da2:	2a6e      	cmp	r2, #110	; 0x6e
 8005da4:	e7db      	b.n	8005d5e <_strtod_l+0x30e>
 8005da6:	4990      	ldr	r1, [pc, #576]	; (8005fe8 <_strtod_l+0x598>)
 8005da8:	a817      	add	r0, sp, #92	; 0x5c
 8005daa:	f001 fe1b 	bl	80079e4 <__match>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	f43f aeb0 	beq.w	8005b14 <_strtod_l+0xc4>
 8005db4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005db6:	498d      	ldr	r1, [pc, #564]	; (8005fec <_strtod_l+0x59c>)
 8005db8:	3b01      	subs	r3, #1
 8005dba:	a817      	add	r0, sp, #92	; 0x5c
 8005dbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8005dbe:	f001 fe11 	bl	80079e4 <__match>
 8005dc2:	b910      	cbnz	r0, 8005dca <_strtod_l+0x37a>
 8005dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8005dca:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005ffc <_strtod_l+0x5ac>
 8005dce:	f04f 0a00 	mov.w	sl, #0
 8005dd2:	e681      	b.n	8005ad8 <_strtod_l+0x88>
 8005dd4:	4886      	ldr	r0, [pc, #536]	; (8005ff0 <_strtod_l+0x5a0>)
 8005dd6:	f002 fdf7 	bl	80089c8 <nan>
 8005dda:	ec5b ab10 	vmov	sl, fp, d0
 8005dde:	e67b      	b.n	8005ad8 <_strtod_l+0x88>
 8005de0:	9b05      	ldr	r3, [sp, #20]
 8005de2:	9807      	ldr	r0, [sp, #28]
 8005de4:	1af3      	subs	r3, r6, r3
 8005de6:	2f00      	cmp	r7, #0
 8005de8:	bf08      	it	eq
 8005dea:	462f      	moveq	r7, r5
 8005dec:	2d10      	cmp	r5, #16
 8005dee:	9306      	str	r3, [sp, #24]
 8005df0:	46a8      	mov	r8, r5
 8005df2:	bfa8      	it	ge
 8005df4:	f04f 0810 	movge.w	r8, #16
 8005df8:	f7fa fb8c 	bl	8000514 <__aeabi_ui2d>
 8005dfc:	2d09      	cmp	r5, #9
 8005dfe:	4682      	mov	sl, r0
 8005e00:	468b      	mov	fp, r1
 8005e02:	dd13      	ble.n	8005e2c <_strtod_l+0x3dc>
 8005e04:	4b7b      	ldr	r3, [pc, #492]	; (8005ff4 <_strtod_l+0x5a4>)
 8005e06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e0e:	f7fa fbfb 	bl	8000608 <__aeabi_dmul>
 8005e12:	4682      	mov	sl, r0
 8005e14:	4648      	mov	r0, r9
 8005e16:	468b      	mov	fp, r1
 8005e18:	f7fa fb7c 	bl	8000514 <__aeabi_ui2d>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	f7fa fa3a 	bl	800029c <__adddf3>
 8005e28:	4682      	mov	sl, r0
 8005e2a:	468b      	mov	fp, r1
 8005e2c:	2d0f      	cmp	r5, #15
 8005e2e:	dc38      	bgt.n	8005ea2 <_strtod_l+0x452>
 8005e30:	9b06      	ldr	r3, [sp, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f43f ae50 	beq.w	8005ad8 <_strtod_l+0x88>
 8005e38:	dd24      	ble.n	8005e84 <_strtod_l+0x434>
 8005e3a:	2b16      	cmp	r3, #22
 8005e3c:	dc0b      	bgt.n	8005e56 <_strtod_l+0x406>
 8005e3e:	496d      	ldr	r1, [pc, #436]	; (8005ff4 <_strtod_l+0x5a4>)
 8005e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e48:	4652      	mov	r2, sl
 8005e4a:	465b      	mov	r3, fp
 8005e4c:	f7fa fbdc 	bl	8000608 <__aeabi_dmul>
 8005e50:	4682      	mov	sl, r0
 8005e52:	468b      	mov	fp, r1
 8005e54:	e640      	b.n	8005ad8 <_strtod_l+0x88>
 8005e56:	9a06      	ldr	r2, [sp, #24]
 8005e58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	db20      	blt.n	8005ea2 <_strtod_l+0x452>
 8005e60:	4c64      	ldr	r4, [pc, #400]	; (8005ff4 <_strtod_l+0x5a4>)
 8005e62:	f1c5 050f 	rsb	r5, r5, #15
 8005e66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005e6a:	4652      	mov	r2, sl
 8005e6c:	465b      	mov	r3, fp
 8005e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e72:	f7fa fbc9 	bl	8000608 <__aeabi_dmul>
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	1b5d      	subs	r5, r3, r5
 8005e7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e82:	e7e3      	b.n	8005e4c <_strtod_l+0x3fc>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	3316      	adds	r3, #22
 8005e88:	db0b      	blt.n	8005ea2 <_strtod_l+0x452>
 8005e8a:	9b05      	ldr	r3, [sp, #20]
 8005e8c:	1b9e      	subs	r6, r3, r6
 8005e8e:	4b59      	ldr	r3, [pc, #356]	; (8005ff4 <_strtod_l+0x5a4>)
 8005e90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e98:	4650      	mov	r0, sl
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	f7fa fcde 	bl	800085c <__aeabi_ddiv>
 8005ea0:	e7d6      	b.n	8005e50 <_strtod_l+0x400>
 8005ea2:	9b06      	ldr	r3, [sp, #24]
 8005ea4:	eba5 0808 	sub.w	r8, r5, r8
 8005ea8:	4498      	add	r8, r3
 8005eaa:	f1b8 0f00 	cmp.w	r8, #0
 8005eae:	dd74      	ble.n	8005f9a <_strtod_l+0x54a>
 8005eb0:	f018 030f 	ands.w	r3, r8, #15
 8005eb4:	d00a      	beq.n	8005ecc <_strtod_l+0x47c>
 8005eb6:	494f      	ldr	r1, [pc, #316]	; (8005ff4 <_strtod_l+0x5a4>)
 8005eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	465b      	mov	r3, fp
 8005ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec4:	f7fa fba0 	bl	8000608 <__aeabi_dmul>
 8005ec8:	4682      	mov	sl, r0
 8005eca:	468b      	mov	fp, r1
 8005ecc:	f038 080f 	bics.w	r8, r8, #15
 8005ed0:	d04f      	beq.n	8005f72 <_strtod_l+0x522>
 8005ed2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005ed6:	dd22      	ble.n	8005f1e <_strtod_l+0x4ce>
 8005ed8:	2500      	movs	r5, #0
 8005eda:	462e      	mov	r6, r5
 8005edc:	9507      	str	r5, [sp, #28]
 8005ede:	9505      	str	r5, [sp, #20]
 8005ee0:	2322      	movs	r3, #34	; 0x22
 8005ee2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005ffc <_strtod_l+0x5ac>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	f04f 0a00 	mov.w	sl, #0
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f43f adf2 	beq.w	8005ad8 <_strtod_l+0x88>
 8005ef4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f001 fe90 	bl	8007c1c <_Bfree>
 8005efc:	9905      	ldr	r1, [sp, #20]
 8005efe:	4620      	mov	r0, r4
 8005f00:	f001 fe8c 	bl	8007c1c <_Bfree>
 8005f04:	4631      	mov	r1, r6
 8005f06:	4620      	mov	r0, r4
 8005f08:	f001 fe88 	bl	8007c1c <_Bfree>
 8005f0c:	9907      	ldr	r1, [sp, #28]
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f001 fe84 	bl	8007c1c <_Bfree>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4620      	mov	r0, r4
 8005f18:	f001 fe80 	bl	8007c1c <_Bfree>
 8005f1c:	e5dc      	b.n	8005ad8 <_strtod_l+0x88>
 8005f1e:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <_strtod_l+0x5a8>)
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005f28:	4650      	mov	r0, sl
 8005f2a:	4659      	mov	r1, fp
 8005f2c:	4699      	mov	r9, r3
 8005f2e:	f1b8 0f01 	cmp.w	r8, #1
 8005f32:	dc21      	bgt.n	8005f78 <_strtod_l+0x528>
 8005f34:	b10b      	cbz	r3, 8005f3a <_strtod_l+0x4ea>
 8005f36:	4682      	mov	sl, r0
 8005f38:	468b      	mov	fp, r1
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <_strtod_l+0x5a8>)
 8005f3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005f40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005f44:	4652      	mov	r2, sl
 8005f46:	465b      	mov	r3, fp
 8005f48:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005f4c:	f7fa fb5c 	bl	8000608 <__aeabi_dmul>
 8005f50:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <_strtod_l+0x5ac>)
 8005f52:	460a      	mov	r2, r1
 8005f54:	400b      	ands	r3, r1
 8005f56:	492a      	ldr	r1, [pc, #168]	; (8006000 <_strtod_l+0x5b0>)
 8005f58:	428b      	cmp	r3, r1
 8005f5a:	4682      	mov	sl, r0
 8005f5c:	d8bc      	bhi.n	8005ed8 <_strtod_l+0x488>
 8005f5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f62:	428b      	cmp	r3, r1
 8005f64:	bf86      	itte	hi
 8005f66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006004 <_strtod_l+0x5b4>
 8005f6a:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005f72:	2300      	movs	r3, #0
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	e084      	b.n	8006082 <_strtod_l+0x632>
 8005f78:	f018 0f01 	tst.w	r8, #1
 8005f7c:	d005      	beq.n	8005f8a <_strtod_l+0x53a>
 8005f7e:	9b04      	ldr	r3, [sp, #16]
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa fb40 	bl	8000608 <__aeabi_dmul>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	9a04      	ldr	r2, [sp, #16]
 8005f8c:	3208      	adds	r2, #8
 8005f8e:	f109 0901 	add.w	r9, r9, #1
 8005f92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f96:	9204      	str	r2, [sp, #16]
 8005f98:	e7c9      	b.n	8005f2e <_strtod_l+0x4de>
 8005f9a:	d0ea      	beq.n	8005f72 <_strtod_l+0x522>
 8005f9c:	f1c8 0800 	rsb	r8, r8, #0
 8005fa0:	f018 020f 	ands.w	r2, r8, #15
 8005fa4:	d00a      	beq.n	8005fbc <_strtod_l+0x56c>
 8005fa6:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <_strtod_l+0x5a4>)
 8005fa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fac:	4650      	mov	r0, sl
 8005fae:	4659      	mov	r1, fp
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fc52 	bl	800085c <__aeabi_ddiv>
 8005fb8:	4682      	mov	sl, r0
 8005fba:	468b      	mov	fp, r1
 8005fbc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005fc0:	d0d7      	beq.n	8005f72 <_strtod_l+0x522>
 8005fc2:	f1b8 0f1f 	cmp.w	r8, #31
 8005fc6:	dd1f      	ble.n	8006008 <_strtod_l+0x5b8>
 8005fc8:	2500      	movs	r5, #0
 8005fca:	462e      	mov	r6, r5
 8005fcc:	9507      	str	r5, [sp, #28]
 8005fce:	9505      	str	r5, [sp, #20]
 8005fd0:	2322      	movs	r3, #34	; 0x22
 8005fd2:	f04f 0a00 	mov.w	sl, #0
 8005fd6:	f04f 0b00 	mov.w	fp, #0
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	e786      	b.n	8005eec <_strtod_l+0x49c>
 8005fde:	bf00      	nop
 8005fe0:	0800a4e9 	.word	0x0800a4e9
 8005fe4:	0800a52c 	.word	0x0800a52c
 8005fe8:	0800a4e1 	.word	0x0800a4e1
 8005fec:	0800a66c 	.word	0x0800a66c
 8005ff0:	0800a918 	.word	0x0800a918
 8005ff4:	0800a7f8 	.word	0x0800a7f8
 8005ff8:	0800a7d0 	.word	0x0800a7d0
 8005ffc:	7ff00000 	.word	0x7ff00000
 8006000:	7ca00000 	.word	0x7ca00000
 8006004:	7fefffff 	.word	0x7fefffff
 8006008:	f018 0310 	ands.w	r3, r8, #16
 800600c:	bf18      	it	ne
 800600e:	236a      	movne	r3, #106	; 0x6a
 8006010:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80063c0 <_strtod_l+0x970>
 8006014:	9304      	str	r3, [sp, #16]
 8006016:	4650      	mov	r0, sl
 8006018:	4659      	mov	r1, fp
 800601a:	2300      	movs	r3, #0
 800601c:	f018 0f01 	tst.w	r8, #1
 8006020:	d004      	beq.n	800602c <_strtod_l+0x5dc>
 8006022:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006026:	f7fa faef 	bl	8000608 <__aeabi_dmul>
 800602a:	2301      	movs	r3, #1
 800602c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006030:	f109 0908 	add.w	r9, r9, #8
 8006034:	d1f2      	bne.n	800601c <_strtod_l+0x5cc>
 8006036:	b10b      	cbz	r3, 800603c <_strtod_l+0x5ec>
 8006038:	4682      	mov	sl, r0
 800603a:	468b      	mov	fp, r1
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	b1c3      	cbz	r3, 8006072 <_strtod_l+0x622>
 8006040:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006044:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006048:	2b00      	cmp	r3, #0
 800604a:	4659      	mov	r1, fp
 800604c:	dd11      	ble.n	8006072 <_strtod_l+0x622>
 800604e:	2b1f      	cmp	r3, #31
 8006050:	f340 8124 	ble.w	800629c <_strtod_l+0x84c>
 8006054:	2b34      	cmp	r3, #52	; 0x34
 8006056:	bfde      	ittt	le
 8006058:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800605c:	f04f 33ff 	movle.w	r3, #4294967295
 8006060:	fa03 f202 	lslle.w	r2, r3, r2
 8006064:	f04f 0a00 	mov.w	sl, #0
 8006068:	bfcc      	ite	gt
 800606a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800606e:	ea02 0b01 	andle.w	fp, r2, r1
 8006072:	2200      	movs	r2, #0
 8006074:	2300      	movs	r3, #0
 8006076:	4650      	mov	r0, sl
 8006078:	4659      	mov	r1, fp
 800607a:	f7fa fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800607e:	2800      	cmp	r0, #0
 8006080:	d1a2      	bne.n	8005fc8 <_strtod_l+0x578>
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	9908      	ldr	r1, [sp, #32]
 8006088:	462b      	mov	r3, r5
 800608a:	463a      	mov	r2, r7
 800608c:	4620      	mov	r0, r4
 800608e:	f001 fe2d 	bl	8007cec <__s2b>
 8006092:	9007      	str	r0, [sp, #28]
 8006094:	2800      	cmp	r0, #0
 8006096:	f43f af1f 	beq.w	8005ed8 <_strtod_l+0x488>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	1b9e      	subs	r6, r3, r6
 800609e:	9b06      	ldr	r3, [sp, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bfb4      	ite	lt
 80060a4:	4633      	movlt	r3, r6
 80060a6:	2300      	movge	r3, #0
 80060a8:	930c      	str	r3, [sp, #48]	; 0x30
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	2500      	movs	r5, #0
 80060ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060b2:	9312      	str	r3, [sp, #72]	; 0x48
 80060b4:	462e      	mov	r6, r5
 80060b6:	9b07      	ldr	r3, [sp, #28]
 80060b8:	4620      	mov	r0, r4
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	f001 fd6e 	bl	8007b9c <_Balloc>
 80060c0:	9005      	str	r0, [sp, #20]
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f43f af0c 	beq.w	8005ee0 <_strtod_l+0x490>
 80060c8:	9b07      	ldr	r3, [sp, #28]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	3202      	adds	r2, #2
 80060ce:	f103 010c 	add.w	r1, r3, #12
 80060d2:	0092      	lsls	r2, r2, #2
 80060d4:	300c      	adds	r0, #12
 80060d6:	f001 fd53 	bl	8007b80 <memcpy>
 80060da:	ec4b ab10 	vmov	d0, sl, fp
 80060de:	aa1a      	add	r2, sp, #104	; 0x68
 80060e0:	a919      	add	r1, sp, #100	; 0x64
 80060e2:	4620      	mov	r0, r4
 80060e4:	f002 f948 	bl	8008378 <__d2b>
 80060e8:	ec4b ab18 	vmov	d8, sl, fp
 80060ec:	9018      	str	r0, [sp, #96]	; 0x60
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f43f aef6 	beq.w	8005ee0 <_strtod_l+0x490>
 80060f4:	2101      	movs	r1, #1
 80060f6:	4620      	mov	r0, r4
 80060f8:	f001 fe92 	bl	8007e20 <__i2b>
 80060fc:	4606      	mov	r6, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	f43f aeee 	beq.w	8005ee0 <_strtod_l+0x490>
 8006104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006106:	9904      	ldr	r1, [sp, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	bfab      	itete	ge
 800610c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800610e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006110:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006112:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006116:	bfac      	ite	ge
 8006118:	eb03 0902 	addge.w	r9, r3, r2
 800611c:	1ad7      	sublt	r7, r2, r3
 800611e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006120:	eba3 0801 	sub.w	r8, r3, r1
 8006124:	4490      	add	r8, r2
 8006126:	4ba1      	ldr	r3, [pc, #644]	; (80063ac <_strtod_l+0x95c>)
 8006128:	f108 38ff 	add.w	r8, r8, #4294967295
 800612c:	4598      	cmp	r8, r3
 800612e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006132:	f280 80c7 	bge.w	80062c4 <_strtod_l+0x874>
 8006136:	eba3 0308 	sub.w	r3, r3, r8
 800613a:	2b1f      	cmp	r3, #31
 800613c:	eba2 0203 	sub.w	r2, r2, r3
 8006140:	f04f 0101 	mov.w	r1, #1
 8006144:	f300 80b1 	bgt.w	80062aa <_strtod_l+0x85a>
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	930d      	str	r3, [sp, #52]	; 0x34
 800614e:	2300      	movs	r3, #0
 8006150:	9308      	str	r3, [sp, #32]
 8006152:	eb09 0802 	add.w	r8, r9, r2
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	45c1      	cmp	r9, r8
 800615a:	4417      	add	r7, r2
 800615c:	441f      	add	r7, r3
 800615e:	464b      	mov	r3, r9
 8006160:	bfa8      	it	ge
 8006162:	4643      	movge	r3, r8
 8006164:	42bb      	cmp	r3, r7
 8006166:	bfa8      	it	ge
 8006168:	463b      	movge	r3, r7
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfc2      	ittt	gt
 800616e:	eba8 0803 	subgt.w	r8, r8, r3
 8006172:	1aff      	subgt	r7, r7, r3
 8006174:	eba9 0903 	subgt.w	r9, r9, r3
 8006178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800617a:	2b00      	cmp	r3, #0
 800617c:	dd17      	ble.n	80061ae <_strtod_l+0x75e>
 800617e:	4631      	mov	r1, r6
 8006180:	461a      	mov	r2, r3
 8006182:	4620      	mov	r0, r4
 8006184:	f001 ff0c 	bl	8007fa0 <__pow5mult>
 8006188:	4606      	mov	r6, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	f43f aea8 	beq.w	8005ee0 <_strtod_l+0x490>
 8006190:	4601      	mov	r1, r0
 8006192:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006194:	4620      	mov	r0, r4
 8006196:	f001 fe59 	bl	8007e4c <__multiply>
 800619a:	900b      	str	r0, [sp, #44]	; 0x2c
 800619c:	2800      	cmp	r0, #0
 800619e:	f43f ae9f 	beq.w	8005ee0 <_strtod_l+0x490>
 80061a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80061a4:	4620      	mov	r0, r4
 80061a6:	f001 fd39 	bl	8007c1c <_Bfree>
 80061aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ac:	9318      	str	r3, [sp, #96]	; 0x60
 80061ae:	f1b8 0f00 	cmp.w	r8, #0
 80061b2:	f300 808c 	bgt.w	80062ce <_strtod_l+0x87e>
 80061b6:	9b06      	ldr	r3, [sp, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dd08      	ble.n	80061ce <_strtod_l+0x77e>
 80061bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061be:	9905      	ldr	r1, [sp, #20]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f001 feed 	bl	8007fa0 <__pow5mult>
 80061c6:	9005      	str	r0, [sp, #20]
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f43f ae89 	beq.w	8005ee0 <_strtod_l+0x490>
 80061ce:	2f00      	cmp	r7, #0
 80061d0:	dd08      	ble.n	80061e4 <_strtod_l+0x794>
 80061d2:	9905      	ldr	r1, [sp, #20]
 80061d4:	463a      	mov	r2, r7
 80061d6:	4620      	mov	r0, r4
 80061d8:	f001 ff3c 	bl	8008054 <__lshift>
 80061dc:	9005      	str	r0, [sp, #20]
 80061de:	2800      	cmp	r0, #0
 80061e0:	f43f ae7e 	beq.w	8005ee0 <_strtod_l+0x490>
 80061e4:	f1b9 0f00 	cmp.w	r9, #0
 80061e8:	dd08      	ble.n	80061fc <_strtod_l+0x7ac>
 80061ea:	4631      	mov	r1, r6
 80061ec:	464a      	mov	r2, r9
 80061ee:	4620      	mov	r0, r4
 80061f0:	f001 ff30 	bl	8008054 <__lshift>
 80061f4:	4606      	mov	r6, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f43f ae72 	beq.w	8005ee0 <_strtod_l+0x490>
 80061fc:	9a05      	ldr	r2, [sp, #20]
 80061fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006200:	4620      	mov	r0, r4
 8006202:	f001 ffb3 	bl	800816c <__mdiff>
 8006206:	4605      	mov	r5, r0
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f ae69 	beq.w	8005ee0 <_strtod_l+0x490>
 800620e:	68c3      	ldr	r3, [r0, #12]
 8006210:	930b      	str	r3, [sp, #44]	; 0x2c
 8006212:	2300      	movs	r3, #0
 8006214:	60c3      	str	r3, [r0, #12]
 8006216:	4631      	mov	r1, r6
 8006218:	f001 ff8c 	bl	8008134 <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	da60      	bge.n	80062e2 <_strtod_l+0x892>
 8006220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006222:	ea53 030a 	orrs.w	r3, r3, sl
 8006226:	f040 8082 	bne.w	800632e <_strtod_l+0x8de>
 800622a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800622e:	2b00      	cmp	r3, #0
 8006230:	d17d      	bne.n	800632e <_strtod_l+0x8de>
 8006232:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006236:	0d1b      	lsrs	r3, r3, #20
 8006238:	051b      	lsls	r3, r3, #20
 800623a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800623e:	d976      	bls.n	800632e <_strtod_l+0x8de>
 8006240:	696b      	ldr	r3, [r5, #20]
 8006242:	b913      	cbnz	r3, 800624a <_strtod_l+0x7fa>
 8006244:	692b      	ldr	r3, [r5, #16]
 8006246:	2b01      	cmp	r3, #1
 8006248:	dd71      	ble.n	800632e <_strtod_l+0x8de>
 800624a:	4629      	mov	r1, r5
 800624c:	2201      	movs	r2, #1
 800624e:	4620      	mov	r0, r4
 8006250:	f001 ff00 	bl	8008054 <__lshift>
 8006254:	4631      	mov	r1, r6
 8006256:	4605      	mov	r5, r0
 8006258:	f001 ff6c 	bl	8008134 <__mcmp>
 800625c:	2800      	cmp	r0, #0
 800625e:	dd66      	ble.n	800632e <_strtod_l+0x8de>
 8006260:	9904      	ldr	r1, [sp, #16]
 8006262:	4a53      	ldr	r2, [pc, #332]	; (80063b0 <_strtod_l+0x960>)
 8006264:	465b      	mov	r3, fp
 8006266:	2900      	cmp	r1, #0
 8006268:	f000 8081 	beq.w	800636e <_strtod_l+0x91e>
 800626c:	ea02 010b 	and.w	r1, r2, fp
 8006270:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006274:	dc7b      	bgt.n	800636e <_strtod_l+0x91e>
 8006276:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800627a:	f77f aea9 	ble.w	8005fd0 <_strtod_l+0x580>
 800627e:	4b4d      	ldr	r3, [pc, #308]	; (80063b4 <_strtod_l+0x964>)
 8006280:	4650      	mov	r0, sl
 8006282:	4659      	mov	r1, fp
 8006284:	2200      	movs	r2, #0
 8006286:	f7fa f9bf 	bl	8000608 <__aeabi_dmul>
 800628a:	460b      	mov	r3, r1
 800628c:	4303      	orrs	r3, r0
 800628e:	bf08      	it	eq
 8006290:	2322      	moveq	r3, #34	; 0x22
 8006292:	4682      	mov	sl, r0
 8006294:	468b      	mov	fp, r1
 8006296:	bf08      	it	eq
 8006298:	6023      	streq	r3, [r4, #0]
 800629a:	e62b      	b.n	8005ef4 <_strtod_l+0x4a4>
 800629c:	f04f 32ff 	mov.w	r2, #4294967295
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	ea03 0a0a 	and.w	sl, r3, sl
 80062a8:	e6e3      	b.n	8006072 <_strtod_l+0x622>
 80062aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80062ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80062b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80062b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80062ba:	fa01 f308 	lsl.w	r3, r1, r8
 80062be:	9308      	str	r3, [sp, #32]
 80062c0:	910d      	str	r1, [sp, #52]	; 0x34
 80062c2:	e746      	b.n	8006152 <_strtod_l+0x702>
 80062c4:	2300      	movs	r3, #0
 80062c6:	9308      	str	r3, [sp, #32]
 80062c8:	2301      	movs	r3, #1
 80062ca:	930d      	str	r3, [sp, #52]	; 0x34
 80062cc:	e741      	b.n	8006152 <_strtod_l+0x702>
 80062ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062d0:	4642      	mov	r2, r8
 80062d2:	4620      	mov	r0, r4
 80062d4:	f001 febe 	bl	8008054 <__lshift>
 80062d8:	9018      	str	r0, [sp, #96]	; 0x60
 80062da:	2800      	cmp	r0, #0
 80062dc:	f47f af6b 	bne.w	80061b6 <_strtod_l+0x766>
 80062e0:	e5fe      	b.n	8005ee0 <_strtod_l+0x490>
 80062e2:	465f      	mov	r7, fp
 80062e4:	d16e      	bne.n	80063c4 <_strtod_l+0x974>
 80062e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062ec:	b342      	cbz	r2, 8006340 <_strtod_l+0x8f0>
 80062ee:	4a32      	ldr	r2, [pc, #200]	; (80063b8 <_strtod_l+0x968>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d128      	bne.n	8006346 <_strtod_l+0x8f6>
 80062f4:	9b04      	ldr	r3, [sp, #16]
 80062f6:	4651      	mov	r1, sl
 80062f8:	b1eb      	cbz	r3, 8006336 <_strtod_l+0x8e6>
 80062fa:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <_strtod_l+0x960>)
 80062fc:	403b      	ands	r3, r7
 80062fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	d819      	bhi.n	800633c <_strtod_l+0x8ec>
 8006308:	0d1b      	lsrs	r3, r3, #20
 800630a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	4299      	cmp	r1, r3
 8006314:	d117      	bne.n	8006346 <_strtod_l+0x8f6>
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <_strtod_l+0x96c>)
 8006318:	429f      	cmp	r7, r3
 800631a:	d102      	bne.n	8006322 <_strtod_l+0x8d2>
 800631c:	3101      	adds	r1, #1
 800631e:	f43f addf 	beq.w	8005ee0 <_strtod_l+0x490>
 8006322:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <_strtod_l+0x960>)
 8006324:	403b      	ands	r3, r7
 8006326:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800632a:	f04f 0a00 	mov.w	sl, #0
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1a4      	bne.n	800627e <_strtod_l+0x82e>
 8006334:	e5de      	b.n	8005ef4 <_strtod_l+0x4a4>
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	e7ea      	b.n	8006312 <_strtod_l+0x8c2>
 800633c:	4613      	mov	r3, r2
 800633e:	e7e8      	b.n	8006312 <_strtod_l+0x8c2>
 8006340:	ea53 030a 	orrs.w	r3, r3, sl
 8006344:	d08c      	beq.n	8006260 <_strtod_l+0x810>
 8006346:	9b08      	ldr	r3, [sp, #32]
 8006348:	b1db      	cbz	r3, 8006382 <_strtod_l+0x932>
 800634a:	423b      	tst	r3, r7
 800634c:	d0ef      	beq.n	800632e <_strtod_l+0x8de>
 800634e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006350:	9a04      	ldr	r2, [sp, #16]
 8006352:	4650      	mov	r0, sl
 8006354:	4659      	mov	r1, fp
 8006356:	b1c3      	cbz	r3, 800638a <_strtod_l+0x93a>
 8006358:	f7ff fb5e 	bl	8005a18 <sulp>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	ec51 0b18 	vmov	r0, r1, d8
 8006364:	f7f9 ff9a 	bl	800029c <__adddf3>
 8006368:	4682      	mov	sl, r0
 800636a:	468b      	mov	fp, r1
 800636c:	e7df      	b.n	800632e <_strtod_l+0x8de>
 800636e:	4013      	ands	r3, r2
 8006370:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006374:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006378:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800637c:	f04f 3aff 	mov.w	sl, #4294967295
 8006380:	e7d5      	b.n	800632e <_strtod_l+0x8de>
 8006382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006384:	ea13 0f0a 	tst.w	r3, sl
 8006388:	e7e0      	b.n	800634c <_strtod_l+0x8fc>
 800638a:	f7ff fb45 	bl	8005a18 <sulp>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	ec51 0b18 	vmov	r0, r1, d8
 8006396:	f7f9 ff7f 	bl	8000298 <__aeabi_dsub>
 800639a:	2200      	movs	r2, #0
 800639c:	2300      	movs	r3, #0
 800639e:	4682      	mov	sl, r0
 80063a0:	468b      	mov	fp, r1
 80063a2:	f7fa fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d0c1      	beq.n	800632e <_strtod_l+0x8de>
 80063aa:	e611      	b.n	8005fd0 <_strtod_l+0x580>
 80063ac:	fffffc02 	.word	0xfffffc02
 80063b0:	7ff00000 	.word	0x7ff00000
 80063b4:	39500000 	.word	0x39500000
 80063b8:	000fffff 	.word	0x000fffff
 80063bc:	7fefffff 	.word	0x7fefffff
 80063c0:	0800a540 	.word	0x0800a540
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	f002 f832 	bl	8008430 <__ratio>
 80063cc:	ec59 8b10 	vmov	r8, r9, d0
 80063d0:	ee10 0a10 	vmov	r0, s0
 80063d4:	2200      	movs	r2, #0
 80063d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063da:	4649      	mov	r1, r9
 80063dc:	f7fa fb90 	bl	8000b00 <__aeabi_dcmple>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d07a      	beq.n	80064da <_strtod_l+0xa8a>
 80063e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d04a      	beq.n	8006480 <_strtod_l+0xa30>
 80063ea:	4b95      	ldr	r3, [pc, #596]	; (8006640 <_strtod_l+0xbf0>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006640 <_strtod_l+0xbf0>
 80063f6:	f04f 0800 	mov.w	r8, #0
 80063fa:	4b92      	ldr	r3, [pc, #584]	; (8006644 <_strtod_l+0xbf4>)
 80063fc:	403b      	ands	r3, r7
 80063fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006402:	4b91      	ldr	r3, [pc, #580]	; (8006648 <_strtod_l+0xbf8>)
 8006404:	429a      	cmp	r2, r3
 8006406:	f040 80b0 	bne.w	800656a <_strtod_l+0xb1a>
 800640a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800640e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006412:	ec4b ab10 	vmov	d0, sl, fp
 8006416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800641a:	f001 ff31 	bl	8008280 <__ulp>
 800641e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006422:	ec53 2b10 	vmov	r2, r3, d0
 8006426:	f7fa f8ef 	bl	8000608 <__aeabi_dmul>
 800642a:	4652      	mov	r2, sl
 800642c:	465b      	mov	r3, fp
 800642e:	f7f9 ff35 	bl	800029c <__adddf3>
 8006432:	460b      	mov	r3, r1
 8006434:	4983      	ldr	r1, [pc, #524]	; (8006644 <_strtod_l+0xbf4>)
 8006436:	4a85      	ldr	r2, [pc, #532]	; (800664c <_strtod_l+0xbfc>)
 8006438:	4019      	ands	r1, r3
 800643a:	4291      	cmp	r1, r2
 800643c:	4682      	mov	sl, r0
 800643e:	d960      	bls.n	8006502 <_strtod_l+0xab2>
 8006440:	ee18 3a90 	vmov	r3, s17
 8006444:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006448:	4293      	cmp	r3, r2
 800644a:	d104      	bne.n	8006456 <_strtod_l+0xa06>
 800644c:	ee18 3a10 	vmov	r3, s16
 8006450:	3301      	adds	r3, #1
 8006452:	f43f ad45 	beq.w	8005ee0 <_strtod_l+0x490>
 8006456:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006658 <_strtod_l+0xc08>
 800645a:	f04f 3aff 	mov.w	sl, #4294967295
 800645e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006460:	4620      	mov	r0, r4
 8006462:	f001 fbdb 	bl	8007c1c <_Bfree>
 8006466:	9905      	ldr	r1, [sp, #20]
 8006468:	4620      	mov	r0, r4
 800646a:	f001 fbd7 	bl	8007c1c <_Bfree>
 800646e:	4631      	mov	r1, r6
 8006470:	4620      	mov	r0, r4
 8006472:	f001 fbd3 	bl	8007c1c <_Bfree>
 8006476:	4629      	mov	r1, r5
 8006478:	4620      	mov	r0, r4
 800647a:	f001 fbcf 	bl	8007c1c <_Bfree>
 800647e:	e61a      	b.n	80060b6 <_strtod_l+0x666>
 8006480:	f1ba 0f00 	cmp.w	sl, #0
 8006484:	d11b      	bne.n	80064be <_strtod_l+0xa6e>
 8006486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800648a:	b9f3      	cbnz	r3, 80064ca <_strtod_l+0xa7a>
 800648c:	4b6c      	ldr	r3, [pc, #432]	; (8006640 <_strtod_l+0xbf0>)
 800648e:	2200      	movs	r2, #0
 8006490:	4640      	mov	r0, r8
 8006492:	4649      	mov	r1, r9
 8006494:	f7fa fb2a 	bl	8000aec <__aeabi_dcmplt>
 8006498:	b9d0      	cbnz	r0, 80064d0 <_strtod_l+0xa80>
 800649a:	4640      	mov	r0, r8
 800649c:	4649      	mov	r1, r9
 800649e:	4b6c      	ldr	r3, [pc, #432]	; (8006650 <_strtod_l+0xc00>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	f7fa f8b1 	bl	8000608 <__aeabi_dmul>
 80064a6:	4680      	mov	r8, r0
 80064a8:	4689      	mov	r9, r1
 80064aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80064b2:	9315      	str	r3, [sp, #84]	; 0x54
 80064b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80064b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80064bc:	e79d      	b.n	80063fa <_strtod_l+0x9aa>
 80064be:	f1ba 0f01 	cmp.w	sl, #1
 80064c2:	d102      	bne.n	80064ca <_strtod_l+0xa7a>
 80064c4:	2f00      	cmp	r7, #0
 80064c6:	f43f ad83 	beq.w	8005fd0 <_strtod_l+0x580>
 80064ca:	4b62      	ldr	r3, [pc, #392]	; (8006654 <_strtod_l+0xc04>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	e78e      	b.n	80063ee <_strtod_l+0x99e>
 80064d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006650 <_strtod_l+0xc00>
 80064d4:	f04f 0800 	mov.w	r8, #0
 80064d8:	e7e7      	b.n	80064aa <_strtod_l+0xa5a>
 80064da:	4b5d      	ldr	r3, [pc, #372]	; (8006650 <_strtod_l+0xc00>)
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	2200      	movs	r2, #0
 80064e2:	f7fa f891 	bl	8000608 <__aeabi_dmul>
 80064e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e8:	4680      	mov	r8, r0
 80064ea:	4689      	mov	r9, r1
 80064ec:	b933      	cbnz	r3, 80064fc <_strtod_l+0xaac>
 80064ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064f2:	900e      	str	r0, [sp, #56]	; 0x38
 80064f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80064f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80064fa:	e7dd      	b.n	80064b8 <_strtod_l+0xa68>
 80064fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006500:	e7f9      	b.n	80064f6 <_strtod_l+0xaa6>
 8006502:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006506:	9b04      	ldr	r3, [sp, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1a8      	bne.n	800645e <_strtod_l+0xa0e>
 800650c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006512:	0d1b      	lsrs	r3, r3, #20
 8006514:	051b      	lsls	r3, r3, #20
 8006516:	429a      	cmp	r2, r3
 8006518:	d1a1      	bne.n	800645e <_strtod_l+0xa0e>
 800651a:	4640      	mov	r0, r8
 800651c:	4649      	mov	r1, r9
 800651e:	f7fa fbd3 	bl	8000cc8 <__aeabi_d2lz>
 8006522:	f7fa f843 	bl	80005ac <__aeabi_l2d>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7f9 feb3 	bl	8000298 <__aeabi_dsub>
 8006532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006538:	ea43 030a 	orr.w	r3, r3, sl
 800653c:	4313      	orrs	r3, r2
 800653e:	4680      	mov	r8, r0
 8006540:	4689      	mov	r9, r1
 8006542:	d055      	beq.n	80065f0 <_strtod_l+0xba0>
 8006544:	a336      	add	r3, pc, #216	; (adr r3, 8006620 <_strtod_l+0xbd0>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7fa facf 	bl	8000aec <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	f47f acd0 	bne.w	8005ef4 <_strtod_l+0x4a4>
 8006554:	a334      	add	r3, pc, #208	; (adr r3, 8006628 <_strtod_l+0xbd8>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7fa fae3 	bl	8000b28 <__aeabi_dcmpgt>
 8006562:	2800      	cmp	r0, #0
 8006564:	f43f af7b 	beq.w	800645e <_strtod_l+0xa0e>
 8006568:	e4c4      	b.n	8005ef4 <_strtod_l+0x4a4>
 800656a:	9b04      	ldr	r3, [sp, #16]
 800656c:	b333      	cbz	r3, 80065bc <_strtod_l+0xb6c>
 800656e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006570:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006574:	d822      	bhi.n	80065bc <_strtod_l+0xb6c>
 8006576:	a32e      	add	r3, pc, #184	; (adr r3, 8006630 <_strtod_l+0xbe0>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	4640      	mov	r0, r8
 800657e:	4649      	mov	r1, r9
 8006580:	f7fa fabe 	bl	8000b00 <__aeabi_dcmple>
 8006584:	b1a0      	cbz	r0, 80065b0 <_strtod_l+0xb60>
 8006586:	4649      	mov	r1, r9
 8006588:	4640      	mov	r0, r8
 800658a:	f7fa fb15 	bl	8000bb8 <__aeabi_d2uiz>
 800658e:	2801      	cmp	r0, #1
 8006590:	bf38      	it	cc
 8006592:	2001      	movcc	r0, #1
 8006594:	f7f9 ffbe 	bl	8000514 <__aeabi_ui2d>
 8006598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800659a:	4680      	mov	r8, r0
 800659c:	4689      	mov	r9, r1
 800659e:	bb23      	cbnz	r3, 80065ea <_strtod_l+0xb9a>
 80065a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065a4:	9010      	str	r0, [sp, #64]	; 0x40
 80065a6:	9311      	str	r3, [sp, #68]	; 0x44
 80065a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80065b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065c0:	eeb0 0a48 	vmov.f32	s0, s16
 80065c4:	eef0 0a68 	vmov.f32	s1, s17
 80065c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80065cc:	f001 fe58 	bl	8008280 <__ulp>
 80065d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80065d4:	ec53 2b10 	vmov	r2, r3, d0
 80065d8:	f7fa f816 	bl	8000608 <__aeabi_dmul>
 80065dc:	ec53 2b18 	vmov	r2, r3, d8
 80065e0:	f7f9 fe5c 	bl	800029c <__adddf3>
 80065e4:	4682      	mov	sl, r0
 80065e6:	468b      	mov	fp, r1
 80065e8:	e78d      	b.n	8006506 <_strtod_l+0xab6>
 80065ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80065ee:	e7db      	b.n	80065a8 <_strtod_l+0xb58>
 80065f0:	a311      	add	r3, pc, #68	; (adr r3, 8006638 <_strtod_l+0xbe8>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa fa79 	bl	8000aec <__aeabi_dcmplt>
 80065fa:	e7b2      	b.n	8006562 <_strtod_l+0xb12>
 80065fc:	2300      	movs	r3, #0
 80065fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	f7ff ba6b 	b.w	8005ae0 <_strtod_l+0x90>
 800660a:	2a65      	cmp	r2, #101	; 0x65
 800660c:	f43f ab5f 	beq.w	8005cce <_strtod_l+0x27e>
 8006610:	2a45      	cmp	r2, #69	; 0x45
 8006612:	f43f ab5c 	beq.w	8005cce <_strtod_l+0x27e>
 8006616:	2301      	movs	r3, #1
 8006618:	f7ff bb94 	b.w	8005d44 <_strtod_l+0x2f4>
 800661c:	f3af 8000 	nop.w
 8006620:	94a03595 	.word	0x94a03595
 8006624:	3fdfffff 	.word	0x3fdfffff
 8006628:	35afe535 	.word	0x35afe535
 800662c:	3fe00000 	.word	0x3fe00000
 8006630:	ffc00000 	.word	0xffc00000
 8006634:	41dfffff 	.word	0x41dfffff
 8006638:	94a03595 	.word	0x94a03595
 800663c:	3fcfffff 	.word	0x3fcfffff
 8006640:	3ff00000 	.word	0x3ff00000
 8006644:	7ff00000 	.word	0x7ff00000
 8006648:	7fe00000 	.word	0x7fe00000
 800664c:	7c9fffff 	.word	0x7c9fffff
 8006650:	3fe00000 	.word	0x3fe00000
 8006654:	bff00000 	.word	0xbff00000
 8006658:	7fefffff 	.word	0x7fefffff

0800665c <_strtod_r>:
 800665c:	4b01      	ldr	r3, [pc, #4]	; (8006664 <_strtod_r+0x8>)
 800665e:	f7ff b9f7 	b.w	8005a50 <_strtod_l>
 8006662:	bf00      	nop
 8006664:	20000bd4 	.word	0x20000bd4

08006668 <_strtol_l.constprop.0>:
 8006668:	2b01      	cmp	r3, #1
 800666a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800666e:	d001      	beq.n	8006674 <_strtol_l.constprop.0+0xc>
 8006670:	2b24      	cmp	r3, #36	; 0x24
 8006672:	d906      	bls.n	8006682 <_strtol_l.constprop.0+0x1a>
 8006674:	f7fe faca 	bl	8004c0c <__errno>
 8006678:	2316      	movs	r3, #22
 800667a:	6003      	str	r3, [r0, #0]
 800667c:	2000      	movs	r0, #0
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006768 <_strtol_l.constprop.0+0x100>
 8006686:	460d      	mov	r5, r1
 8006688:	462e      	mov	r6, r5
 800668a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800668e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006692:	f017 0708 	ands.w	r7, r7, #8
 8006696:	d1f7      	bne.n	8006688 <_strtol_l.constprop.0+0x20>
 8006698:	2c2d      	cmp	r4, #45	; 0x2d
 800669a:	d132      	bne.n	8006702 <_strtol_l.constprop.0+0x9a>
 800669c:	782c      	ldrb	r4, [r5, #0]
 800669e:	2701      	movs	r7, #1
 80066a0:	1cb5      	adds	r5, r6, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d05b      	beq.n	800675e <_strtol_l.constprop.0+0xf6>
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d109      	bne.n	80066be <_strtol_l.constprop.0+0x56>
 80066aa:	2c30      	cmp	r4, #48	; 0x30
 80066ac:	d107      	bne.n	80066be <_strtol_l.constprop.0+0x56>
 80066ae:	782c      	ldrb	r4, [r5, #0]
 80066b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80066b4:	2c58      	cmp	r4, #88	; 0x58
 80066b6:	d14d      	bne.n	8006754 <_strtol_l.constprop.0+0xec>
 80066b8:	786c      	ldrb	r4, [r5, #1]
 80066ba:	2310      	movs	r3, #16
 80066bc:	3502      	adds	r5, #2
 80066be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80066c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066c6:	f04f 0c00 	mov.w	ip, #0
 80066ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80066ce:	4666      	mov	r6, ip
 80066d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80066d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80066d8:	f1be 0f09 	cmp.w	lr, #9
 80066dc:	d816      	bhi.n	800670c <_strtol_l.constprop.0+0xa4>
 80066de:	4674      	mov	r4, lr
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	dd24      	ble.n	800672e <_strtol_l.constprop.0+0xc6>
 80066e4:	f1bc 0f00 	cmp.w	ip, #0
 80066e8:	db1e      	blt.n	8006728 <_strtol_l.constprop.0+0xc0>
 80066ea:	45b1      	cmp	r9, r6
 80066ec:	d31c      	bcc.n	8006728 <_strtol_l.constprop.0+0xc0>
 80066ee:	d101      	bne.n	80066f4 <_strtol_l.constprop.0+0x8c>
 80066f0:	45a2      	cmp	sl, r4
 80066f2:	db19      	blt.n	8006728 <_strtol_l.constprop.0+0xc0>
 80066f4:	fb06 4603 	mla	r6, r6, r3, r4
 80066f8:	f04f 0c01 	mov.w	ip, #1
 80066fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006700:	e7e8      	b.n	80066d4 <_strtol_l.constprop.0+0x6c>
 8006702:	2c2b      	cmp	r4, #43	; 0x2b
 8006704:	bf04      	itt	eq
 8006706:	782c      	ldrbeq	r4, [r5, #0]
 8006708:	1cb5      	addeq	r5, r6, #2
 800670a:	e7ca      	b.n	80066a2 <_strtol_l.constprop.0+0x3a>
 800670c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006710:	f1be 0f19 	cmp.w	lr, #25
 8006714:	d801      	bhi.n	800671a <_strtol_l.constprop.0+0xb2>
 8006716:	3c37      	subs	r4, #55	; 0x37
 8006718:	e7e2      	b.n	80066e0 <_strtol_l.constprop.0+0x78>
 800671a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800671e:	f1be 0f19 	cmp.w	lr, #25
 8006722:	d804      	bhi.n	800672e <_strtol_l.constprop.0+0xc6>
 8006724:	3c57      	subs	r4, #87	; 0x57
 8006726:	e7db      	b.n	80066e0 <_strtol_l.constprop.0+0x78>
 8006728:	f04f 3cff 	mov.w	ip, #4294967295
 800672c:	e7e6      	b.n	80066fc <_strtol_l.constprop.0+0x94>
 800672e:	f1bc 0f00 	cmp.w	ip, #0
 8006732:	da05      	bge.n	8006740 <_strtol_l.constprop.0+0xd8>
 8006734:	2322      	movs	r3, #34	; 0x22
 8006736:	6003      	str	r3, [r0, #0]
 8006738:	4646      	mov	r6, r8
 800673a:	b942      	cbnz	r2, 800674e <_strtol_l.constprop.0+0xe6>
 800673c:	4630      	mov	r0, r6
 800673e:	e79e      	b.n	800667e <_strtol_l.constprop.0+0x16>
 8006740:	b107      	cbz	r7, 8006744 <_strtol_l.constprop.0+0xdc>
 8006742:	4276      	negs	r6, r6
 8006744:	2a00      	cmp	r2, #0
 8006746:	d0f9      	beq.n	800673c <_strtol_l.constprop.0+0xd4>
 8006748:	f1bc 0f00 	cmp.w	ip, #0
 800674c:	d000      	beq.n	8006750 <_strtol_l.constprop.0+0xe8>
 800674e:	1e69      	subs	r1, r5, #1
 8006750:	6011      	str	r1, [r2, #0]
 8006752:	e7f3      	b.n	800673c <_strtol_l.constprop.0+0xd4>
 8006754:	2430      	movs	r4, #48	; 0x30
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1b1      	bne.n	80066be <_strtol_l.constprop.0+0x56>
 800675a:	2308      	movs	r3, #8
 800675c:	e7af      	b.n	80066be <_strtol_l.constprop.0+0x56>
 800675e:	2c30      	cmp	r4, #48	; 0x30
 8006760:	d0a5      	beq.n	80066ae <_strtol_l.constprop.0+0x46>
 8006762:	230a      	movs	r3, #10
 8006764:	e7ab      	b.n	80066be <_strtol_l.constprop.0+0x56>
 8006766:	bf00      	nop
 8006768:	0800a569 	.word	0x0800a569

0800676c <_strtol_r>:
 800676c:	f7ff bf7c 	b.w	8006668 <_strtol_l.constprop.0>

08006770 <quorem>:
 8006770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	6903      	ldr	r3, [r0, #16]
 8006776:	690c      	ldr	r4, [r1, #16]
 8006778:	42a3      	cmp	r3, r4
 800677a:	4607      	mov	r7, r0
 800677c:	f2c0 8081 	blt.w	8006882 <quorem+0x112>
 8006780:	3c01      	subs	r4, #1
 8006782:	f101 0814 	add.w	r8, r1, #20
 8006786:	f100 0514 	add.w	r5, r0, #20
 800678a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006798:	3301      	adds	r3, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80067a8:	d331      	bcc.n	800680e <quorem+0x9e>
 80067aa:	f04f 0e00 	mov.w	lr, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	46ac      	mov	ip, r5
 80067b2:	46f2      	mov	sl, lr
 80067b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80067b8:	b293      	uxth	r3, r2
 80067ba:	fb06 e303 	mla	r3, r6, r3, lr
 80067be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	ebaa 0303 	sub.w	r3, sl, r3
 80067c8:	f8dc a000 	ldr.w	sl, [ip]
 80067cc:	0c12      	lsrs	r2, r2, #16
 80067ce:	fa13 f38a 	uxtah	r3, r3, sl
 80067d2:	fb06 e202 	mla	r2, r6, r2, lr
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067de:	b292      	uxth	r2, r2
 80067e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80067ec:	4581      	cmp	r9, r0
 80067ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067f2:	f84c 3b04 	str.w	r3, [ip], #4
 80067f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067fa:	d2db      	bcs.n	80067b4 <quorem+0x44>
 80067fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006800:	b92b      	cbnz	r3, 800680e <quorem+0x9e>
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	3b04      	subs	r3, #4
 8006806:	429d      	cmp	r5, r3
 8006808:	461a      	mov	r2, r3
 800680a:	d32e      	bcc.n	800686a <quorem+0xfa>
 800680c:	613c      	str	r4, [r7, #16]
 800680e:	4638      	mov	r0, r7
 8006810:	f001 fc90 	bl	8008134 <__mcmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	db24      	blt.n	8006862 <quorem+0xf2>
 8006818:	3601      	adds	r6, #1
 800681a:	4628      	mov	r0, r5
 800681c:	f04f 0c00 	mov.w	ip, #0
 8006820:	f858 2b04 	ldr.w	r2, [r8], #4
 8006824:	f8d0 e000 	ldr.w	lr, [r0]
 8006828:	b293      	uxth	r3, r2
 800682a:	ebac 0303 	sub.w	r3, ip, r3
 800682e:	0c12      	lsrs	r2, r2, #16
 8006830:	fa13 f38e 	uxtah	r3, r3, lr
 8006834:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800683c:	b29b      	uxth	r3, r3
 800683e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006842:	45c1      	cmp	r9, r8
 8006844:	f840 3b04 	str.w	r3, [r0], #4
 8006848:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800684c:	d2e8      	bcs.n	8006820 <quorem+0xb0>
 800684e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006856:	b922      	cbnz	r2, 8006862 <quorem+0xf2>
 8006858:	3b04      	subs	r3, #4
 800685a:	429d      	cmp	r5, r3
 800685c:	461a      	mov	r2, r3
 800685e:	d30a      	bcc.n	8006876 <quorem+0x106>
 8006860:	613c      	str	r4, [r7, #16]
 8006862:	4630      	mov	r0, r6
 8006864:	b003      	add	sp, #12
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	3b04      	subs	r3, #4
 800686e:	2a00      	cmp	r2, #0
 8006870:	d1cc      	bne.n	800680c <quorem+0x9c>
 8006872:	3c01      	subs	r4, #1
 8006874:	e7c7      	b.n	8006806 <quorem+0x96>
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	3b04      	subs	r3, #4
 800687a:	2a00      	cmp	r2, #0
 800687c:	d1f0      	bne.n	8006860 <quorem+0xf0>
 800687e:	3c01      	subs	r4, #1
 8006880:	e7eb      	b.n	800685a <quorem+0xea>
 8006882:	2000      	movs	r0, #0
 8006884:	e7ee      	b.n	8006864 <quorem+0xf4>
	...

08006888 <_dtoa_r>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	ed2d 8b04 	vpush	{d8-d9}
 8006890:	ec57 6b10 	vmov	r6, r7, d0
 8006894:	b093      	sub	sp, #76	; 0x4c
 8006896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006898:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800689c:	9106      	str	r1, [sp, #24]
 800689e:	ee10 aa10 	vmov	sl, s0
 80068a2:	4604      	mov	r4, r0
 80068a4:	9209      	str	r2, [sp, #36]	; 0x24
 80068a6:	930c      	str	r3, [sp, #48]	; 0x30
 80068a8:	46bb      	mov	fp, r7
 80068aa:	b975      	cbnz	r5, 80068ca <_dtoa_r+0x42>
 80068ac:	2010      	movs	r0, #16
 80068ae:	f001 f94d 	bl	8007b4c <malloc>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6260      	str	r0, [r4, #36]	; 0x24
 80068b6:	b920      	cbnz	r0, 80068c2 <_dtoa_r+0x3a>
 80068b8:	4ba7      	ldr	r3, [pc, #668]	; (8006b58 <_dtoa_r+0x2d0>)
 80068ba:	21ea      	movs	r1, #234	; 0xea
 80068bc:	48a7      	ldr	r0, [pc, #668]	; (8006b5c <_dtoa_r+0x2d4>)
 80068be:	f002 f8bd 	bl	8008a3c <__assert_func>
 80068c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068c6:	6005      	str	r5, [r0, #0]
 80068c8:	60c5      	str	r5, [r0, #12]
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	b151      	cbz	r1, 80068e6 <_dtoa_r+0x5e>
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	604a      	str	r2, [r1, #4]
 80068d4:	2301      	movs	r3, #1
 80068d6:	4093      	lsls	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
 80068da:	4620      	mov	r0, r4
 80068dc:	f001 f99e 	bl	8007c1c <_Bfree>
 80068e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	1e3b      	subs	r3, r7, #0
 80068e8:	bfaa      	itet	ge
 80068ea:	2300      	movge	r3, #0
 80068ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80068f0:	f8c8 3000 	strge.w	r3, [r8]
 80068f4:	4b9a      	ldr	r3, [pc, #616]	; (8006b60 <_dtoa_r+0x2d8>)
 80068f6:	bfbc      	itt	lt
 80068f8:	2201      	movlt	r2, #1
 80068fa:	f8c8 2000 	strlt.w	r2, [r8]
 80068fe:	ea33 030b 	bics.w	r3, r3, fp
 8006902:	d11b      	bne.n	800693c <_dtoa_r+0xb4>
 8006904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006906:	f242 730f 	movw	r3, #9999	; 0x270f
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006910:	4333      	orrs	r3, r6
 8006912:	f000 8592 	beq.w	800743a <_dtoa_r+0xbb2>
 8006916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006918:	b963      	cbnz	r3, 8006934 <_dtoa_r+0xac>
 800691a:	4b92      	ldr	r3, [pc, #584]	; (8006b64 <_dtoa_r+0x2dc>)
 800691c:	e022      	b.n	8006964 <_dtoa_r+0xdc>
 800691e:	4b92      	ldr	r3, [pc, #584]	; (8006b68 <_dtoa_r+0x2e0>)
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	3308      	adds	r3, #8
 8006924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	9801      	ldr	r0, [sp, #4]
 800692a:	b013      	add	sp, #76	; 0x4c
 800692c:	ecbd 8b04 	vpop	{d8-d9}
 8006930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006934:	4b8b      	ldr	r3, [pc, #556]	; (8006b64 <_dtoa_r+0x2dc>)
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	3303      	adds	r3, #3
 800693a:	e7f3      	b.n	8006924 <_dtoa_r+0x9c>
 800693c:	2200      	movs	r2, #0
 800693e:	2300      	movs	r3, #0
 8006940:	4650      	mov	r0, sl
 8006942:	4659      	mov	r1, fp
 8006944:	f7fa f8c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006948:	ec4b ab19 	vmov	d9, sl, fp
 800694c:	4680      	mov	r8, r0
 800694e:	b158      	cbz	r0, 8006968 <_dtoa_r+0xe0>
 8006950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006952:	2301      	movs	r3, #1
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 856b 	beq.w	8007434 <_dtoa_r+0xbac>
 800695e:	4883      	ldr	r0, [pc, #524]	; (8006b6c <_dtoa_r+0x2e4>)
 8006960:	6018      	str	r0, [r3, #0]
 8006962:	1e43      	subs	r3, r0, #1
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	e7df      	b.n	8006928 <_dtoa_r+0xa0>
 8006968:	ec4b ab10 	vmov	d0, sl, fp
 800696c:	aa10      	add	r2, sp, #64	; 0x40
 800696e:	a911      	add	r1, sp, #68	; 0x44
 8006970:	4620      	mov	r0, r4
 8006972:	f001 fd01 	bl	8008378 <__d2b>
 8006976:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800697a:	ee08 0a10 	vmov	s16, r0
 800697e:	2d00      	cmp	r5, #0
 8006980:	f000 8084 	beq.w	8006a8c <_dtoa_r+0x204>
 8006984:	ee19 3a90 	vmov	r3, s19
 8006988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800698c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006990:	4656      	mov	r6, sl
 8006992:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800699a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800699e:	4b74      	ldr	r3, [pc, #464]	; (8006b70 <_dtoa_r+0x2e8>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	4630      	mov	r0, r6
 80069a4:	4639      	mov	r1, r7
 80069a6:	f7f9 fc77 	bl	8000298 <__aeabi_dsub>
 80069aa:	a365      	add	r3, pc, #404	; (adr r3, 8006b40 <_dtoa_r+0x2b8>)
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f7f9 fe2a 	bl	8000608 <__aeabi_dmul>
 80069b4:	a364      	add	r3, pc, #400	; (adr r3, 8006b48 <_dtoa_r+0x2c0>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f7f9 fc6f 	bl	800029c <__adddf3>
 80069be:	4606      	mov	r6, r0
 80069c0:	4628      	mov	r0, r5
 80069c2:	460f      	mov	r7, r1
 80069c4:	f7f9 fdb6 	bl	8000534 <__aeabi_i2d>
 80069c8:	a361      	add	r3, pc, #388	; (adr r3, 8006b50 <_dtoa_r+0x2c8>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fe1b 	bl	8000608 <__aeabi_dmul>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4630      	mov	r0, r6
 80069d8:	4639      	mov	r1, r7
 80069da:	f7f9 fc5f 	bl	800029c <__adddf3>
 80069de:	4606      	mov	r6, r0
 80069e0:	460f      	mov	r7, r1
 80069e2:	f7fa f8c1 	bl	8000b68 <__aeabi_d2iz>
 80069e6:	2200      	movs	r2, #0
 80069e8:	9000      	str	r0, [sp, #0]
 80069ea:	2300      	movs	r3, #0
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f7fa f87c 	bl	8000aec <__aeabi_dcmplt>
 80069f4:	b150      	cbz	r0, 8006a0c <_dtoa_r+0x184>
 80069f6:	9800      	ldr	r0, [sp, #0]
 80069f8:	f7f9 fd9c 	bl	8000534 <__aeabi_i2d>
 80069fc:	4632      	mov	r2, r6
 80069fe:	463b      	mov	r3, r7
 8006a00:	f7fa f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a04:	b910      	cbnz	r0, 8006a0c <_dtoa_r+0x184>
 8006a06:	9b00      	ldr	r3, [sp, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	9b00      	ldr	r3, [sp, #0]
 8006a0e:	2b16      	cmp	r3, #22
 8006a10:	d85a      	bhi.n	8006ac8 <_dtoa_r+0x240>
 8006a12:	9a00      	ldr	r2, [sp, #0]
 8006a14:	4b57      	ldr	r3, [pc, #348]	; (8006b74 <_dtoa_r+0x2ec>)
 8006a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	ec51 0b19 	vmov	r0, r1, d9
 8006a22:	f7fa f863 	bl	8000aec <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d050      	beq.n	8006acc <_dtoa_r+0x244>
 8006a2a:	9b00      	ldr	r3, [sp, #0]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2300      	movs	r3, #0
 8006a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a36:	1b5d      	subs	r5, r3, r5
 8006a38:	1e6b      	subs	r3, r5, #1
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	bf45      	ittet	mi
 8006a3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006a42:	9304      	strmi	r3, [sp, #16]
 8006a44:	2300      	movpl	r3, #0
 8006a46:	2300      	movmi	r3, #0
 8006a48:	bf4c      	ite	mi
 8006a4a:	9305      	strmi	r3, [sp, #20]
 8006a4c:	9304      	strpl	r3, [sp, #16]
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	db3d      	blt.n	8006ad0 <_dtoa_r+0x248>
 8006a54:	9b05      	ldr	r3, [sp, #20]
 8006a56:	9a00      	ldr	r2, [sp, #0]
 8006a58:	920a      	str	r2, [sp, #40]	; 0x28
 8006a5a:	4413      	add	r3, r2
 8006a5c:	9305      	str	r3, [sp, #20]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9307      	str	r3, [sp, #28]
 8006a62:	9b06      	ldr	r3, [sp, #24]
 8006a64:	2b09      	cmp	r3, #9
 8006a66:	f200 8089 	bhi.w	8006b7c <_dtoa_r+0x2f4>
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	bfc4      	itt	gt
 8006a6e:	3b04      	subgt	r3, #4
 8006a70:	9306      	strgt	r3, [sp, #24]
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	f1a3 0302 	sub.w	r3, r3, #2
 8006a78:	bfcc      	ite	gt
 8006a7a:	2500      	movgt	r5, #0
 8006a7c:	2501      	movle	r5, #1
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	f200 8087 	bhi.w	8006b92 <_dtoa_r+0x30a>
 8006a84:	e8df f003 	tbb	[pc, r3]
 8006a88:	59383a2d 	.word	0x59383a2d
 8006a8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a90:	441d      	add	r5, r3
 8006a92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	bfc1      	itttt	gt
 8006a9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006aa2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006aa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006aaa:	bfda      	itte	le
 8006aac:	f1c3 0320 	rsble	r3, r3, #32
 8006ab0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ab4:	4318      	orrgt	r0, r3
 8006ab6:	f7f9 fd2d 	bl	8000514 <__aeabi_ui2d>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4606      	mov	r6, r0
 8006abe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006ac2:	3d01      	subs	r5, #1
 8006ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8006ac6:	e76a      	b.n	800699e <_dtoa_r+0x116>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e7b2      	b.n	8006a32 <_dtoa_r+0x1aa>
 8006acc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ace:	e7b1      	b.n	8006a34 <_dtoa_r+0x1ac>
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	9a00      	ldr	r2, [sp, #0]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	4253      	negs	r3, r2
 8006ada:	9307      	str	r3, [sp, #28]
 8006adc:	2300      	movs	r3, #0
 8006ade:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae0:	e7bf      	b.n	8006a62 <_dtoa_r+0x1da>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9308      	str	r3, [sp, #32]
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dc55      	bgt.n	8006b98 <_dtoa_r+0x310>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006af2:	461a      	mov	r2, r3
 8006af4:	9209      	str	r2, [sp, #36]	; 0x24
 8006af6:	e00c      	b.n	8006b12 <_dtoa_r+0x28a>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e7f3      	b.n	8006ae4 <_dtoa_r+0x25c>
 8006afc:	2300      	movs	r3, #0
 8006afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b00:	9308      	str	r3, [sp, #32]
 8006b02:	9b00      	ldr	r3, [sp, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	9303      	str	r3, [sp, #12]
 8006b0e:	bfb8      	it	lt
 8006b10:	2301      	movlt	r3, #1
 8006b12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b14:	2200      	movs	r2, #0
 8006b16:	6042      	str	r2, [r0, #4]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	f102 0614 	add.w	r6, r2, #20
 8006b1e:	429e      	cmp	r6, r3
 8006b20:	6841      	ldr	r1, [r0, #4]
 8006b22:	d93d      	bls.n	8006ba0 <_dtoa_r+0x318>
 8006b24:	4620      	mov	r0, r4
 8006b26:	f001 f839 	bl	8007b9c <_Balloc>
 8006b2a:	9001      	str	r0, [sp, #4]
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d13b      	bne.n	8006ba8 <_dtoa_r+0x320>
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <_dtoa_r+0x2f0>)
 8006b32:	4602      	mov	r2, r0
 8006b34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b38:	e6c0      	b.n	80068bc <_dtoa_r+0x34>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e7df      	b.n	8006afe <_dtoa_r+0x276>
 8006b3e:	bf00      	nop
 8006b40:	636f4361 	.word	0x636f4361
 8006b44:	3fd287a7 	.word	0x3fd287a7
 8006b48:	8b60c8b3 	.word	0x8b60c8b3
 8006b4c:	3fc68a28 	.word	0x3fc68a28
 8006b50:	509f79fb 	.word	0x509f79fb
 8006b54:	3fd34413 	.word	0x3fd34413
 8006b58:	0800a676 	.word	0x0800a676
 8006b5c:	0800a68d 	.word	0x0800a68d
 8006b60:	7ff00000 	.word	0x7ff00000
 8006b64:	0800a672 	.word	0x0800a672
 8006b68:	0800a669 	.word	0x0800a669
 8006b6c:	0800a4ed 	.word	0x0800a4ed
 8006b70:	3ff80000 	.word	0x3ff80000
 8006b74:	0800a7f8 	.word	0x0800a7f8
 8006b78:	0800a6e8 	.word	0x0800a6e8
 8006b7c:	2501      	movs	r5, #1
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9306      	str	r3, [sp, #24]
 8006b82:	9508      	str	r5, [sp, #32]
 8006b84:	f04f 33ff 	mov.w	r3, #4294967295
 8006b88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2312      	movs	r3, #18
 8006b90:	e7b0      	b.n	8006af4 <_dtoa_r+0x26c>
 8006b92:	2301      	movs	r3, #1
 8006b94:	9308      	str	r3, [sp, #32]
 8006b96:	e7f5      	b.n	8006b84 <_dtoa_r+0x2fc>
 8006b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006b9e:	e7b8      	b.n	8006b12 <_dtoa_r+0x28a>
 8006ba0:	3101      	adds	r1, #1
 8006ba2:	6041      	str	r1, [r0, #4]
 8006ba4:	0052      	lsls	r2, r2, #1
 8006ba6:	e7b8      	b.n	8006b1a <_dtoa_r+0x292>
 8006ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006baa:	9a01      	ldr	r2, [sp, #4]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	2b0e      	cmp	r3, #14
 8006bb2:	f200 809d 	bhi.w	8006cf0 <_dtoa_r+0x468>
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	f000 809a 	beq.w	8006cf0 <_dtoa_r+0x468>
 8006bbc:	9b00      	ldr	r3, [sp, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dd32      	ble.n	8006c28 <_dtoa_r+0x3a0>
 8006bc2:	4ab7      	ldr	r2, [pc, #732]	; (8006ea0 <_dtoa_r+0x618>)
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bd0:	9b00      	ldr	r3, [sp, #0]
 8006bd2:	05d8      	lsls	r0, r3, #23
 8006bd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006bd8:	d516      	bpl.n	8006c08 <_dtoa_r+0x380>
 8006bda:	4bb2      	ldr	r3, [pc, #712]	; (8006ea4 <_dtoa_r+0x61c>)
 8006bdc:	ec51 0b19 	vmov	r0, r1, d9
 8006be0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006be4:	f7f9 fe3a 	bl	800085c <__aeabi_ddiv>
 8006be8:	f007 070f 	and.w	r7, r7, #15
 8006bec:	4682      	mov	sl, r0
 8006bee:	468b      	mov	fp, r1
 8006bf0:	2503      	movs	r5, #3
 8006bf2:	4eac      	ldr	r6, [pc, #688]	; (8006ea4 <_dtoa_r+0x61c>)
 8006bf4:	b957      	cbnz	r7, 8006c0c <_dtoa_r+0x384>
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	f7f9 fe2d 	bl	800085c <__aeabi_ddiv>
 8006c02:	4682      	mov	sl, r0
 8006c04:	468b      	mov	fp, r1
 8006c06:	e028      	b.n	8006c5a <_dtoa_r+0x3d2>
 8006c08:	2502      	movs	r5, #2
 8006c0a:	e7f2      	b.n	8006bf2 <_dtoa_r+0x36a>
 8006c0c:	07f9      	lsls	r1, r7, #31
 8006c0e:	d508      	bpl.n	8006c22 <_dtoa_r+0x39a>
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c18:	f7f9 fcf6 	bl	8000608 <__aeabi_dmul>
 8006c1c:	3501      	adds	r5, #1
 8006c1e:	4680      	mov	r8, r0
 8006c20:	4689      	mov	r9, r1
 8006c22:	107f      	asrs	r7, r7, #1
 8006c24:	3608      	adds	r6, #8
 8006c26:	e7e5      	b.n	8006bf4 <_dtoa_r+0x36c>
 8006c28:	f000 809b 	beq.w	8006d62 <_dtoa_r+0x4da>
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	4f9d      	ldr	r7, [pc, #628]	; (8006ea4 <_dtoa_r+0x61c>)
 8006c30:	425e      	negs	r6, r3
 8006c32:	4b9b      	ldr	r3, [pc, #620]	; (8006ea0 <_dtoa_r+0x618>)
 8006c34:	f006 020f 	and.w	r2, r6, #15
 8006c38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	ec51 0b19 	vmov	r0, r1, d9
 8006c44:	f7f9 fce0 	bl	8000608 <__aeabi_dmul>
 8006c48:	1136      	asrs	r6, r6, #4
 8006c4a:	4682      	mov	sl, r0
 8006c4c:	468b      	mov	fp, r1
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2502      	movs	r5, #2
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	d17a      	bne.n	8006d4c <_dtoa_r+0x4c4>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1d3      	bne.n	8006c02 <_dtoa_r+0x37a>
 8006c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8082 	beq.w	8006d66 <_dtoa_r+0x4de>
 8006c62:	4b91      	ldr	r3, [pc, #580]	; (8006ea8 <_dtoa_r+0x620>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	4650      	mov	r0, sl
 8006c68:	4659      	mov	r1, fp
 8006c6a:	f7f9 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d079      	beq.n	8006d66 <_dtoa_r+0x4de>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d076      	beq.n	8006d66 <_dtoa_r+0x4de>
 8006c78:	9b02      	ldr	r3, [sp, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dd36      	ble.n	8006cec <_dtoa_r+0x464>
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	4650      	mov	r0, sl
 8006c82:	4659      	mov	r1, fp
 8006c84:	1e5f      	subs	r7, r3, #1
 8006c86:	2200      	movs	r2, #0
 8006c88:	4b88      	ldr	r3, [pc, #544]	; (8006eac <_dtoa_r+0x624>)
 8006c8a:	f7f9 fcbd 	bl	8000608 <__aeabi_dmul>
 8006c8e:	9e02      	ldr	r6, [sp, #8]
 8006c90:	4682      	mov	sl, r0
 8006c92:	468b      	mov	fp, r1
 8006c94:	3501      	adds	r5, #1
 8006c96:	4628      	mov	r0, r5
 8006c98:	f7f9 fc4c 	bl	8000534 <__aeabi_i2d>
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	465b      	mov	r3, fp
 8006ca0:	f7f9 fcb2 	bl	8000608 <__aeabi_dmul>
 8006ca4:	4b82      	ldr	r3, [pc, #520]	; (8006eb0 <_dtoa_r+0x628>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f7f9 faf8 	bl	800029c <__adddf3>
 8006cac:	46d0      	mov	r8, sl
 8006cae:	46d9      	mov	r9, fp
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	d158      	bne.n	8006d6c <_dtoa_r+0x4e4>
 8006cba:	4b7e      	ldr	r3, [pc, #504]	; (8006eb4 <_dtoa_r+0x62c>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	f7f9 fae9 	bl	8000298 <__aeabi_dsub>
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	465b      	mov	r3, fp
 8006cca:	4680      	mov	r8, r0
 8006ccc:	4689      	mov	r9, r1
 8006cce:	f7f9 ff2b 	bl	8000b28 <__aeabi_dcmpgt>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	f040 8295 	bne.w	8007202 <_dtoa_r+0x97a>
 8006cd8:	4652      	mov	r2, sl
 8006cda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 ff03 	bl	8000aec <__aeabi_dcmplt>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f040 8289 	bne.w	80071fe <_dtoa_r+0x976>
 8006cec:	ec5b ab19 	vmov	sl, fp, d9
 8006cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f2c0 8148 	blt.w	8006f88 <_dtoa_r+0x700>
 8006cf8:	9a00      	ldr	r2, [sp, #0]
 8006cfa:	2a0e      	cmp	r2, #14
 8006cfc:	f300 8144 	bgt.w	8006f88 <_dtoa_r+0x700>
 8006d00:	4b67      	ldr	r3, [pc, #412]	; (8006ea0 <_dtoa_r+0x618>)
 8006d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f280 80d5 	bge.w	8006ebc <_dtoa_r+0x634>
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f300 80d1 	bgt.w	8006ebc <_dtoa_r+0x634>
 8006d1a:	f040 826f 	bne.w	80071fc <_dtoa_r+0x974>
 8006d1e:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <_dtoa_r+0x62c>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	4640      	mov	r0, r8
 8006d24:	4649      	mov	r1, r9
 8006d26:	f7f9 fc6f 	bl	8000608 <__aeabi_dmul>
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	f7f9 fef1 	bl	8000b14 <__aeabi_dcmpge>
 8006d32:	9e03      	ldr	r6, [sp, #12]
 8006d34:	4637      	mov	r7, r6
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f040 8245 	bne.w	80071c6 <_dtoa_r+0x93e>
 8006d3c:	9d01      	ldr	r5, [sp, #4]
 8006d3e:	2331      	movs	r3, #49	; 0x31
 8006d40:	f805 3b01 	strb.w	r3, [r5], #1
 8006d44:	9b00      	ldr	r3, [sp, #0]
 8006d46:	3301      	adds	r3, #1
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	e240      	b.n	80071ce <_dtoa_r+0x946>
 8006d4c:	07f2      	lsls	r2, r6, #31
 8006d4e:	d505      	bpl.n	8006d5c <_dtoa_r+0x4d4>
 8006d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d54:	f7f9 fc58 	bl	8000608 <__aeabi_dmul>
 8006d58:	3501      	adds	r5, #1
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	1076      	asrs	r6, r6, #1
 8006d5e:	3708      	adds	r7, #8
 8006d60:	e777      	b.n	8006c52 <_dtoa_r+0x3ca>
 8006d62:	2502      	movs	r5, #2
 8006d64:	e779      	b.n	8006c5a <_dtoa_r+0x3d2>
 8006d66:	9f00      	ldr	r7, [sp, #0]
 8006d68:	9e03      	ldr	r6, [sp, #12]
 8006d6a:	e794      	b.n	8006c96 <_dtoa_r+0x40e>
 8006d6c:	9901      	ldr	r1, [sp, #4]
 8006d6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ea0 <_dtoa_r+0x618>)
 8006d70:	4431      	add	r1, r6
 8006d72:	910d      	str	r1, [sp, #52]	; 0x34
 8006d74:	9908      	ldr	r1, [sp, #32]
 8006d76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	d043      	beq.n	8006e0a <_dtoa_r+0x582>
 8006d82:	494d      	ldr	r1, [pc, #308]	; (8006eb8 <_dtoa_r+0x630>)
 8006d84:	2000      	movs	r0, #0
 8006d86:	f7f9 fd69 	bl	800085c <__aeabi_ddiv>
 8006d8a:	4652      	mov	r2, sl
 8006d8c:	465b      	mov	r3, fp
 8006d8e:	f7f9 fa83 	bl	8000298 <__aeabi_dsub>
 8006d92:	9d01      	ldr	r5, [sp, #4]
 8006d94:	4682      	mov	sl, r0
 8006d96:	468b      	mov	fp, r1
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	f7f9 fee4 	bl	8000b68 <__aeabi_d2iz>
 8006da0:	4606      	mov	r6, r0
 8006da2:	f7f9 fbc7 	bl	8000534 <__aeabi_i2d>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4640      	mov	r0, r8
 8006dac:	4649      	mov	r1, r9
 8006dae:	f7f9 fa73 	bl	8000298 <__aeabi_dsub>
 8006db2:	3630      	adds	r6, #48	; 0x30
 8006db4:	f805 6b01 	strb.w	r6, [r5], #1
 8006db8:	4652      	mov	r2, sl
 8006dba:	465b      	mov	r3, fp
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	4689      	mov	r9, r1
 8006dc0:	f7f9 fe94 	bl	8000aec <__aeabi_dcmplt>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d163      	bne.n	8006e90 <_dtoa_r+0x608>
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	4936      	ldr	r1, [pc, #216]	; (8006ea8 <_dtoa_r+0x620>)
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f7f9 fa62 	bl	8000298 <__aeabi_dsub>
 8006dd4:	4652      	mov	r2, sl
 8006dd6:	465b      	mov	r3, fp
 8006dd8:	f7f9 fe88 	bl	8000aec <__aeabi_dcmplt>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f040 80b5 	bne.w	8006f4c <_dtoa_r+0x6c4>
 8006de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006de4:	429d      	cmp	r5, r3
 8006de6:	d081      	beq.n	8006cec <_dtoa_r+0x464>
 8006de8:	4b30      	ldr	r3, [pc, #192]	; (8006eac <_dtoa_r+0x624>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	4650      	mov	r0, sl
 8006dee:	4659      	mov	r1, fp
 8006df0:	f7f9 fc0a 	bl	8000608 <__aeabi_dmul>
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <_dtoa_r+0x624>)
 8006df6:	4682      	mov	sl, r0
 8006df8:	468b      	mov	fp, r1
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f7f9 fc02 	bl	8000608 <__aeabi_dmul>
 8006e04:	4680      	mov	r8, r0
 8006e06:	4689      	mov	r9, r1
 8006e08:	e7c6      	b.n	8006d98 <_dtoa_r+0x510>
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	f7f9 fbfb 	bl	8000608 <__aeabi_dmul>
 8006e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e14:	9d01      	ldr	r5, [sp, #4]
 8006e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e18:	4682      	mov	sl, r0
 8006e1a:	468b      	mov	fp, r1
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	4640      	mov	r0, r8
 8006e20:	f7f9 fea2 	bl	8000b68 <__aeabi_d2iz>
 8006e24:	4606      	mov	r6, r0
 8006e26:	f7f9 fb85 	bl	8000534 <__aeabi_i2d>
 8006e2a:	3630      	adds	r6, #48	; 0x30
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4640      	mov	r0, r8
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7f9 fa30 	bl	8000298 <__aeabi_dsub>
 8006e38:	f805 6b01 	strb.w	r6, [r5], #1
 8006e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	4680      	mov	r8, r0
 8006e42:	4689      	mov	r9, r1
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	d124      	bne.n	8006e94 <_dtoa_r+0x60c>
 8006e4a:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <_dtoa_r+0x630>)
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	4659      	mov	r1, fp
 8006e50:	f7f9 fa24 	bl	800029c <__adddf3>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fe64 	bl	8000b28 <__aeabi_dcmpgt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d173      	bne.n	8006f4c <_dtoa_r+0x6c4>
 8006e64:	4652      	mov	r2, sl
 8006e66:	465b      	mov	r3, fp
 8006e68:	4913      	ldr	r1, [pc, #76]	; (8006eb8 <_dtoa_r+0x630>)
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f7f9 fa14 	bl	8000298 <__aeabi_dsub>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4640      	mov	r0, r8
 8006e76:	4649      	mov	r1, r9
 8006e78:	f7f9 fe38 	bl	8000aec <__aeabi_dcmplt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f43f af35 	beq.w	8006cec <_dtoa_r+0x464>
 8006e82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e84:	1e6b      	subs	r3, r5, #1
 8006e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d0f8      	beq.n	8006e82 <_dtoa_r+0x5fa>
 8006e90:	9700      	str	r7, [sp, #0]
 8006e92:	e049      	b.n	8006f28 <_dtoa_r+0x6a0>
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <_dtoa_r+0x624>)
 8006e96:	f7f9 fbb7 	bl	8000608 <__aeabi_dmul>
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	4689      	mov	r9, r1
 8006e9e:	e7bd      	b.n	8006e1c <_dtoa_r+0x594>
 8006ea0:	0800a7f8 	.word	0x0800a7f8
 8006ea4:	0800a7d0 	.word	0x0800a7d0
 8006ea8:	3ff00000 	.word	0x3ff00000
 8006eac:	40240000 	.word	0x40240000
 8006eb0:	401c0000 	.word	0x401c0000
 8006eb4:	40140000 	.word	0x40140000
 8006eb8:	3fe00000 	.word	0x3fe00000
 8006ebc:	9d01      	ldr	r5, [sp, #4]
 8006ebe:	4656      	mov	r6, sl
 8006ec0:	465f      	mov	r7, fp
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7f9 fcc7 	bl	800085c <__aeabi_ddiv>
 8006ece:	f7f9 fe4b 	bl	8000b68 <__aeabi_d2iz>
 8006ed2:	4682      	mov	sl, r0
 8006ed4:	f7f9 fb2e 	bl	8000534 <__aeabi_i2d>
 8006ed8:	4642      	mov	r2, r8
 8006eda:	464b      	mov	r3, r9
 8006edc:	f7f9 fb94 	bl	8000608 <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006eec:	f7f9 f9d4 	bl	8000298 <__aeabi_dsub>
 8006ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ef4:	9e01      	ldr	r6, [sp, #4]
 8006ef6:	9f03      	ldr	r7, [sp, #12]
 8006ef8:	1bae      	subs	r6, r5, r6
 8006efa:	42b7      	cmp	r7, r6
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	d135      	bne.n	8006f6e <_dtoa_r+0x6e6>
 8006f02:	f7f9 f9cb 	bl	800029c <__adddf3>
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	f7f9 fe0b 	bl	8000b28 <__aeabi_dcmpgt>
 8006f12:	b9d0      	cbnz	r0, 8006f4a <_dtoa_r+0x6c2>
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 fddc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f20:	b110      	cbz	r0, 8006f28 <_dtoa_r+0x6a0>
 8006f22:	f01a 0f01 	tst.w	sl, #1
 8006f26:	d110      	bne.n	8006f4a <_dtoa_r+0x6c2>
 8006f28:	4620      	mov	r0, r4
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	f000 fe75 	bl	8007c1c <_Bfree>
 8006f32:	2300      	movs	r3, #0
 8006f34:	9800      	ldr	r0, [sp, #0]
 8006f36:	702b      	strb	r3, [r5, #0]
 8006f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	6018      	str	r0, [r3, #0]
 8006f3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f43f acf1 	beq.w	8006928 <_dtoa_r+0xa0>
 8006f46:	601d      	str	r5, [r3, #0]
 8006f48:	e4ee      	b.n	8006928 <_dtoa_r+0xa0>
 8006f4a:	9f00      	ldr	r7, [sp, #0]
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f54:	2a39      	cmp	r2, #57	; 0x39
 8006f56:	d106      	bne.n	8006f66 <_dtoa_r+0x6de>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d1f7      	bne.n	8006f4e <_dtoa_r+0x6c6>
 8006f5e:	9901      	ldr	r1, [sp, #4]
 8006f60:	2230      	movs	r2, #48	; 0x30
 8006f62:	3701      	adds	r7, #1
 8006f64:	700a      	strb	r2, [r1, #0]
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	3201      	adds	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	e790      	b.n	8006e90 <_dtoa_r+0x608>
 8006f6e:	4ba6      	ldr	r3, [pc, #664]	; (8007208 <_dtoa_r+0x980>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	f7f9 fb49 	bl	8000608 <__aeabi_dmul>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460f      	mov	r7, r1
 8006f7e:	f7f9 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d09d      	beq.n	8006ec2 <_dtoa_r+0x63a>
 8006f86:	e7cf      	b.n	8006f28 <_dtoa_r+0x6a0>
 8006f88:	9a08      	ldr	r2, [sp, #32]
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	f000 80d7 	beq.w	800713e <_dtoa_r+0x8b6>
 8006f90:	9a06      	ldr	r2, [sp, #24]
 8006f92:	2a01      	cmp	r2, #1
 8006f94:	f300 80ba 	bgt.w	800710c <_dtoa_r+0x884>
 8006f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	f000 80b2 	beq.w	8007104 <_dtoa_r+0x87c>
 8006fa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fa4:	9e07      	ldr	r6, [sp, #28]
 8006fa6:	9d04      	ldr	r5, [sp, #16]
 8006fa8:	9a04      	ldr	r2, [sp, #16]
 8006faa:	441a      	add	r2, r3
 8006fac:	9204      	str	r2, [sp, #16]
 8006fae:	9a05      	ldr	r2, [sp, #20]
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	441a      	add	r2, r3
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	9205      	str	r2, [sp, #20]
 8006fb8:	f000 ff32 	bl	8007e20 <__i2b>
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	dd0c      	ble.n	8006fdc <_dtoa_r+0x754>
 8006fc2:	9b05      	ldr	r3, [sp, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dd09      	ble.n	8006fdc <_dtoa_r+0x754>
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	9a04      	ldr	r2, [sp, #16]
 8006fcc:	bfa8      	it	ge
 8006fce:	462b      	movge	r3, r5
 8006fd0:	1ad2      	subs	r2, r2, r3
 8006fd2:	9204      	str	r2, [sp, #16]
 8006fd4:	9a05      	ldr	r2, [sp, #20]
 8006fd6:	1aed      	subs	r5, r5, r3
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	9305      	str	r3, [sp, #20]
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	b31b      	cbz	r3, 8007028 <_dtoa_r+0x7a0>
 8006fe0:	9b08      	ldr	r3, [sp, #32]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80af 	beq.w	8007146 <_dtoa_r+0x8be>
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	dd13      	ble.n	8007014 <_dtoa_r+0x78c>
 8006fec:	4639      	mov	r1, r7
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 ffd5 	bl	8007fa0 <__pow5mult>
 8006ff6:	ee18 2a10 	vmov	r2, s16
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 ff24 	bl	8007e4c <__multiply>
 8007004:	ee18 1a10 	vmov	r1, s16
 8007008:	4680      	mov	r8, r0
 800700a:	4620      	mov	r0, r4
 800700c:	f000 fe06 	bl	8007c1c <_Bfree>
 8007010:	ee08 8a10 	vmov	s16, r8
 8007014:	9b07      	ldr	r3, [sp, #28]
 8007016:	1b9a      	subs	r2, r3, r6
 8007018:	d006      	beq.n	8007028 <_dtoa_r+0x7a0>
 800701a:	ee18 1a10 	vmov	r1, s16
 800701e:	4620      	mov	r0, r4
 8007020:	f000 ffbe 	bl	8007fa0 <__pow5mult>
 8007024:	ee08 0a10 	vmov	s16, r0
 8007028:	2101      	movs	r1, #1
 800702a:	4620      	mov	r0, r4
 800702c:	f000 fef8 	bl	8007e20 <__i2b>
 8007030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	4606      	mov	r6, r0
 8007036:	f340 8088 	ble.w	800714a <_dtoa_r+0x8c2>
 800703a:	461a      	mov	r2, r3
 800703c:	4601      	mov	r1, r0
 800703e:	4620      	mov	r0, r4
 8007040:	f000 ffae 	bl	8007fa0 <__pow5mult>
 8007044:	9b06      	ldr	r3, [sp, #24]
 8007046:	2b01      	cmp	r3, #1
 8007048:	4606      	mov	r6, r0
 800704a:	f340 8081 	ble.w	8007150 <_dtoa_r+0x8c8>
 800704e:	f04f 0800 	mov.w	r8, #0
 8007052:	6933      	ldr	r3, [r6, #16]
 8007054:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007058:	6918      	ldr	r0, [r3, #16]
 800705a:	f000 fe91 	bl	8007d80 <__hi0bits>
 800705e:	f1c0 0020 	rsb	r0, r0, #32
 8007062:	9b05      	ldr	r3, [sp, #20]
 8007064:	4418      	add	r0, r3
 8007066:	f010 001f 	ands.w	r0, r0, #31
 800706a:	f000 8092 	beq.w	8007192 <_dtoa_r+0x90a>
 800706e:	f1c0 0320 	rsb	r3, r0, #32
 8007072:	2b04      	cmp	r3, #4
 8007074:	f340 808a 	ble.w	800718c <_dtoa_r+0x904>
 8007078:	f1c0 001c 	rsb	r0, r0, #28
 800707c:	9b04      	ldr	r3, [sp, #16]
 800707e:	4403      	add	r3, r0
 8007080:	9304      	str	r3, [sp, #16]
 8007082:	9b05      	ldr	r3, [sp, #20]
 8007084:	4403      	add	r3, r0
 8007086:	4405      	add	r5, r0
 8007088:	9305      	str	r3, [sp, #20]
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	dd07      	ble.n	80070a0 <_dtoa_r+0x818>
 8007090:	ee18 1a10 	vmov	r1, s16
 8007094:	461a      	mov	r2, r3
 8007096:	4620      	mov	r0, r4
 8007098:	f000 ffdc 	bl	8008054 <__lshift>
 800709c:	ee08 0a10 	vmov	s16, r0
 80070a0:	9b05      	ldr	r3, [sp, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dd05      	ble.n	80070b2 <_dtoa_r+0x82a>
 80070a6:	4631      	mov	r1, r6
 80070a8:	461a      	mov	r2, r3
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 ffd2 	bl	8008054 <__lshift>
 80070b0:	4606      	mov	r6, r0
 80070b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d06e      	beq.n	8007196 <_dtoa_r+0x90e>
 80070b8:	ee18 0a10 	vmov	r0, s16
 80070bc:	4631      	mov	r1, r6
 80070be:	f001 f839 	bl	8008134 <__mcmp>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	da67      	bge.n	8007196 <_dtoa_r+0x90e>
 80070c6:	9b00      	ldr	r3, [sp, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	ee18 1a10 	vmov	r1, s16
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	220a      	movs	r2, #10
 80070d2:	2300      	movs	r3, #0
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 fdc3 	bl	8007c60 <__multadd>
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	ee08 0a10 	vmov	s16, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 81b1 	beq.w	8007448 <_dtoa_r+0xbc0>
 80070e6:	2300      	movs	r3, #0
 80070e8:	4639      	mov	r1, r7
 80070ea:	220a      	movs	r2, #10
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fdb7 	bl	8007c60 <__multadd>
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	4607      	mov	r7, r0
 80070f8:	f300 808e 	bgt.w	8007218 <_dtoa_r+0x990>
 80070fc:	9b06      	ldr	r3, [sp, #24]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	dc51      	bgt.n	80071a6 <_dtoa_r+0x91e>
 8007102:	e089      	b.n	8007218 <_dtoa_r+0x990>
 8007104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800710a:	e74b      	b.n	8006fa4 <_dtoa_r+0x71c>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1e5e      	subs	r6, r3, #1
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	42b3      	cmp	r3, r6
 8007114:	bfbf      	itttt	lt
 8007116:	9b07      	ldrlt	r3, [sp, #28]
 8007118:	9607      	strlt	r6, [sp, #28]
 800711a:	1af2      	sublt	r2, r6, r3
 800711c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800711e:	bfb6      	itet	lt
 8007120:	189b      	addlt	r3, r3, r2
 8007122:	1b9e      	subge	r6, r3, r6
 8007124:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	bfb8      	it	lt
 800712a:	2600      	movlt	r6, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	bfb7      	itett	lt
 8007130:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007134:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007138:	1a9d      	sublt	r5, r3, r2
 800713a:	2300      	movlt	r3, #0
 800713c:	e734      	b.n	8006fa8 <_dtoa_r+0x720>
 800713e:	9e07      	ldr	r6, [sp, #28]
 8007140:	9d04      	ldr	r5, [sp, #16]
 8007142:	9f08      	ldr	r7, [sp, #32]
 8007144:	e73b      	b.n	8006fbe <_dtoa_r+0x736>
 8007146:	9a07      	ldr	r2, [sp, #28]
 8007148:	e767      	b.n	800701a <_dtoa_r+0x792>
 800714a:	9b06      	ldr	r3, [sp, #24]
 800714c:	2b01      	cmp	r3, #1
 800714e:	dc18      	bgt.n	8007182 <_dtoa_r+0x8fa>
 8007150:	f1ba 0f00 	cmp.w	sl, #0
 8007154:	d115      	bne.n	8007182 <_dtoa_r+0x8fa>
 8007156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800715a:	b993      	cbnz	r3, 8007182 <_dtoa_r+0x8fa>
 800715c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007160:	0d1b      	lsrs	r3, r3, #20
 8007162:	051b      	lsls	r3, r3, #20
 8007164:	b183      	cbz	r3, 8007188 <_dtoa_r+0x900>
 8007166:	9b04      	ldr	r3, [sp, #16]
 8007168:	3301      	adds	r3, #1
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	9b05      	ldr	r3, [sp, #20]
 800716e:	3301      	adds	r3, #1
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	f04f 0801 	mov.w	r8, #1
 8007176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f af6a 	bne.w	8007052 <_dtoa_r+0x7ca>
 800717e:	2001      	movs	r0, #1
 8007180:	e76f      	b.n	8007062 <_dtoa_r+0x7da>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	e7f6      	b.n	8007176 <_dtoa_r+0x8ee>
 8007188:	4698      	mov	r8, r3
 800718a:	e7f4      	b.n	8007176 <_dtoa_r+0x8ee>
 800718c:	f43f af7d 	beq.w	800708a <_dtoa_r+0x802>
 8007190:	4618      	mov	r0, r3
 8007192:	301c      	adds	r0, #28
 8007194:	e772      	b.n	800707c <_dtoa_r+0x7f4>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc37      	bgt.n	800720c <_dtoa_r+0x984>
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dd34      	ble.n	800720c <_dtoa_r+0x984>
 80071a2:	9b03      	ldr	r3, [sp, #12]
 80071a4:	9302      	str	r3, [sp, #8]
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	b96b      	cbnz	r3, 80071c6 <_dtoa_r+0x93e>
 80071aa:	4631      	mov	r1, r6
 80071ac:	2205      	movs	r2, #5
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fd56 	bl	8007c60 <__multadd>
 80071b4:	4601      	mov	r1, r0
 80071b6:	4606      	mov	r6, r0
 80071b8:	ee18 0a10 	vmov	r0, s16
 80071bc:	f000 ffba 	bl	8008134 <__mcmp>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	f73f adbb 	bgt.w	8006d3c <_dtoa_r+0x4b4>
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	9d01      	ldr	r5, [sp, #4]
 80071ca:	43db      	mvns	r3, r3
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	4631      	mov	r1, r6
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fd21 	bl	8007c1c <_Bfree>
 80071da:	2f00      	cmp	r7, #0
 80071dc:	f43f aea4 	beq.w	8006f28 <_dtoa_r+0x6a0>
 80071e0:	f1b8 0f00 	cmp.w	r8, #0
 80071e4:	d005      	beq.n	80071f2 <_dtoa_r+0x96a>
 80071e6:	45b8      	cmp	r8, r7
 80071e8:	d003      	beq.n	80071f2 <_dtoa_r+0x96a>
 80071ea:	4641      	mov	r1, r8
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fd15 	bl	8007c1c <_Bfree>
 80071f2:	4639      	mov	r1, r7
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fd11 	bl	8007c1c <_Bfree>
 80071fa:	e695      	b.n	8006f28 <_dtoa_r+0x6a0>
 80071fc:	2600      	movs	r6, #0
 80071fe:	4637      	mov	r7, r6
 8007200:	e7e1      	b.n	80071c6 <_dtoa_r+0x93e>
 8007202:	9700      	str	r7, [sp, #0]
 8007204:	4637      	mov	r7, r6
 8007206:	e599      	b.n	8006d3c <_dtoa_r+0x4b4>
 8007208:	40240000 	.word	0x40240000
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80ca 	beq.w	80073a8 <_dtoa_r+0xb20>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	9302      	str	r3, [sp, #8]
 8007218:	2d00      	cmp	r5, #0
 800721a:	dd05      	ble.n	8007228 <_dtoa_r+0x9a0>
 800721c:	4639      	mov	r1, r7
 800721e:	462a      	mov	r2, r5
 8007220:	4620      	mov	r0, r4
 8007222:	f000 ff17 	bl	8008054 <__lshift>
 8007226:	4607      	mov	r7, r0
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	d05b      	beq.n	80072e6 <_dtoa_r+0xa5e>
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fcb3 	bl	8007b9c <_Balloc>
 8007236:	4605      	mov	r5, r0
 8007238:	b928      	cbnz	r0, 8007246 <_dtoa_r+0x9be>
 800723a:	4b87      	ldr	r3, [pc, #540]	; (8007458 <_dtoa_r+0xbd0>)
 800723c:	4602      	mov	r2, r0
 800723e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007242:	f7ff bb3b 	b.w	80068bc <_dtoa_r+0x34>
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	3202      	adds	r2, #2
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	f107 010c 	add.w	r1, r7, #12
 8007250:	300c      	adds	r0, #12
 8007252:	f000 fc95 	bl	8007b80 <memcpy>
 8007256:	2201      	movs	r2, #1
 8007258:	4629      	mov	r1, r5
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fefa 	bl	8008054 <__lshift>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	f103 0901 	add.w	r9, r3, #1
 8007266:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800726a:	4413      	add	r3, r2
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	f00a 0301 	and.w	r3, sl, #1
 8007272:	46b8      	mov	r8, r7
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	4607      	mov	r7, r0
 8007278:	4631      	mov	r1, r6
 800727a:	ee18 0a10 	vmov	r0, s16
 800727e:	f7ff fa77 	bl	8006770 <quorem>
 8007282:	4641      	mov	r1, r8
 8007284:	9002      	str	r0, [sp, #8]
 8007286:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800728a:	ee18 0a10 	vmov	r0, s16
 800728e:	f000 ff51 	bl	8008134 <__mcmp>
 8007292:	463a      	mov	r2, r7
 8007294:	9003      	str	r0, [sp, #12]
 8007296:	4631      	mov	r1, r6
 8007298:	4620      	mov	r0, r4
 800729a:	f000 ff67 	bl	800816c <__mdiff>
 800729e:	68c2      	ldr	r2, [r0, #12]
 80072a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80072a4:	4605      	mov	r5, r0
 80072a6:	bb02      	cbnz	r2, 80072ea <_dtoa_r+0xa62>
 80072a8:	4601      	mov	r1, r0
 80072aa:	ee18 0a10 	vmov	r0, s16
 80072ae:	f000 ff41 	bl	8008134 <__mcmp>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4629      	mov	r1, r5
 80072b6:	4620      	mov	r0, r4
 80072b8:	9207      	str	r2, [sp, #28]
 80072ba:	f000 fcaf 	bl	8007c1c <_Bfree>
 80072be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80072c2:	ea43 0102 	orr.w	r1, r3, r2
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	430b      	orrs	r3, r1
 80072ca:	464d      	mov	r5, r9
 80072cc:	d10f      	bne.n	80072ee <_dtoa_r+0xa66>
 80072ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072d2:	d02a      	beq.n	800732a <_dtoa_r+0xaa2>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dd02      	ble.n	80072e0 <_dtoa_r+0xa58>
 80072da:	9b02      	ldr	r3, [sp, #8]
 80072dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80072e0:	f88b a000 	strb.w	sl, [fp]
 80072e4:	e775      	b.n	80071d2 <_dtoa_r+0x94a>
 80072e6:	4638      	mov	r0, r7
 80072e8:	e7ba      	b.n	8007260 <_dtoa_r+0x9d8>
 80072ea:	2201      	movs	r2, #1
 80072ec:	e7e2      	b.n	80072b4 <_dtoa_r+0xa2c>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	db04      	blt.n	80072fe <_dtoa_r+0xa76>
 80072f4:	9906      	ldr	r1, [sp, #24]
 80072f6:	430b      	orrs	r3, r1
 80072f8:	9904      	ldr	r1, [sp, #16]
 80072fa:	430b      	orrs	r3, r1
 80072fc:	d122      	bne.n	8007344 <_dtoa_r+0xabc>
 80072fe:	2a00      	cmp	r2, #0
 8007300:	ddee      	ble.n	80072e0 <_dtoa_r+0xa58>
 8007302:	ee18 1a10 	vmov	r1, s16
 8007306:	2201      	movs	r2, #1
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fea3 	bl	8008054 <__lshift>
 800730e:	4631      	mov	r1, r6
 8007310:	ee08 0a10 	vmov	s16, r0
 8007314:	f000 ff0e 	bl	8008134 <__mcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	dc03      	bgt.n	8007324 <_dtoa_r+0xa9c>
 800731c:	d1e0      	bne.n	80072e0 <_dtoa_r+0xa58>
 800731e:	f01a 0f01 	tst.w	sl, #1
 8007322:	d0dd      	beq.n	80072e0 <_dtoa_r+0xa58>
 8007324:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007328:	d1d7      	bne.n	80072da <_dtoa_r+0xa52>
 800732a:	2339      	movs	r3, #57	; 0x39
 800732c:	f88b 3000 	strb.w	r3, [fp]
 8007330:	462b      	mov	r3, r5
 8007332:	461d      	mov	r5, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800733a:	2a39      	cmp	r2, #57	; 0x39
 800733c:	d071      	beq.n	8007422 <_dtoa_r+0xb9a>
 800733e:	3201      	adds	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
 8007342:	e746      	b.n	80071d2 <_dtoa_r+0x94a>
 8007344:	2a00      	cmp	r2, #0
 8007346:	dd07      	ble.n	8007358 <_dtoa_r+0xad0>
 8007348:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800734c:	d0ed      	beq.n	800732a <_dtoa_r+0xaa2>
 800734e:	f10a 0301 	add.w	r3, sl, #1
 8007352:	f88b 3000 	strb.w	r3, [fp]
 8007356:	e73c      	b.n	80071d2 <_dtoa_r+0x94a>
 8007358:	9b05      	ldr	r3, [sp, #20]
 800735a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800735e:	4599      	cmp	r9, r3
 8007360:	d047      	beq.n	80073f2 <_dtoa_r+0xb6a>
 8007362:	ee18 1a10 	vmov	r1, s16
 8007366:	2300      	movs	r3, #0
 8007368:	220a      	movs	r2, #10
 800736a:	4620      	mov	r0, r4
 800736c:	f000 fc78 	bl	8007c60 <__multadd>
 8007370:	45b8      	cmp	r8, r7
 8007372:	ee08 0a10 	vmov	s16, r0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	f04f 020a 	mov.w	r2, #10
 800737e:	4641      	mov	r1, r8
 8007380:	4620      	mov	r0, r4
 8007382:	d106      	bne.n	8007392 <_dtoa_r+0xb0a>
 8007384:	f000 fc6c 	bl	8007c60 <__multadd>
 8007388:	4680      	mov	r8, r0
 800738a:	4607      	mov	r7, r0
 800738c:	f109 0901 	add.w	r9, r9, #1
 8007390:	e772      	b.n	8007278 <_dtoa_r+0x9f0>
 8007392:	f000 fc65 	bl	8007c60 <__multadd>
 8007396:	4639      	mov	r1, r7
 8007398:	4680      	mov	r8, r0
 800739a:	2300      	movs	r3, #0
 800739c:	220a      	movs	r2, #10
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fc5e 	bl	8007c60 <__multadd>
 80073a4:	4607      	mov	r7, r0
 80073a6:	e7f1      	b.n	800738c <_dtoa_r+0xb04>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	9d01      	ldr	r5, [sp, #4]
 80073ae:	ee18 0a10 	vmov	r0, s16
 80073b2:	4631      	mov	r1, r6
 80073b4:	f7ff f9dc 	bl	8006770 <quorem>
 80073b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073bc:	9b01      	ldr	r3, [sp, #4]
 80073be:	f805 ab01 	strb.w	sl, [r5], #1
 80073c2:	1aea      	subs	r2, r5, r3
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	4293      	cmp	r3, r2
 80073c8:	dd09      	ble.n	80073de <_dtoa_r+0xb56>
 80073ca:	ee18 1a10 	vmov	r1, s16
 80073ce:	2300      	movs	r3, #0
 80073d0:	220a      	movs	r2, #10
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 fc44 	bl	8007c60 <__multadd>
 80073d8:	ee08 0a10 	vmov	s16, r0
 80073dc:	e7e7      	b.n	80073ae <_dtoa_r+0xb26>
 80073de:	9b02      	ldr	r3, [sp, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfc8      	it	gt
 80073e4:	461d      	movgt	r5, r3
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	bfd8      	it	le
 80073ea:	2501      	movle	r5, #1
 80073ec:	441d      	add	r5, r3
 80073ee:	f04f 0800 	mov.w	r8, #0
 80073f2:	ee18 1a10 	vmov	r1, s16
 80073f6:	2201      	movs	r2, #1
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fe2b 	bl	8008054 <__lshift>
 80073fe:	4631      	mov	r1, r6
 8007400:	ee08 0a10 	vmov	s16, r0
 8007404:	f000 fe96 	bl	8008134 <__mcmp>
 8007408:	2800      	cmp	r0, #0
 800740a:	dc91      	bgt.n	8007330 <_dtoa_r+0xaa8>
 800740c:	d102      	bne.n	8007414 <_dtoa_r+0xb8c>
 800740e:	f01a 0f01 	tst.w	sl, #1
 8007412:	d18d      	bne.n	8007330 <_dtoa_r+0xaa8>
 8007414:	462b      	mov	r3, r5
 8007416:	461d      	mov	r5, r3
 8007418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800741c:	2a30      	cmp	r2, #48	; 0x30
 800741e:	d0fa      	beq.n	8007416 <_dtoa_r+0xb8e>
 8007420:	e6d7      	b.n	80071d2 <_dtoa_r+0x94a>
 8007422:	9a01      	ldr	r2, [sp, #4]
 8007424:	429a      	cmp	r2, r3
 8007426:	d184      	bne.n	8007332 <_dtoa_r+0xaaa>
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2331      	movs	r3, #49	; 0x31
 8007430:	7013      	strb	r3, [r2, #0]
 8007432:	e6ce      	b.n	80071d2 <_dtoa_r+0x94a>
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <_dtoa_r+0xbd4>)
 8007436:	f7ff ba95 	b.w	8006964 <_dtoa_r+0xdc>
 800743a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800743c:	2b00      	cmp	r3, #0
 800743e:	f47f aa6e 	bne.w	800691e <_dtoa_r+0x96>
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <_dtoa_r+0xbd8>)
 8007444:	f7ff ba8e 	b.w	8006964 <_dtoa_r+0xdc>
 8007448:	9b02      	ldr	r3, [sp, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	dcae      	bgt.n	80073ac <_dtoa_r+0xb24>
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	2b02      	cmp	r3, #2
 8007452:	f73f aea8 	bgt.w	80071a6 <_dtoa_r+0x91e>
 8007456:	e7a9      	b.n	80073ac <_dtoa_r+0xb24>
 8007458:	0800a6e8 	.word	0x0800a6e8
 800745c:	0800a4ec 	.word	0x0800a4ec
 8007460:	0800a669 	.word	0x0800a669

08007464 <rshift>:
 8007464:	6903      	ldr	r3, [r0, #16]
 8007466:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800746a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800746e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007472:	f100 0414 	add.w	r4, r0, #20
 8007476:	dd45      	ble.n	8007504 <rshift+0xa0>
 8007478:	f011 011f 	ands.w	r1, r1, #31
 800747c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007480:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007484:	d10c      	bne.n	80074a0 <rshift+0x3c>
 8007486:	f100 0710 	add.w	r7, r0, #16
 800748a:	4629      	mov	r1, r5
 800748c:	42b1      	cmp	r1, r6
 800748e:	d334      	bcc.n	80074fa <rshift+0x96>
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	1eea      	subs	r2, r5, #3
 8007496:	4296      	cmp	r6, r2
 8007498:	bf38      	it	cc
 800749a:	2300      	movcc	r3, #0
 800749c:	4423      	add	r3, r4
 800749e:	e015      	b.n	80074cc <rshift+0x68>
 80074a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074a4:	f1c1 0820 	rsb	r8, r1, #32
 80074a8:	40cf      	lsrs	r7, r1
 80074aa:	f105 0e04 	add.w	lr, r5, #4
 80074ae:	46a1      	mov	r9, r4
 80074b0:	4576      	cmp	r6, lr
 80074b2:	46f4      	mov	ip, lr
 80074b4:	d815      	bhi.n	80074e2 <rshift+0x7e>
 80074b6:	1a9a      	subs	r2, r3, r2
 80074b8:	0092      	lsls	r2, r2, #2
 80074ba:	3a04      	subs	r2, #4
 80074bc:	3501      	adds	r5, #1
 80074be:	42ae      	cmp	r6, r5
 80074c0:	bf38      	it	cc
 80074c2:	2200      	movcc	r2, #0
 80074c4:	18a3      	adds	r3, r4, r2
 80074c6:	50a7      	str	r7, [r4, r2]
 80074c8:	b107      	cbz	r7, 80074cc <rshift+0x68>
 80074ca:	3304      	adds	r3, #4
 80074cc:	1b1a      	subs	r2, r3, r4
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074d4:	bf08      	it	eq
 80074d6:	2300      	moveq	r3, #0
 80074d8:	6102      	str	r2, [r0, #16]
 80074da:	bf08      	it	eq
 80074dc:	6143      	streq	r3, [r0, #20]
 80074de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e2:	f8dc c000 	ldr.w	ip, [ip]
 80074e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80074ea:	ea4c 0707 	orr.w	r7, ip, r7
 80074ee:	f849 7b04 	str.w	r7, [r9], #4
 80074f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074f6:	40cf      	lsrs	r7, r1
 80074f8:	e7da      	b.n	80074b0 <rshift+0x4c>
 80074fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80074fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8007502:	e7c3      	b.n	800748c <rshift+0x28>
 8007504:	4623      	mov	r3, r4
 8007506:	e7e1      	b.n	80074cc <rshift+0x68>

08007508 <__hexdig_fun>:
 8007508:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800750c:	2b09      	cmp	r3, #9
 800750e:	d802      	bhi.n	8007516 <__hexdig_fun+0xe>
 8007510:	3820      	subs	r0, #32
 8007512:	b2c0      	uxtb	r0, r0
 8007514:	4770      	bx	lr
 8007516:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800751a:	2b05      	cmp	r3, #5
 800751c:	d801      	bhi.n	8007522 <__hexdig_fun+0x1a>
 800751e:	3847      	subs	r0, #71	; 0x47
 8007520:	e7f7      	b.n	8007512 <__hexdig_fun+0xa>
 8007522:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007526:	2b05      	cmp	r3, #5
 8007528:	d801      	bhi.n	800752e <__hexdig_fun+0x26>
 800752a:	3827      	subs	r0, #39	; 0x27
 800752c:	e7f1      	b.n	8007512 <__hexdig_fun+0xa>
 800752e:	2000      	movs	r0, #0
 8007530:	4770      	bx	lr
	...

08007534 <__gethex>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	ed2d 8b02 	vpush	{d8}
 800753c:	b089      	sub	sp, #36	; 0x24
 800753e:	ee08 0a10 	vmov	s16, r0
 8007542:	9304      	str	r3, [sp, #16]
 8007544:	4bb4      	ldr	r3, [pc, #720]	; (8007818 <__gethex+0x2e4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	4618      	mov	r0, r3
 800754c:	468b      	mov	fp, r1
 800754e:	4690      	mov	r8, r2
 8007550:	f7f8 fe46 	bl	80001e0 <strlen>
 8007554:	9b01      	ldr	r3, [sp, #4]
 8007556:	f8db 2000 	ldr.w	r2, [fp]
 800755a:	4403      	add	r3, r0
 800755c:	4682      	mov	sl, r0
 800755e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	1c93      	adds	r3, r2, #2
 8007566:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800756a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800756e:	32fe      	adds	r2, #254	; 0xfe
 8007570:	18d1      	adds	r1, r2, r3
 8007572:	461f      	mov	r7, r3
 8007574:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007578:	9100      	str	r1, [sp, #0]
 800757a:	2830      	cmp	r0, #48	; 0x30
 800757c:	d0f8      	beq.n	8007570 <__gethex+0x3c>
 800757e:	f7ff ffc3 	bl	8007508 <__hexdig_fun>
 8007582:	4604      	mov	r4, r0
 8007584:	2800      	cmp	r0, #0
 8007586:	d13a      	bne.n	80075fe <__gethex+0xca>
 8007588:	9901      	ldr	r1, [sp, #4]
 800758a:	4652      	mov	r2, sl
 800758c:	4638      	mov	r0, r7
 800758e:	f001 fa33 	bl	80089f8 <strncmp>
 8007592:	4605      	mov	r5, r0
 8007594:	2800      	cmp	r0, #0
 8007596:	d168      	bne.n	800766a <__gethex+0x136>
 8007598:	f817 000a 	ldrb.w	r0, [r7, sl]
 800759c:	eb07 060a 	add.w	r6, r7, sl
 80075a0:	f7ff ffb2 	bl	8007508 <__hexdig_fun>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d062      	beq.n	800766e <__gethex+0x13a>
 80075a8:	4633      	mov	r3, r6
 80075aa:	7818      	ldrb	r0, [r3, #0]
 80075ac:	2830      	cmp	r0, #48	; 0x30
 80075ae:	461f      	mov	r7, r3
 80075b0:	f103 0301 	add.w	r3, r3, #1
 80075b4:	d0f9      	beq.n	80075aa <__gethex+0x76>
 80075b6:	f7ff ffa7 	bl	8007508 <__hexdig_fun>
 80075ba:	2301      	movs	r3, #1
 80075bc:	fab0 f480 	clz	r4, r0
 80075c0:	0964      	lsrs	r4, r4, #5
 80075c2:	4635      	mov	r5, r6
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	463a      	mov	r2, r7
 80075c8:	4616      	mov	r6, r2
 80075ca:	3201      	adds	r2, #1
 80075cc:	7830      	ldrb	r0, [r6, #0]
 80075ce:	f7ff ff9b 	bl	8007508 <__hexdig_fun>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d1f8      	bne.n	80075c8 <__gethex+0x94>
 80075d6:	9901      	ldr	r1, [sp, #4]
 80075d8:	4652      	mov	r2, sl
 80075da:	4630      	mov	r0, r6
 80075dc:	f001 fa0c 	bl	80089f8 <strncmp>
 80075e0:	b980      	cbnz	r0, 8007604 <__gethex+0xd0>
 80075e2:	b94d      	cbnz	r5, 80075f8 <__gethex+0xc4>
 80075e4:	eb06 050a 	add.w	r5, r6, sl
 80075e8:	462a      	mov	r2, r5
 80075ea:	4616      	mov	r6, r2
 80075ec:	3201      	adds	r2, #1
 80075ee:	7830      	ldrb	r0, [r6, #0]
 80075f0:	f7ff ff8a 	bl	8007508 <__hexdig_fun>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d1f8      	bne.n	80075ea <__gethex+0xb6>
 80075f8:	1bad      	subs	r5, r5, r6
 80075fa:	00ad      	lsls	r5, r5, #2
 80075fc:	e004      	b.n	8007608 <__gethex+0xd4>
 80075fe:	2400      	movs	r4, #0
 8007600:	4625      	mov	r5, r4
 8007602:	e7e0      	b.n	80075c6 <__gethex+0x92>
 8007604:	2d00      	cmp	r5, #0
 8007606:	d1f7      	bne.n	80075f8 <__gethex+0xc4>
 8007608:	7833      	ldrb	r3, [r6, #0]
 800760a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800760e:	2b50      	cmp	r3, #80	; 0x50
 8007610:	d13b      	bne.n	800768a <__gethex+0x156>
 8007612:	7873      	ldrb	r3, [r6, #1]
 8007614:	2b2b      	cmp	r3, #43	; 0x2b
 8007616:	d02c      	beq.n	8007672 <__gethex+0x13e>
 8007618:	2b2d      	cmp	r3, #45	; 0x2d
 800761a:	d02e      	beq.n	800767a <__gethex+0x146>
 800761c:	1c71      	adds	r1, r6, #1
 800761e:	f04f 0900 	mov.w	r9, #0
 8007622:	7808      	ldrb	r0, [r1, #0]
 8007624:	f7ff ff70 	bl	8007508 <__hexdig_fun>
 8007628:	1e43      	subs	r3, r0, #1
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b18      	cmp	r3, #24
 800762e:	d82c      	bhi.n	800768a <__gethex+0x156>
 8007630:	f1a0 0210 	sub.w	r2, r0, #16
 8007634:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007638:	f7ff ff66 	bl	8007508 <__hexdig_fun>
 800763c:	1e43      	subs	r3, r0, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b18      	cmp	r3, #24
 8007642:	d91d      	bls.n	8007680 <__gethex+0x14c>
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	d000      	beq.n	800764c <__gethex+0x118>
 800764a:	4252      	negs	r2, r2
 800764c:	4415      	add	r5, r2
 800764e:	f8cb 1000 	str.w	r1, [fp]
 8007652:	b1e4      	cbz	r4, 800768e <__gethex+0x15a>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	bf14      	ite	ne
 800765a:	2700      	movne	r7, #0
 800765c:	2706      	moveq	r7, #6
 800765e:	4638      	mov	r0, r7
 8007660:	b009      	add	sp, #36	; 0x24
 8007662:	ecbd 8b02 	vpop	{d8}
 8007666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766a:	463e      	mov	r6, r7
 800766c:	4625      	mov	r5, r4
 800766e:	2401      	movs	r4, #1
 8007670:	e7ca      	b.n	8007608 <__gethex+0xd4>
 8007672:	f04f 0900 	mov.w	r9, #0
 8007676:	1cb1      	adds	r1, r6, #2
 8007678:	e7d3      	b.n	8007622 <__gethex+0xee>
 800767a:	f04f 0901 	mov.w	r9, #1
 800767e:	e7fa      	b.n	8007676 <__gethex+0x142>
 8007680:	230a      	movs	r3, #10
 8007682:	fb03 0202 	mla	r2, r3, r2, r0
 8007686:	3a10      	subs	r2, #16
 8007688:	e7d4      	b.n	8007634 <__gethex+0x100>
 800768a:	4631      	mov	r1, r6
 800768c:	e7df      	b.n	800764e <__gethex+0x11a>
 800768e:	1bf3      	subs	r3, r6, r7
 8007690:	3b01      	subs	r3, #1
 8007692:	4621      	mov	r1, r4
 8007694:	2b07      	cmp	r3, #7
 8007696:	dc0b      	bgt.n	80076b0 <__gethex+0x17c>
 8007698:	ee18 0a10 	vmov	r0, s16
 800769c:	f000 fa7e 	bl	8007b9c <_Balloc>
 80076a0:	4604      	mov	r4, r0
 80076a2:	b940      	cbnz	r0, 80076b6 <__gethex+0x182>
 80076a4:	4b5d      	ldr	r3, [pc, #372]	; (800781c <__gethex+0x2e8>)
 80076a6:	4602      	mov	r2, r0
 80076a8:	21de      	movs	r1, #222	; 0xde
 80076aa:	485d      	ldr	r0, [pc, #372]	; (8007820 <__gethex+0x2ec>)
 80076ac:	f001 f9c6 	bl	8008a3c <__assert_func>
 80076b0:	3101      	adds	r1, #1
 80076b2:	105b      	asrs	r3, r3, #1
 80076b4:	e7ee      	b.n	8007694 <__gethex+0x160>
 80076b6:	f100 0914 	add.w	r9, r0, #20
 80076ba:	f04f 0b00 	mov.w	fp, #0
 80076be:	f1ca 0301 	rsb	r3, sl, #1
 80076c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80076c6:	f8cd b000 	str.w	fp, [sp]
 80076ca:	9306      	str	r3, [sp, #24]
 80076cc:	42b7      	cmp	r7, r6
 80076ce:	d340      	bcc.n	8007752 <__gethex+0x21e>
 80076d0:	9802      	ldr	r0, [sp, #8]
 80076d2:	9b00      	ldr	r3, [sp, #0]
 80076d4:	f840 3b04 	str.w	r3, [r0], #4
 80076d8:	eba0 0009 	sub.w	r0, r0, r9
 80076dc:	1080      	asrs	r0, r0, #2
 80076de:	0146      	lsls	r6, r0, #5
 80076e0:	6120      	str	r0, [r4, #16]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fb4c 	bl	8007d80 <__hi0bits>
 80076e8:	1a30      	subs	r0, r6, r0
 80076ea:	f8d8 6000 	ldr.w	r6, [r8]
 80076ee:	42b0      	cmp	r0, r6
 80076f0:	dd63      	ble.n	80077ba <__gethex+0x286>
 80076f2:	1b87      	subs	r7, r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fef0 	bl	80084dc <__any_on>
 80076fc:	4682      	mov	sl, r0
 80076fe:	b1a8      	cbz	r0, 800772c <__gethex+0x1f8>
 8007700:	1e7b      	subs	r3, r7, #1
 8007702:	1159      	asrs	r1, r3, #5
 8007704:	f003 021f 	and.w	r2, r3, #31
 8007708:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800770c:	f04f 0a01 	mov.w	sl, #1
 8007710:	fa0a f202 	lsl.w	r2, sl, r2
 8007714:	420a      	tst	r2, r1
 8007716:	d009      	beq.n	800772c <__gethex+0x1f8>
 8007718:	4553      	cmp	r3, sl
 800771a:	dd05      	ble.n	8007728 <__gethex+0x1f4>
 800771c:	1eb9      	subs	r1, r7, #2
 800771e:	4620      	mov	r0, r4
 8007720:	f000 fedc 	bl	80084dc <__any_on>
 8007724:	2800      	cmp	r0, #0
 8007726:	d145      	bne.n	80077b4 <__gethex+0x280>
 8007728:	f04f 0a02 	mov.w	sl, #2
 800772c:	4639      	mov	r1, r7
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff fe98 	bl	8007464 <rshift>
 8007734:	443d      	add	r5, r7
 8007736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800773a:	42ab      	cmp	r3, r5
 800773c:	da4c      	bge.n	80077d8 <__gethex+0x2a4>
 800773e:	ee18 0a10 	vmov	r0, s16
 8007742:	4621      	mov	r1, r4
 8007744:	f000 fa6a 	bl	8007c1c <_Bfree>
 8007748:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800774a:	2300      	movs	r3, #0
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	27a3      	movs	r7, #163	; 0xa3
 8007750:	e785      	b.n	800765e <__gethex+0x12a>
 8007752:	1e73      	subs	r3, r6, #1
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	9303      	str	r3, [sp, #12]
 8007758:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800775c:	4293      	cmp	r3, r2
 800775e:	d019      	beq.n	8007794 <__gethex+0x260>
 8007760:	f1bb 0f20 	cmp.w	fp, #32
 8007764:	d107      	bne.n	8007776 <__gethex+0x242>
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	9a00      	ldr	r2, [sp, #0]
 800776a:	f843 2b04 	str.w	r2, [r3], #4
 800776e:	9302      	str	r3, [sp, #8]
 8007770:	2300      	movs	r3, #0
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	469b      	mov	fp, r3
 8007776:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800777a:	f7ff fec5 	bl	8007508 <__hexdig_fun>
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	f000 000f 	and.w	r0, r0, #15
 8007784:	fa00 f00b 	lsl.w	r0, r0, fp
 8007788:	4303      	orrs	r3, r0
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	f10b 0b04 	add.w	fp, fp, #4
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	e00d      	b.n	80077b0 <__gethex+0x27c>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	9a06      	ldr	r2, [sp, #24]
 8007798:	4413      	add	r3, r2
 800779a:	42bb      	cmp	r3, r7
 800779c:	d3e0      	bcc.n	8007760 <__gethex+0x22c>
 800779e:	4618      	mov	r0, r3
 80077a0:	9901      	ldr	r1, [sp, #4]
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	4652      	mov	r2, sl
 80077a6:	f001 f927 	bl	80089f8 <strncmp>
 80077aa:	9b07      	ldr	r3, [sp, #28]
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d1d7      	bne.n	8007760 <__gethex+0x22c>
 80077b0:	461e      	mov	r6, r3
 80077b2:	e78b      	b.n	80076cc <__gethex+0x198>
 80077b4:	f04f 0a03 	mov.w	sl, #3
 80077b8:	e7b8      	b.n	800772c <__gethex+0x1f8>
 80077ba:	da0a      	bge.n	80077d2 <__gethex+0x29e>
 80077bc:	1a37      	subs	r7, r6, r0
 80077be:	4621      	mov	r1, r4
 80077c0:	ee18 0a10 	vmov	r0, s16
 80077c4:	463a      	mov	r2, r7
 80077c6:	f000 fc45 	bl	8008054 <__lshift>
 80077ca:	1bed      	subs	r5, r5, r7
 80077cc:	4604      	mov	r4, r0
 80077ce:	f100 0914 	add.w	r9, r0, #20
 80077d2:	f04f 0a00 	mov.w	sl, #0
 80077d6:	e7ae      	b.n	8007736 <__gethex+0x202>
 80077d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077dc:	42a8      	cmp	r0, r5
 80077de:	dd72      	ble.n	80078c6 <__gethex+0x392>
 80077e0:	1b45      	subs	r5, r0, r5
 80077e2:	42ae      	cmp	r6, r5
 80077e4:	dc36      	bgt.n	8007854 <__gethex+0x320>
 80077e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d02a      	beq.n	8007844 <__gethex+0x310>
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d02c      	beq.n	800784c <__gethex+0x318>
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d11c      	bne.n	8007830 <__gethex+0x2fc>
 80077f6:	42ae      	cmp	r6, r5
 80077f8:	d11a      	bne.n	8007830 <__gethex+0x2fc>
 80077fa:	2e01      	cmp	r6, #1
 80077fc:	d112      	bne.n	8007824 <__gethex+0x2f0>
 80077fe:	9a04      	ldr	r2, [sp, #16]
 8007800:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	2301      	movs	r3, #1
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	f8c9 3000 	str.w	r3, [r9]
 800780e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007810:	2762      	movs	r7, #98	; 0x62
 8007812:	601c      	str	r4, [r3, #0]
 8007814:	e723      	b.n	800765e <__gethex+0x12a>
 8007816:	bf00      	nop
 8007818:	0800a760 	.word	0x0800a760
 800781c:	0800a6e8 	.word	0x0800a6e8
 8007820:	0800a6f9 	.word	0x0800a6f9
 8007824:	1e71      	subs	r1, r6, #1
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fe58 	bl	80084dc <__any_on>
 800782c:	2800      	cmp	r0, #0
 800782e:	d1e6      	bne.n	80077fe <__gethex+0x2ca>
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	4621      	mov	r1, r4
 8007836:	f000 f9f1 	bl	8007c1c <_Bfree>
 800783a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800783c:	2300      	movs	r3, #0
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	2750      	movs	r7, #80	; 0x50
 8007842:	e70c      	b.n	800765e <__gethex+0x12a>
 8007844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f2      	bne.n	8007830 <__gethex+0x2fc>
 800784a:	e7d8      	b.n	80077fe <__gethex+0x2ca>
 800784c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1d5      	bne.n	80077fe <__gethex+0x2ca>
 8007852:	e7ed      	b.n	8007830 <__gethex+0x2fc>
 8007854:	1e6f      	subs	r7, r5, #1
 8007856:	f1ba 0f00 	cmp.w	sl, #0
 800785a:	d131      	bne.n	80078c0 <__gethex+0x38c>
 800785c:	b127      	cbz	r7, 8007868 <__gethex+0x334>
 800785e:	4639      	mov	r1, r7
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fe3b 	bl	80084dc <__any_on>
 8007866:	4682      	mov	sl, r0
 8007868:	117b      	asrs	r3, r7, #5
 800786a:	2101      	movs	r1, #1
 800786c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007870:	f007 071f 	and.w	r7, r7, #31
 8007874:	fa01 f707 	lsl.w	r7, r1, r7
 8007878:	421f      	tst	r7, r3
 800787a:	4629      	mov	r1, r5
 800787c:	4620      	mov	r0, r4
 800787e:	bf18      	it	ne
 8007880:	f04a 0a02 	orrne.w	sl, sl, #2
 8007884:	1b76      	subs	r6, r6, r5
 8007886:	f7ff fded 	bl	8007464 <rshift>
 800788a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800788e:	2702      	movs	r7, #2
 8007890:	f1ba 0f00 	cmp.w	sl, #0
 8007894:	d048      	beq.n	8007928 <__gethex+0x3f4>
 8007896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d015      	beq.n	80078ca <__gethex+0x396>
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d017      	beq.n	80078d2 <__gethex+0x39e>
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d109      	bne.n	80078ba <__gethex+0x386>
 80078a6:	f01a 0f02 	tst.w	sl, #2
 80078aa:	d006      	beq.n	80078ba <__gethex+0x386>
 80078ac:	f8d9 0000 	ldr.w	r0, [r9]
 80078b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80078b4:	f01a 0f01 	tst.w	sl, #1
 80078b8:	d10e      	bne.n	80078d8 <__gethex+0x3a4>
 80078ba:	f047 0710 	orr.w	r7, r7, #16
 80078be:	e033      	b.n	8007928 <__gethex+0x3f4>
 80078c0:	f04f 0a01 	mov.w	sl, #1
 80078c4:	e7d0      	b.n	8007868 <__gethex+0x334>
 80078c6:	2701      	movs	r7, #1
 80078c8:	e7e2      	b.n	8007890 <__gethex+0x35c>
 80078ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078cc:	f1c3 0301 	rsb	r3, r3, #1
 80078d0:	9315      	str	r3, [sp, #84]	; 0x54
 80078d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f0      	beq.n	80078ba <__gethex+0x386>
 80078d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80078dc:	f104 0314 	add.w	r3, r4, #20
 80078e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80078e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80078e8:	f04f 0c00 	mov.w	ip, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80078f6:	d01c      	beq.n	8007932 <__gethex+0x3fe>
 80078f8:	3201      	adds	r2, #1
 80078fa:	6002      	str	r2, [r0, #0]
 80078fc:	2f02      	cmp	r7, #2
 80078fe:	f104 0314 	add.w	r3, r4, #20
 8007902:	d13f      	bne.n	8007984 <__gethex+0x450>
 8007904:	f8d8 2000 	ldr.w	r2, [r8]
 8007908:	3a01      	subs	r2, #1
 800790a:	42b2      	cmp	r2, r6
 800790c:	d10a      	bne.n	8007924 <__gethex+0x3f0>
 800790e:	1171      	asrs	r1, r6, #5
 8007910:	2201      	movs	r2, #1
 8007912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007916:	f006 061f 	and.w	r6, r6, #31
 800791a:	fa02 f606 	lsl.w	r6, r2, r6
 800791e:	421e      	tst	r6, r3
 8007920:	bf18      	it	ne
 8007922:	4617      	movne	r7, r2
 8007924:	f047 0720 	orr.w	r7, r7, #32
 8007928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800792a:	601c      	str	r4, [r3, #0]
 800792c:	9b04      	ldr	r3, [sp, #16]
 800792e:	601d      	str	r5, [r3, #0]
 8007930:	e695      	b.n	800765e <__gethex+0x12a>
 8007932:	4299      	cmp	r1, r3
 8007934:	f843 cc04 	str.w	ip, [r3, #-4]
 8007938:	d8d8      	bhi.n	80078ec <__gethex+0x3b8>
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	459b      	cmp	fp, r3
 800793e:	db19      	blt.n	8007974 <__gethex+0x440>
 8007940:	6861      	ldr	r1, [r4, #4]
 8007942:	ee18 0a10 	vmov	r0, s16
 8007946:	3101      	adds	r1, #1
 8007948:	f000 f928 	bl	8007b9c <_Balloc>
 800794c:	4681      	mov	r9, r0
 800794e:	b918      	cbnz	r0, 8007958 <__gethex+0x424>
 8007950:	4b1a      	ldr	r3, [pc, #104]	; (80079bc <__gethex+0x488>)
 8007952:	4602      	mov	r2, r0
 8007954:	2184      	movs	r1, #132	; 0x84
 8007956:	e6a8      	b.n	80076aa <__gethex+0x176>
 8007958:	6922      	ldr	r2, [r4, #16]
 800795a:	3202      	adds	r2, #2
 800795c:	f104 010c 	add.w	r1, r4, #12
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	300c      	adds	r0, #12
 8007964:	f000 f90c 	bl	8007b80 <memcpy>
 8007968:	4621      	mov	r1, r4
 800796a:	ee18 0a10 	vmov	r0, s16
 800796e:	f000 f955 	bl	8007c1c <_Bfree>
 8007972:	464c      	mov	r4, r9
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800797c:	6122      	str	r2, [r4, #16]
 800797e:	2201      	movs	r2, #1
 8007980:	615a      	str	r2, [r3, #20]
 8007982:	e7bb      	b.n	80078fc <__gethex+0x3c8>
 8007984:	6922      	ldr	r2, [r4, #16]
 8007986:	455a      	cmp	r2, fp
 8007988:	dd0b      	ble.n	80079a2 <__gethex+0x46e>
 800798a:	2101      	movs	r1, #1
 800798c:	4620      	mov	r0, r4
 800798e:	f7ff fd69 	bl	8007464 <rshift>
 8007992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007996:	3501      	adds	r5, #1
 8007998:	42ab      	cmp	r3, r5
 800799a:	f6ff aed0 	blt.w	800773e <__gethex+0x20a>
 800799e:	2701      	movs	r7, #1
 80079a0:	e7c0      	b.n	8007924 <__gethex+0x3f0>
 80079a2:	f016 061f 	ands.w	r6, r6, #31
 80079a6:	d0fa      	beq.n	800799e <__gethex+0x46a>
 80079a8:	4453      	add	r3, sl
 80079aa:	f1c6 0620 	rsb	r6, r6, #32
 80079ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80079b2:	f000 f9e5 	bl	8007d80 <__hi0bits>
 80079b6:	42b0      	cmp	r0, r6
 80079b8:	dbe7      	blt.n	800798a <__gethex+0x456>
 80079ba:	e7f0      	b.n	800799e <__gethex+0x46a>
 80079bc:	0800a6e8 	.word	0x0800a6e8

080079c0 <L_shift>:
 80079c0:	f1c2 0208 	rsb	r2, r2, #8
 80079c4:	0092      	lsls	r2, r2, #2
 80079c6:	b570      	push	{r4, r5, r6, lr}
 80079c8:	f1c2 0620 	rsb	r6, r2, #32
 80079cc:	6843      	ldr	r3, [r0, #4]
 80079ce:	6804      	ldr	r4, [r0, #0]
 80079d0:	fa03 f506 	lsl.w	r5, r3, r6
 80079d4:	432c      	orrs	r4, r5
 80079d6:	40d3      	lsrs	r3, r2
 80079d8:	6004      	str	r4, [r0, #0]
 80079da:	f840 3f04 	str.w	r3, [r0, #4]!
 80079de:	4288      	cmp	r0, r1
 80079e0:	d3f4      	bcc.n	80079cc <L_shift+0xc>
 80079e2:	bd70      	pop	{r4, r5, r6, pc}

080079e4 <__match>:
 80079e4:	b530      	push	{r4, r5, lr}
 80079e6:	6803      	ldr	r3, [r0, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ee:	b914      	cbnz	r4, 80079f6 <__match+0x12>
 80079f0:	6003      	str	r3, [r0, #0]
 80079f2:	2001      	movs	r0, #1
 80079f4:	bd30      	pop	{r4, r5, pc}
 80079f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80079fe:	2d19      	cmp	r5, #25
 8007a00:	bf98      	it	ls
 8007a02:	3220      	addls	r2, #32
 8007a04:	42a2      	cmp	r2, r4
 8007a06:	d0f0      	beq.n	80079ea <__match+0x6>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e7f3      	b.n	80079f4 <__match+0x10>

08007a0c <__hexnan>:
 8007a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	115e      	asrs	r6, r3, #5
 8007a14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a18:	f013 031f 	ands.w	r3, r3, #31
 8007a1c:	b087      	sub	sp, #28
 8007a1e:	bf18      	it	ne
 8007a20:	3604      	addne	r6, #4
 8007a22:	2500      	movs	r5, #0
 8007a24:	1f37      	subs	r7, r6, #4
 8007a26:	4690      	mov	r8, r2
 8007a28:	6802      	ldr	r2, [r0, #0]
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	4682      	mov	sl, r0
 8007a2e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a32:	46b9      	mov	r9, r7
 8007a34:	463c      	mov	r4, r7
 8007a36:	9502      	str	r5, [sp, #8]
 8007a38:	46ab      	mov	fp, r5
 8007a3a:	7851      	ldrb	r1, [r2, #1]
 8007a3c:	1c53      	adds	r3, r2, #1
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	b341      	cbz	r1, 8007a94 <__hexnan+0x88>
 8007a42:	4608      	mov	r0, r1
 8007a44:	9205      	str	r2, [sp, #20]
 8007a46:	9104      	str	r1, [sp, #16]
 8007a48:	f7ff fd5e 	bl	8007508 <__hexdig_fun>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d14f      	bne.n	8007af0 <__hexnan+0xe4>
 8007a50:	9904      	ldr	r1, [sp, #16]
 8007a52:	9a05      	ldr	r2, [sp, #20]
 8007a54:	2920      	cmp	r1, #32
 8007a56:	d818      	bhi.n	8007a8a <__hexnan+0x7e>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	459b      	cmp	fp, r3
 8007a5c:	dd13      	ble.n	8007a86 <__hexnan+0x7a>
 8007a5e:	454c      	cmp	r4, r9
 8007a60:	d206      	bcs.n	8007a70 <__hexnan+0x64>
 8007a62:	2d07      	cmp	r5, #7
 8007a64:	dc04      	bgt.n	8007a70 <__hexnan+0x64>
 8007a66:	462a      	mov	r2, r5
 8007a68:	4649      	mov	r1, r9
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7ff ffa8 	bl	80079c0 <L_shift>
 8007a70:	4544      	cmp	r4, r8
 8007a72:	d950      	bls.n	8007b16 <__hexnan+0x10a>
 8007a74:	2300      	movs	r3, #0
 8007a76:	f1a4 0904 	sub.w	r9, r4, #4
 8007a7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a7e:	f8cd b008 	str.w	fp, [sp, #8]
 8007a82:	464c      	mov	r4, r9
 8007a84:	461d      	mov	r5, r3
 8007a86:	9a03      	ldr	r2, [sp, #12]
 8007a88:	e7d7      	b.n	8007a3a <__hexnan+0x2e>
 8007a8a:	2929      	cmp	r1, #41	; 0x29
 8007a8c:	d156      	bne.n	8007b3c <__hexnan+0x130>
 8007a8e:	3202      	adds	r2, #2
 8007a90:	f8ca 2000 	str.w	r2, [sl]
 8007a94:	f1bb 0f00 	cmp.w	fp, #0
 8007a98:	d050      	beq.n	8007b3c <__hexnan+0x130>
 8007a9a:	454c      	cmp	r4, r9
 8007a9c:	d206      	bcs.n	8007aac <__hexnan+0xa0>
 8007a9e:	2d07      	cmp	r5, #7
 8007aa0:	dc04      	bgt.n	8007aac <__hexnan+0xa0>
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f7ff ff8a 	bl	80079c0 <L_shift>
 8007aac:	4544      	cmp	r4, r8
 8007aae:	d934      	bls.n	8007b1a <__hexnan+0x10e>
 8007ab0:	f1a8 0204 	sub.w	r2, r8, #4
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007aba:	f842 1f04 	str.w	r1, [r2, #4]!
 8007abe:	429f      	cmp	r7, r3
 8007ac0:	d2f9      	bcs.n	8007ab6 <__hexnan+0xaa>
 8007ac2:	1b3b      	subs	r3, r7, r4
 8007ac4:	f023 0303 	bic.w	r3, r3, #3
 8007ac8:	3304      	adds	r3, #4
 8007aca:	3401      	adds	r4, #1
 8007acc:	3e03      	subs	r6, #3
 8007ace:	42b4      	cmp	r4, r6
 8007ad0:	bf88      	it	hi
 8007ad2:	2304      	movhi	r3, #4
 8007ad4:	4443      	add	r3, r8
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f843 2b04 	str.w	r2, [r3], #4
 8007adc:	429f      	cmp	r7, r3
 8007ade:	d2fb      	bcs.n	8007ad8 <__hexnan+0xcc>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	b91b      	cbnz	r3, 8007aec <__hexnan+0xe0>
 8007ae4:	4547      	cmp	r7, r8
 8007ae6:	d127      	bne.n	8007b38 <__hexnan+0x12c>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	2005      	movs	r0, #5
 8007aee:	e026      	b.n	8007b3e <__hexnan+0x132>
 8007af0:	3501      	adds	r5, #1
 8007af2:	2d08      	cmp	r5, #8
 8007af4:	f10b 0b01 	add.w	fp, fp, #1
 8007af8:	dd06      	ble.n	8007b08 <__hexnan+0xfc>
 8007afa:	4544      	cmp	r4, r8
 8007afc:	d9c3      	bls.n	8007a86 <__hexnan+0x7a>
 8007afe:	2300      	movs	r3, #0
 8007b00:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b04:	2501      	movs	r5, #1
 8007b06:	3c04      	subs	r4, #4
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	f000 000f 	and.w	r0, r0, #15
 8007b0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b12:	6022      	str	r2, [r4, #0]
 8007b14:	e7b7      	b.n	8007a86 <__hexnan+0x7a>
 8007b16:	2508      	movs	r5, #8
 8007b18:	e7b5      	b.n	8007a86 <__hexnan+0x7a>
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0df      	beq.n	8007ae0 <__hexnan+0xd4>
 8007b20:	f04f 32ff 	mov.w	r2, #4294967295
 8007b24:	f1c3 0320 	rsb	r3, r3, #32
 8007b28:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b30:	401a      	ands	r2, r3
 8007b32:	f846 2c04 	str.w	r2, [r6, #-4]
 8007b36:	e7d3      	b.n	8007ae0 <__hexnan+0xd4>
 8007b38:	3f04      	subs	r7, #4
 8007b3a:	e7d1      	b.n	8007ae0 <__hexnan+0xd4>
 8007b3c:	2004      	movs	r0, #4
 8007b3e:	b007      	add	sp, #28
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b44 <_localeconv_r>:
 8007b44:	4800      	ldr	r0, [pc, #0]	; (8007b48 <_localeconv_r+0x4>)
 8007b46:	4770      	bx	lr
 8007b48:	20000cc4 	.word	0x20000cc4

08007b4c <malloc>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <malloc+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f000 bd67 	b.w	8008624 <_malloc_r>
 8007b56:	bf00      	nop
 8007b58:	20000b6c 	.word	0x20000b6c

08007b5c <__ascii_mbtowc>:
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	b901      	cbnz	r1, 8007b62 <__ascii_mbtowc+0x6>
 8007b60:	a901      	add	r1, sp, #4
 8007b62:	b142      	cbz	r2, 8007b76 <__ascii_mbtowc+0x1a>
 8007b64:	b14b      	cbz	r3, 8007b7a <__ascii_mbtowc+0x1e>
 8007b66:	7813      	ldrb	r3, [r2, #0]
 8007b68:	600b      	str	r3, [r1, #0]
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	1e10      	subs	r0, r2, #0
 8007b6e:	bf18      	it	ne
 8007b70:	2001      	movne	r0, #1
 8007b72:	b002      	add	sp, #8
 8007b74:	4770      	bx	lr
 8007b76:	4610      	mov	r0, r2
 8007b78:	e7fb      	b.n	8007b72 <__ascii_mbtowc+0x16>
 8007b7a:	f06f 0001 	mvn.w	r0, #1
 8007b7e:	e7f8      	b.n	8007b72 <__ascii_mbtowc+0x16>

08007b80 <memcpy>:
 8007b80:	440a      	add	r2, r1
 8007b82:	4291      	cmp	r1, r2
 8007b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b88:	d100      	bne.n	8007b8c <memcpy+0xc>
 8007b8a:	4770      	bx	lr
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b96:	4291      	cmp	r1, r2
 8007b98:	d1f9      	bne.n	8007b8e <memcpy+0xe>
 8007b9a:	bd10      	pop	{r4, pc}

08007b9c <_Balloc>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	b976      	cbnz	r6, 8007bc4 <_Balloc+0x28>
 8007ba6:	2010      	movs	r0, #16
 8007ba8:	f7ff ffd0 	bl	8007b4c <malloc>
 8007bac:	4602      	mov	r2, r0
 8007bae:	6260      	str	r0, [r4, #36]	; 0x24
 8007bb0:	b920      	cbnz	r0, 8007bbc <_Balloc+0x20>
 8007bb2:	4b18      	ldr	r3, [pc, #96]	; (8007c14 <_Balloc+0x78>)
 8007bb4:	4818      	ldr	r0, [pc, #96]	; (8007c18 <_Balloc+0x7c>)
 8007bb6:	2166      	movs	r1, #102	; 0x66
 8007bb8:	f000 ff40 	bl	8008a3c <__assert_func>
 8007bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bc0:	6006      	str	r6, [r0, #0]
 8007bc2:	60c6      	str	r6, [r0, #12]
 8007bc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bc6:	68f3      	ldr	r3, [r6, #12]
 8007bc8:	b183      	cbz	r3, 8007bec <_Balloc+0x50>
 8007bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bd2:	b9b8      	cbnz	r0, 8007c04 <_Balloc+0x68>
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	fa01 f605 	lsl.w	r6, r1, r5
 8007bda:	1d72      	adds	r2, r6, #5
 8007bdc:	0092      	lsls	r2, r2, #2
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 fc9d 	bl	800851e <_calloc_r>
 8007be4:	b160      	cbz	r0, 8007c00 <_Balloc+0x64>
 8007be6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bea:	e00e      	b.n	8007c0a <_Balloc+0x6e>
 8007bec:	2221      	movs	r2, #33	; 0x21
 8007bee:	2104      	movs	r1, #4
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fc94 	bl	800851e <_calloc_r>
 8007bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf8:	60f0      	str	r0, [r6, #12]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e4      	bne.n	8007bca <_Balloc+0x2e>
 8007c00:	2000      	movs	r0, #0
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	6802      	ldr	r2, [r0, #0]
 8007c06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c10:	e7f7      	b.n	8007c02 <_Balloc+0x66>
 8007c12:	bf00      	nop
 8007c14:	0800a676 	.word	0x0800a676
 8007c18:	0800a774 	.word	0x0800a774

08007c1c <_Bfree>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c20:	4605      	mov	r5, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	b976      	cbnz	r6, 8007c44 <_Bfree+0x28>
 8007c26:	2010      	movs	r0, #16
 8007c28:	f7ff ff90 	bl	8007b4c <malloc>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	6268      	str	r0, [r5, #36]	; 0x24
 8007c30:	b920      	cbnz	r0, 8007c3c <_Bfree+0x20>
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <_Bfree+0x3c>)
 8007c34:	4809      	ldr	r0, [pc, #36]	; (8007c5c <_Bfree+0x40>)
 8007c36:	218a      	movs	r1, #138	; 0x8a
 8007c38:	f000 ff00 	bl	8008a3c <__assert_func>
 8007c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c40:	6006      	str	r6, [r0, #0]
 8007c42:	60c6      	str	r6, [r0, #12]
 8007c44:	b13c      	cbz	r4, 8007c56 <_Bfree+0x3a>
 8007c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c48:	6862      	ldr	r2, [r4, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c50:	6021      	str	r1, [r4, #0]
 8007c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	0800a676 	.word	0x0800a676
 8007c5c:	0800a774 	.word	0x0800a774

08007c60 <__multadd>:
 8007c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c64:	690d      	ldr	r5, [r1, #16]
 8007c66:	4607      	mov	r7, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	461e      	mov	r6, r3
 8007c6c:	f101 0c14 	add.w	ip, r1, #20
 8007c70:	2000      	movs	r0, #0
 8007c72:	f8dc 3000 	ldr.w	r3, [ip]
 8007c76:	b299      	uxth	r1, r3
 8007c78:	fb02 6101 	mla	r1, r2, r1, r6
 8007c7c:	0c1e      	lsrs	r6, r3, #16
 8007c7e:	0c0b      	lsrs	r3, r1, #16
 8007c80:	fb02 3306 	mla	r3, r2, r6, r3
 8007c84:	b289      	uxth	r1, r1
 8007c86:	3001      	adds	r0, #1
 8007c88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c8c:	4285      	cmp	r5, r0
 8007c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8007c92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c96:	dcec      	bgt.n	8007c72 <__multadd+0x12>
 8007c98:	b30e      	cbz	r6, 8007cde <__multadd+0x7e>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	dc19      	bgt.n	8007cd4 <__multadd+0x74>
 8007ca0:	6861      	ldr	r1, [r4, #4]
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	3101      	adds	r1, #1
 8007ca6:	f7ff ff79 	bl	8007b9c <_Balloc>
 8007caa:	4680      	mov	r8, r0
 8007cac:	b928      	cbnz	r0, 8007cba <__multadd+0x5a>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <__multadd+0x84>)
 8007cb2:	480d      	ldr	r0, [pc, #52]	; (8007ce8 <__multadd+0x88>)
 8007cb4:	21b5      	movs	r1, #181	; 0xb5
 8007cb6:	f000 fec1 	bl	8008a3c <__assert_func>
 8007cba:	6922      	ldr	r2, [r4, #16]
 8007cbc:	3202      	adds	r2, #2
 8007cbe:	f104 010c 	add.w	r1, r4, #12
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	f7ff ff5b 	bl	8007b80 <memcpy>
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff ffa5 	bl	8007c1c <_Bfree>
 8007cd2:	4644      	mov	r4, r8
 8007cd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cd8:	3501      	adds	r5, #1
 8007cda:	615e      	str	r6, [r3, #20]
 8007cdc:	6125      	str	r5, [r4, #16]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce4:	0800a6e8 	.word	0x0800a6e8
 8007ce8:	0800a774 	.word	0x0800a774

08007cec <__s2b>:
 8007cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	4615      	mov	r5, r2
 8007cf4:	461f      	mov	r7, r3
 8007cf6:	2209      	movs	r2, #9
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d00:	2100      	movs	r1, #0
 8007d02:	2201      	movs	r2, #1
 8007d04:	429a      	cmp	r2, r3
 8007d06:	db09      	blt.n	8007d1c <__s2b+0x30>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f7ff ff47 	bl	8007b9c <_Balloc>
 8007d0e:	b940      	cbnz	r0, 8007d22 <__s2b+0x36>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <__s2b+0x8c>)
 8007d14:	4819      	ldr	r0, [pc, #100]	; (8007d7c <__s2b+0x90>)
 8007d16:	21ce      	movs	r1, #206	; 0xce
 8007d18:	f000 fe90 	bl	8008a3c <__assert_func>
 8007d1c:	0052      	lsls	r2, r2, #1
 8007d1e:	3101      	adds	r1, #1
 8007d20:	e7f0      	b.n	8007d04 <__s2b+0x18>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	6143      	str	r3, [r0, #20]
 8007d26:	2d09      	cmp	r5, #9
 8007d28:	f04f 0301 	mov.w	r3, #1
 8007d2c:	6103      	str	r3, [r0, #16]
 8007d2e:	dd16      	ble.n	8007d5e <__s2b+0x72>
 8007d30:	f104 0909 	add.w	r9, r4, #9
 8007d34:	46c8      	mov	r8, r9
 8007d36:	442c      	add	r4, r5
 8007d38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	3b30      	subs	r3, #48	; 0x30
 8007d40:	220a      	movs	r2, #10
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff ff8c 	bl	8007c60 <__multadd>
 8007d48:	45a0      	cmp	r8, r4
 8007d4a:	d1f5      	bne.n	8007d38 <__s2b+0x4c>
 8007d4c:	f1a5 0408 	sub.w	r4, r5, #8
 8007d50:	444c      	add	r4, r9
 8007d52:	1b2d      	subs	r5, r5, r4
 8007d54:	1963      	adds	r3, r4, r5
 8007d56:	42bb      	cmp	r3, r7
 8007d58:	db04      	blt.n	8007d64 <__s2b+0x78>
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	340a      	adds	r4, #10
 8007d60:	2509      	movs	r5, #9
 8007d62:	e7f6      	b.n	8007d52 <__s2b+0x66>
 8007d64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d68:	4601      	mov	r1, r0
 8007d6a:	3b30      	subs	r3, #48	; 0x30
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7ff ff76 	bl	8007c60 <__multadd>
 8007d74:	e7ee      	b.n	8007d54 <__s2b+0x68>
 8007d76:	bf00      	nop
 8007d78:	0800a6e8 	.word	0x0800a6e8
 8007d7c:	0800a774 	.word	0x0800a774

08007d80 <__hi0bits>:
 8007d80:	0c03      	lsrs	r3, r0, #16
 8007d82:	041b      	lsls	r3, r3, #16
 8007d84:	b9d3      	cbnz	r3, 8007dbc <__hi0bits+0x3c>
 8007d86:	0400      	lsls	r0, r0, #16
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d8e:	bf04      	itt	eq
 8007d90:	0200      	lsleq	r0, r0, #8
 8007d92:	3308      	addeq	r3, #8
 8007d94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d98:	bf04      	itt	eq
 8007d9a:	0100      	lsleq	r0, r0, #4
 8007d9c:	3304      	addeq	r3, #4
 8007d9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007da2:	bf04      	itt	eq
 8007da4:	0080      	lsleq	r0, r0, #2
 8007da6:	3302      	addeq	r3, #2
 8007da8:	2800      	cmp	r0, #0
 8007daa:	db05      	blt.n	8007db8 <__hi0bits+0x38>
 8007dac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007db0:	f103 0301 	add.w	r3, r3, #1
 8007db4:	bf08      	it	eq
 8007db6:	2320      	moveq	r3, #32
 8007db8:	4618      	mov	r0, r3
 8007dba:	4770      	bx	lr
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e7e4      	b.n	8007d8a <__hi0bits+0xa>

08007dc0 <__lo0bits>:
 8007dc0:	6803      	ldr	r3, [r0, #0]
 8007dc2:	f013 0207 	ands.w	r2, r3, #7
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	d00b      	beq.n	8007de2 <__lo0bits+0x22>
 8007dca:	07da      	lsls	r2, r3, #31
 8007dcc:	d423      	bmi.n	8007e16 <__lo0bits+0x56>
 8007dce:	0798      	lsls	r0, r3, #30
 8007dd0:	bf49      	itett	mi
 8007dd2:	085b      	lsrmi	r3, r3, #1
 8007dd4:	089b      	lsrpl	r3, r3, #2
 8007dd6:	2001      	movmi	r0, #1
 8007dd8:	600b      	strmi	r3, [r1, #0]
 8007dda:	bf5c      	itt	pl
 8007ddc:	600b      	strpl	r3, [r1, #0]
 8007dde:	2002      	movpl	r0, #2
 8007de0:	4770      	bx	lr
 8007de2:	b298      	uxth	r0, r3
 8007de4:	b9a8      	cbnz	r0, 8007e12 <__lo0bits+0x52>
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	2010      	movs	r0, #16
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	b90a      	cbnz	r2, 8007df2 <__lo0bits+0x32>
 8007dee:	3008      	adds	r0, #8
 8007df0:	0a1b      	lsrs	r3, r3, #8
 8007df2:	071a      	lsls	r2, r3, #28
 8007df4:	bf04      	itt	eq
 8007df6:	091b      	lsreq	r3, r3, #4
 8007df8:	3004      	addeq	r0, #4
 8007dfa:	079a      	lsls	r2, r3, #30
 8007dfc:	bf04      	itt	eq
 8007dfe:	089b      	lsreq	r3, r3, #2
 8007e00:	3002      	addeq	r0, #2
 8007e02:	07da      	lsls	r2, r3, #31
 8007e04:	d403      	bmi.n	8007e0e <__lo0bits+0x4e>
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	f100 0001 	add.w	r0, r0, #1
 8007e0c:	d005      	beq.n	8007e1a <__lo0bits+0x5a>
 8007e0e:	600b      	str	r3, [r1, #0]
 8007e10:	4770      	bx	lr
 8007e12:	4610      	mov	r0, r2
 8007e14:	e7e9      	b.n	8007dea <__lo0bits+0x2a>
 8007e16:	2000      	movs	r0, #0
 8007e18:	4770      	bx	lr
 8007e1a:	2020      	movs	r0, #32
 8007e1c:	4770      	bx	lr
	...

08007e20 <__i2b>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	460c      	mov	r4, r1
 8007e24:	2101      	movs	r1, #1
 8007e26:	f7ff feb9 	bl	8007b9c <_Balloc>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	b928      	cbnz	r0, 8007e3a <__i2b+0x1a>
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <__i2b+0x24>)
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <__i2b+0x28>)
 8007e32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e36:	f000 fe01 	bl	8008a3c <__assert_func>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	6144      	str	r4, [r0, #20]
 8007e3e:	6103      	str	r3, [r0, #16]
 8007e40:	bd10      	pop	{r4, pc}
 8007e42:	bf00      	nop
 8007e44:	0800a6e8 	.word	0x0800a6e8
 8007e48:	0800a774 	.word	0x0800a774

08007e4c <__multiply>:
 8007e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e50:	4691      	mov	r9, r2
 8007e52:	690a      	ldr	r2, [r1, #16]
 8007e54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bfb8      	it	lt
 8007e5c:	460b      	movlt	r3, r1
 8007e5e:	460c      	mov	r4, r1
 8007e60:	bfbc      	itt	lt
 8007e62:	464c      	movlt	r4, r9
 8007e64:	4699      	movlt	r9, r3
 8007e66:	6927      	ldr	r7, [r4, #16]
 8007e68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e6c:	68a3      	ldr	r3, [r4, #8]
 8007e6e:	6861      	ldr	r1, [r4, #4]
 8007e70:	eb07 060a 	add.w	r6, r7, sl
 8007e74:	42b3      	cmp	r3, r6
 8007e76:	b085      	sub	sp, #20
 8007e78:	bfb8      	it	lt
 8007e7a:	3101      	addlt	r1, #1
 8007e7c:	f7ff fe8e 	bl	8007b9c <_Balloc>
 8007e80:	b930      	cbnz	r0, 8007e90 <__multiply+0x44>
 8007e82:	4602      	mov	r2, r0
 8007e84:	4b44      	ldr	r3, [pc, #272]	; (8007f98 <__multiply+0x14c>)
 8007e86:	4845      	ldr	r0, [pc, #276]	; (8007f9c <__multiply+0x150>)
 8007e88:	f240 115d 	movw	r1, #349	; 0x15d
 8007e8c:	f000 fdd6 	bl	8008a3c <__assert_func>
 8007e90:	f100 0514 	add.w	r5, r0, #20
 8007e94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e98:	462b      	mov	r3, r5
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	4543      	cmp	r3, r8
 8007e9e:	d321      	bcc.n	8007ee4 <__multiply+0x98>
 8007ea0:	f104 0314 	add.w	r3, r4, #20
 8007ea4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ea8:	f109 0314 	add.w	r3, r9, #20
 8007eac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007eb0:	9202      	str	r2, [sp, #8]
 8007eb2:	1b3a      	subs	r2, r7, r4
 8007eb4:	3a15      	subs	r2, #21
 8007eb6:	f022 0203 	bic.w	r2, r2, #3
 8007eba:	3204      	adds	r2, #4
 8007ebc:	f104 0115 	add.w	r1, r4, #21
 8007ec0:	428f      	cmp	r7, r1
 8007ec2:	bf38      	it	cc
 8007ec4:	2204      	movcc	r2, #4
 8007ec6:	9201      	str	r2, [sp, #4]
 8007ec8:	9a02      	ldr	r2, [sp, #8]
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d80c      	bhi.n	8007eea <__multiply+0x9e>
 8007ed0:	2e00      	cmp	r6, #0
 8007ed2:	dd03      	ble.n	8007edc <__multiply+0x90>
 8007ed4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d05a      	beq.n	8007f92 <__multiply+0x146>
 8007edc:	6106      	str	r6, [r0, #16]
 8007ede:	b005      	add	sp, #20
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	f843 2b04 	str.w	r2, [r3], #4
 8007ee8:	e7d8      	b.n	8007e9c <__multiply+0x50>
 8007eea:	f8b3 a000 	ldrh.w	sl, [r3]
 8007eee:	f1ba 0f00 	cmp.w	sl, #0
 8007ef2:	d024      	beq.n	8007f3e <__multiply+0xf2>
 8007ef4:	f104 0e14 	add.w	lr, r4, #20
 8007ef8:	46a9      	mov	r9, r5
 8007efa:	f04f 0c00 	mov.w	ip, #0
 8007efe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f02:	f8d9 1000 	ldr.w	r1, [r9]
 8007f06:	fa1f fb82 	uxth.w	fp, r2
 8007f0a:	b289      	uxth	r1, r1
 8007f0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f14:	f8d9 2000 	ldr.w	r2, [r9]
 8007f18:	4461      	add	r1, ip
 8007f1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f26:	b289      	uxth	r1, r1
 8007f28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f2c:	4577      	cmp	r7, lr
 8007f2e:	f849 1b04 	str.w	r1, [r9], #4
 8007f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f36:	d8e2      	bhi.n	8007efe <__multiply+0xb2>
 8007f38:	9a01      	ldr	r2, [sp, #4]
 8007f3a:	f845 c002 	str.w	ip, [r5, r2]
 8007f3e:	9a03      	ldr	r2, [sp, #12]
 8007f40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f44:	3304      	adds	r3, #4
 8007f46:	f1b9 0f00 	cmp.w	r9, #0
 8007f4a:	d020      	beq.n	8007f8e <__multiply+0x142>
 8007f4c:	6829      	ldr	r1, [r5, #0]
 8007f4e:	f104 0c14 	add.w	ip, r4, #20
 8007f52:	46ae      	mov	lr, r5
 8007f54:	f04f 0a00 	mov.w	sl, #0
 8007f58:	f8bc b000 	ldrh.w	fp, [ip]
 8007f5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f60:	fb09 220b 	mla	r2, r9, fp, r2
 8007f64:	4492      	add	sl, r2
 8007f66:	b289      	uxth	r1, r1
 8007f68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f6c:	f84e 1b04 	str.w	r1, [lr], #4
 8007f70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f74:	f8be 1000 	ldrh.w	r1, [lr]
 8007f78:	0c12      	lsrs	r2, r2, #16
 8007f7a:	fb09 1102 	mla	r1, r9, r2, r1
 8007f7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f82:	4567      	cmp	r7, ip
 8007f84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f88:	d8e6      	bhi.n	8007f58 <__multiply+0x10c>
 8007f8a:	9a01      	ldr	r2, [sp, #4]
 8007f8c:	50a9      	str	r1, [r5, r2]
 8007f8e:	3504      	adds	r5, #4
 8007f90:	e79a      	b.n	8007ec8 <__multiply+0x7c>
 8007f92:	3e01      	subs	r6, #1
 8007f94:	e79c      	b.n	8007ed0 <__multiply+0x84>
 8007f96:	bf00      	nop
 8007f98:	0800a6e8 	.word	0x0800a6e8
 8007f9c:	0800a774 	.word	0x0800a774

08007fa0 <__pow5mult>:
 8007fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa4:	4615      	mov	r5, r2
 8007fa6:	f012 0203 	ands.w	r2, r2, #3
 8007faa:	4606      	mov	r6, r0
 8007fac:	460f      	mov	r7, r1
 8007fae:	d007      	beq.n	8007fc0 <__pow5mult+0x20>
 8007fb0:	4c25      	ldr	r4, [pc, #148]	; (8008048 <__pow5mult+0xa8>)
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fba:	f7ff fe51 	bl	8007c60 <__multadd>
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	10ad      	asrs	r5, r5, #2
 8007fc2:	d03d      	beq.n	8008040 <__pow5mult+0xa0>
 8007fc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fc6:	b97c      	cbnz	r4, 8007fe8 <__pow5mult+0x48>
 8007fc8:	2010      	movs	r0, #16
 8007fca:	f7ff fdbf 	bl	8007b4c <malloc>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	6270      	str	r0, [r6, #36]	; 0x24
 8007fd2:	b928      	cbnz	r0, 8007fe0 <__pow5mult+0x40>
 8007fd4:	4b1d      	ldr	r3, [pc, #116]	; (800804c <__pow5mult+0xac>)
 8007fd6:	481e      	ldr	r0, [pc, #120]	; (8008050 <__pow5mult+0xb0>)
 8007fd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fdc:	f000 fd2e 	bl	8008a3c <__assert_func>
 8007fe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fe4:	6004      	str	r4, [r0, #0]
 8007fe6:	60c4      	str	r4, [r0, #12]
 8007fe8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ff0:	b94c      	cbnz	r4, 8008006 <__pow5mult+0x66>
 8007ff2:	f240 2171 	movw	r1, #625	; 0x271
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7ff ff12 	bl	8007e20 <__i2b>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008002:	4604      	mov	r4, r0
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	f04f 0900 	mov.w	r9, #0
 800800a:	07eb      	lsls	r3, r5, #31
 800800c:	d50a      	bpl.n	8008024 <__pow5mult+0x84>
 800800e:	4639      	mov	r1, r7
 8008010:	4622      	mov	r2, r4
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff ff1a 	bl	8007e4c <__multiply>
 8008018:	4639      	mov	r1, r7
 800801a:	4680      	mov	r8, r0
 800801c:	4630      	mov	r0, r6
 800801e:	f7ff fdfd 	bl	8007c1c <_Bfree>
 8008022:	4647      	mov	r7, r8
 8008024:	106d      	asrs	r5, r5, #1
 8008026:	d00b      	beq.n	8008040 <__pow5mult+0xa0>
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	b938      	cbnz	r0, 800803c <__pow5mult+0x9c>
 800802c:	4622      	mov	r2, r4
 800802e:	4621      	mov	r1, r4
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff ff0b 	bl	8007e4c <__multiply>
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	f8c0 9000 	str.w	r9, [r0]
 800803c:	4604      	mov	r4, r0
 800803e:	e7e4      	b.n	800800a <__pow5mult+0x6a>
 8008040:	4638      	mov	r0, r7
 8008042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008046:	bf00      	nop
 8008048:	0800a8c0 	.word	0x0800a8c0
 800804c:	0800a676 	.word	0x0800a676
 8008050:	0800a774 	.word	0x0800a774

08008054 <__lshift>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	460c      	mov	r4, r1
 800805a:	6849      	ldr	r1, [r1, #4]
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	4607      	mov	r7, r0
 8008066:	4691      	mov	r9, r2
 8008068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800806c:	f108 0601 	add.w	r6, r8, #1
 8008070:	42b3      	cmp	r3, r6
 8008072:	db0b      	blt.n	800808c <__lshift+0x38>
 8008074:	4638      	mov	r0, r7
 8008076:	f7ff fd91 	bl	8007b9c <_Balloc>
 800807a:	4605      	mov	r5, r0
 800807c:	b948      	cbnz	r0, 8008092 <__lshift+0x3e>
 800807e:	4602      	mov	r2, r0
 8008080:	4b2a      	ldr	r3, [pc, #168]	; (800812c <__lshift+0xd8>)
 8008082:	482b      	ldr	r0, [pc, #172]	; (8008130 <__lshift+0xdc>)
 8008084:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008088:	f000 fcd8 	bl	8008a3c <__assert_func>
 800808c:	3101      	adds	r1, #1
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	e7ee      	b.n	8008070 <__lshift+0x1c>
 8008092:	2300      	movs	r3, #0
 8008094:	f100 0114 	add.w	r1, r0, #20
 8008098:	f100 0210 	add.w	r2, r0, #16
 800809c:	4618      	mov	r0, r3
 800809e:	4553      	cmp	r3, sl
 80080a0:	db37      	blt.n	8008112 <__lshift+0xbe>
 80080a2:	6920      	ldr	r0, [r4, #16]
 80080a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080a8:	f104 0314 	add.w	r3, r4, #20
 80080ac:	f019 091f 	ands.w	r9, r9, #31
 80080b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080b8:	d02f      	beq.n	800811a <__lshift+0xc6>
 80080ba:	f1c9 0e20 	rsb	lr, r9, #32
 80080be:	468a      	mov	sl, r1
 80080c0:	f04f 0c00 	mov.w	ip, #0
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	fa02 f209 	lsl.w	r2, r2, r9
 80080ca:	ea42 020c 	orr.w	r2, r2, ip
 80080ce:	f84a 2b04 	str.w	r2, [sl], #4
 80080d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d6:	4298      	cmp	r0, r3
 80080d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080dc:	d8f2      	bhi.n	80080c4 <__lshift+0x70>
 80080de:	1b03      	subs	r3, r0, r4
 80080e0:	3b15      	subs	r3, #21
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	3304      	adds	r3, #4
 80080e8:	f104 0215 	add.w	r2, r4, #21
 80080ec:	4290      	cmp	r0, r2
 80080ee:	bf38      	it	cc
 80080f0:	2304      	movcc	r3, #4
 80080f2:	f841 c003 	str.w	ip, [r1, r3]
 80080f6:	f1bc 0f00 	cmp.w	ip, #0
 80080fa:	d001      	beq.n	8008100 <__lshift+0xac>
 80080fc:	f108 0602 	add.w	r6, r8, #2
 8008100:	3e01      	subs	r6, #1
 8008102:	4638      	mov	r0, r7
 8008104:	612e      	str	r6, [r5, #16]
 8008106:	4621      	mov	r1, r4
 8008108:	f7ff fd88 	bl	8007c1c <_Bfree>
 800810c:	4628      	mov	r0, r5
 800810e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008112:	f842 0f04 	str.w	r0, [r2, #4]!
 8008116:	3301      	adds	r3, #1
 8008118:	e7c1      	b.n	800809e <__lshift+0x4a>
 800811a:	3904      	subs	r1, #4
 800811c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008120:	f841 2f04 	str.w	r2, [r1, #4]!
 8008124:	4298      	cmp	r0, r3
 8008126:	d8f9      	bhi.n	800811c <__lshift+0xc8>
 8008128:	e7ea      	b.n	8008100 <__lshift+0xac>
 800812a:	bf00      	nop
 800812c:	0800a6e8 	.word	0x0800a6e8
 8008130:	0800a774 	.word	0x0800a774

08008134 <__mcmp>:
 8008134:	b530      	push	{r4, r5, lr}
 8008136:	6902      	ldr	r2, [r0, #16]
 8008138:	690c      	ldr	r4, [r1, #16]
 800813a:	1b12      	subs	r2, r2, r4
 800813c:	d10e      	bne.n	800815c <__mcmp+0x28>
 800813e:	f100 0314 	add.w	r3, r0, #20
 8008142:	3114      	adds	r1, #20
 8008144:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008148:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800814c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008150:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008154:	42a5      	cmp	r5, r4
 8008156:	d003      	beq.n	8008160 <__mcmp+0x2c>
 8008158:	d305      	bcc.n	8008166 <__mcmp+0x32>
 800815a:	2201      	movs	r2, #1
 800815c:	4610      	mov	r0, r2
 800815e:	bd30      	pop	{r4, r5, pc}
 8008160:	4283      	cmp	r3, r0
 8008162:	d3f3      	bcc.n	800814c <__mcmp+0x18>
 8008164:	e7fa      	b.n	800815c <__mcmp+0x28>
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	e7f7      	b.n	800815c <__mcmp+0x28>

0800816c <__mdiff>:
 800816c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	460c      	mov	r4, r1
 8008172:	4606      	mov	r6, r0
 8008174:	4611      	mov	r1, r2
 8008176:	4620      	mov	r0, r4
 8008178:	4690      	mov	r8, r2
 800817a:	f7ff ffdb 	bl	8008134 <__mcmp>
 800817e:	1e05      	subs	r5, r0, #0
 8008180:	d110      	bne.n	80081a4 <__mdiff+0x38>
 8008182:	4629      	mov	r1, r5
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff fd09 	bl	8007b9c <_Balloc>
 800818a:	b930      	cbnz	r0, 800819a <__mdiff+0x2e>
 800818c:	4b3a      	ldr	r3, [pc, #232]	; (8008278 <__mdiff+0x10c>)
 800818e:	4602      	mov	r2, r0
 8008190:	f240 2132 	movw	r1, #562	; 0x232
 8008194:	4839      	ldr	r0, [pc, #228]	; (800827c <__mdiff+0x110>)
 8008196:	f000 fc51 	bl	8008a3c <__assert_func>
 800819a:	2301      	movs	r3, #1
 800819c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	bfa4      	itt	ge
 80081a6:	4643      	movge	r3, r8
 80081a8:	46a0      	movge	r8, r4
 80081aa:	4630      	mov	r0, r6
 80081ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081b0:	bfa6      	itte	ge
 80081b2:	461c      	movge	r4, r3
 80081b4:	2500      	movge	r5, #0
 80081b6:	2501      	movlt	r5, #1
 80081b8:	f7ff fcf0 	bl	8007b9c <_Balloc>
 80081bc:	b920      	cbnz	r0, 80081c8 <__mdiff+0x5c>
 80081be:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <__mdiff+0x10c>)
 80081c0:	4602      	mov	r2, r0
 80081c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081c6:	e7e5      	b.n	8008194 <__mdiff+0x28>
 80081c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081cc:	6926      	ldr	r6, [r4, #16]
 80081ce:	60c5      	str	r5, [r0, #12]
 80081d0:	f104 0914 	add.w	r9, r4, #20
 80081d4:	f108 0514 	add.w	r5, r8, #20
 80081d8:	f100 0e14 	add.w	lr, r0, #20
 80081dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081e4:	f108 0210 	add.w	r2, r8, #16
 80081e8:	46f2      	mov	sl, lr
 80081ea:	2100      	movs	r1, #0
 80081ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80081f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081f4:	fa1f f883 	uxth.w	r8, r3
 80081f8:	fa11 f18b 	uxtah	r1, r1, fp
 80081fc:	0c1b      	lsrs	r3, r3, #16
 80081fe:	eba1 0808 	sub.w	r8, r1, r8
 8008202:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008206:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800820a:	fa1f f888 	uxth.w	r8, r8
 800820e:	1419      	asrs	r1, r3, #16
 8008210:	454e      	cmp	r6, r9
 8008212:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008216:	f84a 3b04 	str.w	r3, [sl], #4
 800821a:	d8e7      	bhi.n	80081ec <__mdiff+0x80>
 800821c:	1b33      	subs	r3, r6, r4
 800821e:	3b15      	subs	r3, #21
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	3304      	adds	r3, #4
 8008226:	3415      	adds	r4, #21
 8008228:	42a6      	cmp	r6, r4
 800822a:	bf38      	it	cc
 800822c:	2304      	movcc	r3, #4
 800822e:	441d      	add	r5, r3
 8008230:	4473      	add	r3, lr
 8008232:	469e      	mov	lr, r3
 8008234:	462e      	mov	r6, r5
 8008236:	4566      	cmp	r6, ip
 8008238:	d30e      	bcc.n	8008258 <__mdiff+0xec>
 800823a:	f10c 0203 	add.w	r2, ip, #3
 800823e:	1b52      	subs	r2, r2, r5
 8008240:	f022 0203 	bic.w	r2, r2, #3
 8008244:	3d03      	subs	r5, #3
 8008246:	45ac      	cmp	ip, r5
 8008248:	bf38      	it	cc
 800824a:	2200      	movcc	r2, #0
 800824c:	441a      	add	r2, r3
 800824e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008252:	b17b      	cbz	r3, 8008274 <__mdiff+0x108>
 8008254:	6107      	str	r7, [r0, #16]
 8008256:	e7a3      	b.n	80081a0 <__mdiff+0x34>
 8008258:	f856 8b04 	ldr.w	r8, [r6], #4
 800825c:	fa11 f288 	uxtah	r2, r1, r8
 8008260:	1414      	asrs	r4, r2, #16
 8008262:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008266:	b292      	uxth	r2, r2
 8008268:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800826c:	f84e 2b04 	str.w	r2, [lr], #4
 8008270:	1421      	asrs	r1, r4, #16
 8008272:	e7e0      	b.n	8008236 <__mdiff+0xca>
 8008274:	3f01      	subs	r7, #1
 8008276:	e7ea      	b.n	800824e <__mdiff+0xe2>
 8008278:	0800a6e8 	.word	0x0800a6e8
 800827c:	0800a774 	.word	0x0800a774

08008280 <__ulp>:
 8008280:	b082      	sub	sp, #8
 8008282:	ed8d 0b00 	vstr	d0, [sp]
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	4912      	ldr	r1, [pc, #72]	; (80082d4 <__ulp+0x54>)
 800828a:	4019      	ands	r1, r3
 800828c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008290:	2900      	cmp	r1, #0
 8008292:	dd05      	ble.n	80082a0 <__ulp+0x20>
 8008294:	2200      	movs	r2, #0
 8008296:	460b      	mov	r3, r1
 8008298:	ec43 2b10 	vmov	d0, r2, r3
 800829c:	b002      	add	sp, #8
 800829e:	4770      	bx	lr
 80082a0:	4249      	negs	r1, r1
 80082a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80082a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	da04      	bge.n	80082be <__ulp+0x3e>
 80082b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80082b8:	fa41 f300 	asr.w	r3, r1, r0
 80082bc:	e7ec      	b.n	8008298 <__ulp+0x18>
 80082be:	f1a0 0114 	sub.w	r1, r0, #20
 80082c2:	291e      	cmp	r1, #30
 80082c4:	bfda      	itte	le
 80082c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80082ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80082ce:	2101      	movgt	r1, #1
 80082d0:	460a      	mov	r2, r1
 80082d2:	e7e1      	b.n	8008298 <__ulp+0x18>
 80082d4:	7ff00000 	.word	0x7ff00000

080082d8 <__b2d>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	6905      	ldr	r5, [r0, #16]
 80082dc:	f100 0714 	add.w	r7, r0, #20
 80082e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80082e4:	1f2e      	subs	r6, r5, #4
 80082e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7ff fd48 	bl	8007d80 <__hi0bits>
 80082f0:	f1c0 0320 	rsb	r3, r0, #32
 80082f4:	280a      	cmp	r0, #10
 80082f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008374 <__b2d+0x9c>
 80082fa:	600b      	str	r3, [r1, #0]
 80082fc:	dc14      	bgt.n	8008328 <__b2d+0x50>
 80082fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8008302:	fa24 f10e 	lsr.w	r1, r4, lr
 8008306:	42b7      	cmp	r7, r6
 8008308:	ea41 030c 	orr.w	r3, r1, ip
 800830c:	bf34      	ite	cc
 800830e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008312:	2100      	movcs	r1, #0
 8008314:	3015      	adds	r0, #21
 8008316:	fa04 f000 	lsl.w	r0, r4, r0
 800831a:	fa21 f10e 	lsr.w	r1, r1, lr
 800831e:	ea40 0201 	orr.w	r2, r0, r1
 8008322:	ec43 2b10 	vmov	d0, r2, r3
 8008326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008328:	42b7      	cmp	r7, r6
 800832a:	bf3a      	itte	cc
 800832c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008330:	f1a5 0608 	subcc.w	r6, r5, #8
 8008334:	2100      	movcs	r1, #0
 8008336:	380b      	subs	r0, #11
 8008338:	d017      	beq.n	800836a <__b2d+0x92>
 800833a:	f1c0 0c20 	rsb	ip, r0, #32
 800833e:	fa04 f500 	lsl.w	r5, r4, r0
 8008342:	42be      	cmp	r6, r7
 8008344:	fa21 f40c 	lsr.w	r4, r1, ip
 8008348:	ea45 0504 	orr.w	r5, r5, r4
 800834c:	bf8c      	ite	hi
 800834e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008352:	2400      	movls	r4, #0
 8008354:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008358:	fa01 f000 	lsl.w	r0, r1, r0
 800835c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008360:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008364:	ea40 0204 	orr.w	r2, r0, r4
 8008368:	e7db      	b.n	8008322 <__b2d+0x4a>
 800836a:	ea44 030c 	orr.w	r3, r4, ip
 800836e:	460a      	mov	r2, r1
 8008370:	e7d7      	b.n	8008322 <__b2d+0x4a>
 8008372:	bf00      	nop
 8008374:	3ff00000 	.word	0x3ff00000

08008378 <__d2b>:
 8008378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4689      	mov	r9, r1
 800837e:	2101      	movs	r1, #1
 8008380:	ec57 6b10 	vmov	r6, r7, d0
 8008384:	4690      	mov	r8, r2
 8008386:	f7ff fc09 	bl	8007b9c <_Balloc>
 800838a:	4604      	mov	r4, r0
 800838c:	b930      	cbnz	r0, 800839c <__d2b+0x24>
 800838e:	4602      	mov	r2, r0
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <__d2b+0xb0>)
 8008392:	4826      	ldr	r0, [pc, #152]	; (800842c <__d2b+0xb4>)
 8008394:	f240 310a 	movw	r1, #778	; 0x30a
 8008398:	f000 fb50 	bl	8008a3c <__assert_func>
 800839c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083a4:	bb35      	cbnz	r5, 80083f4 <__d2b+0x7c>
 80083a6:	2e00      	cmp	r6, #0
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	d028      	beq.n	80083fe <__d2b+0x86>
 80083ac:	4668      	mov	r0, sp
 80083ae:	9600      	str	r6, [sp, #0]
 80083b0:	f7ff fd06 	bl	8007dc0 <__lo0bits>
 80083b4:	9900      	ldr	r1, [sp, #0]
 80083b6:	b300      	cbz	r0, 80083fa <__d2b+0x82>
 80083b8:	9a01      	ldr	r2, [sp, #4]
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	fa02 f303 	lsl.w	r3, r2, r3
 80083c2:	430b      	orrs	r3, r1
 80083c4:	40c2      	lsrs	r2, r0
 80083c6:	6163      	str	r3, [r4, #20]
 80083c8:	9201      	str	r2, [sp, #4]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	61a3      	str	r3, [r4, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bf14      	ite	ne
 80083d2:	2202      	movne	r2, #2
 80083d4:	2201      	moveq	r2, #1
 80083d6:	6122      	str	r2, [r4, #16]
 80083d8:	b1d5      	cbz	r5, 8008410 <__d2b+0x98>
 80083da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80083de:	4405      	add	r5, r0
 80083e0:	f8c9 5000 	str.w	r5, [r9]
 80083e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083e8:	f8c8 0000 	str.w	r0, [r8]
 80083ec:	4620      	mov	r0, r4
 80083ee:	b003      	add	sp, #12
 80083f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f8:	e7d5      	b.n	80083a6 <__d2b+0x2e>
 80083fa:	6161      	str	r1, [r4, #20]
 80083fc:	e7e5      	b.n	80083ca <__d2b+0x52>
 80083fe:	a801      	add	r0, sp, #4
 8008400:	f7ff fcde 	bl	8007dc0 <__lo0bits>
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	6163      	str	r3, [r4, #20]
 8008408:	2201      	movs	r2, #1
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	3020      	adds	r0, #32
 800840e:	e7e3      	b.n	80083d8 <__d2b+0x60>
 8008410:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008418:	f8c9 0000 	str.w	r0, [r9]
 800841c:	6918      	ldr	r0, [r3, #16]
 800841e:	f7ff fcaf 	bl	8007d80 <__hi0bits>
 8008422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008426:	e7df      	b.n	80083e8 <__d2b+0x70>
 8008428:	0800a6e8 	.word	0x0800a6e8
 800842c:	0800a774 	.word	0x0800a774

08008430 <__ratio>:
 8008430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	4688      	mov	r8, r1
 8008436:	4669      	mov	r1, sp
 8008438:	4681      	mov	r9, r0
 800843a:	f7ff ff4d 	bl	80082d8 <__b2d>
 800843e:	a901      	add	r1, sp, #4
 8008440:	4640      	mov	r0, r8
 8008442:	ec55 4b10 	vmov	r4, r5, d0
 8008446:	f7ff ff47 	bl	80082d8 <__b2d>
 800844a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800844e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008452:	eba3 0c02 	sub.w	ip, r3, r2
 8008456:	e9dd 3200 	ldrd	r3, r2, [sp]
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008460:	ec51 0b10 	vmov	r0, r1, d0
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfd6      	itet	le
 8008468:	460a      	movle	r2, r1
 800846a:	462a      	movgt	r2, r5
 800846c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008470:	468b      	mov	fp, r1
 8008472:	462f      	mov	r7, r5
 8008474:	bfd4      	ite	le
 8008476:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800847a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800847e:	4620      	mov	r0, r4
 8008480:	ee10 2a10 	vmov	r2, s0
 8008484:	465b      	mov	r3, fp
 8008486:	4639      	mov	r1, r7
 8008488:	f7f8 f9e8 	bl	800085c <__aeabi_ddiv>
 800848c:	ec41 0b10 	vmov	d0, r0, r1
 8008490:	b003      	add	sp, #12
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008496 <__copybits>:
 8008496:	3901      	subs	r1, #1
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	1149      	asrs	r1, r1, #5
 800849c:	6914      	ldr	r4, [r2, #16]
 800849e:	3101      	adds	r1, #1
 80084a0:	f102 0314 	add.w	r3, r2, #20
 80084a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084ac:	1f05      	subs	r5, r0, #4
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	d30c      	bcc.n	80084cc <__copybits+0x36>
 80084b2:	1aa3      	subs	r3, r4, r2
 80084b4:	3b11      	subs	r3, #17
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	3211      	adds	r2, #17
 80084bc:	42a2      	cmp	r2, r4
 80084be:	bf88      	it	hi
 80084c0:	2300      	movhi	r3, #0
 80084c2:	4418      	add	r0, r3
 80084c4:	2300      	movs	r3, #0
 80084c6:	4288      	cmp	r0, r1
 80084c8:	d305      	bcc.n	80084d6 <__copybits+0x40>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80084d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80084d4:	e7eb      	b.n	80084ae <__copybits+0x18>
 80084d6:	f840 3b04 	str.w	r3, [r0], #4
 80084da:	e7f4      	b.n	80084c6 <__copybits+0x30>

080084dc <__any_on>:
 80084dc:	f100 0214 	add.w	r2, r0, #20
 80084e0:	6900      	ldr	r0, [r0, #16]
 80084e2:	114b      	asrs	r3, r1, #5
 80084e4:	4298      	cmp	r0, r3
 80084e6:	b510      	push	{r4, lr}
 80084e8:	db11      	blt.n	800850e <__any_on+0x32>
 80084ea:	dd0a      	ble.n	8008502 <__any_on+0x26>
 80084ec:	f011 011f 	ands.w	r1, r1, #31
 80084f0:	d007      	beq.n	8008502 <__any_on+0x26>
 80084f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084f6:	fa24 f001 	lsr.w	r0, r4, r1
 80084fa:	fa00 f101 	lsl.w	r1, r0, r1
 80084fe:	428c      	cmp	r4, r1
 8008500:	d10b      	bne.n	800851a <__any_on+0x3e>
 8008502:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008506:	4293      	cmp	r3, r2
 8008508:	d803      	bhi.n	8008512 <__any_on+0x36>
 800850a:	2000      	movs	r0, #0
 800850c:	bd10      	pop	{r4, pc}
 800850e:	4603      	mov	r3, r0
 8008510:	e7f7      	b.n	8008502 <__any_on+0x26>
 8008512:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008516:	2900      	cmp	r1, #0
 8008518:	d0f5      	beq.n	8008506 <__any_on+0x2a>
 800851a:	2001      	movs	r0, #1
 800851c:	e7f6      	b.n	800850c <__any_on+0x30>

0800851e <_calloc_r>:
 800851e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008520:	fba1 2402 	umull	r2, r4, r1, r2
 8008524:	b94c      	cbnz	r4, 800853a <_calloc_r+0x1c>
 8008526:	4611      	mov	r1, r2
 8008528:	9201      	str	r2, [sp, #4]
 800852a:	f000 f87b 	bl	8008624 <_malloc_r>
 800852e:	9a01      	ldr	r2, [sp, #4]
 8008530:	4605      	mov	r5, r0
 8008532:	b930      	cbnz	r0, 8008542 <_calloc_r+0x24>
 8008534:	4628      	mov	r0, r5
 8008536:	b003      	add	sp, #12
 8008538:	bd30      	pop	{r4, r5, pc}
 800853a:	220c      	movs	r2, #12
 800853c:	6002      	str	r2, [r0, #0]
 800853e:	2500      	movs	r5, #0
 8008540:	e7f8      	b.n	8008534 <_calloc_r+0x16>
 8008542:	4621      	mov	r1, r4
 8008544:	f7fc fb8c 	bl	8004c60 <memset>
 8008548:	e7f4      	b.n	8008534 <_calloc_r+0x16>
	...

0800854c <_free_r>:
 800854c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800854e:	2900      	cmp	r1, #0
 8008550:	d044      	beq.n	80085dc <_free_r+0x90>
 8008552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008556:	9001      	str	r0, [sp, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f1a1 0404 	sub.w	r4, r1, #4
 800855e:	bfb8      	it	lt
 8008560:	18e4      	addlt	r4, r4, r3
 8008562:	f000 fab5 	bl	8008ad0 <__malloc_lock>
 8008566:	4a1e      	ldr	r2, [pc, #120]	; (80085e0 <_free_r+0x94>)
 8008568:	9801      	ldr	r0, [sp, #4]
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	b933      	cbnz	r3, 800857c <_free_r+0x30>
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6014      	str	r4, [r2, #0]
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008578:	f000 bab0 	b.w	8008adc <__malloc_unlock>
 800857c:	42a3      	cmp	r3, r4
 800857e:	d908      	bls.n	8008592 <_free_r+0x46>
 8008580:	6825      	ldr	r5, [r4, #0]
 8008582:	1961      	adds	r1, r4, r5
 8008584:	428b      	cmp	r3, r1
 8008586:	bf01      	itttt	eq
 8008588:	6819      	ldreq	r1, [r3, #0]
 800858a:	685b      	ldreq	r3, [r3, #4]
 800858c:	1949      	addeq	r1, r1, r5
 800858e:	6021      	streq	r1, [r4, #0]
 8008590:	e7ed      	b.n	800856e <_free_r+0x22>
 8008592:	461a      	mov	r2, r3
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	b10b      	cbz	r3, 800859c <_free_r+0x50>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d9fa      	bls.n	8008592 <_free_r+0x46>
 800859c:	6811      	ldr	r1, [r2, #0]
 800859e:	1855      	adds	r5, r2, r1
 80085a0:	42a5      	cmp	r5, r4
 80085a2:	d10b      	bne.n	80085bc <_free_r+0x70>
 80085a4:	6824      	ldr	r4, [r4, #0]
 80085a6:	4421      	add	r1, r4
 80085a8:	1854      	adds	r4, r2, r1
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	d1e0      	bne.n	8008572 <_free_r+0x26>
 80085b0:	681c      	ldr	r4, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	6053      	str	r3, [r2, #4]
 80085b6:	4421      	add	r1, r4
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	e7da      	b.n	8008572 <_free_r+0x26>
 80085bc:	d902      	bls.n	80085c4 <_free_r+0x78>
 80085be:	230c      	movs	r3, #12
 80085c0:	6003      	str	r3, [r0, #0]
 80085c2:	e7d6      	b.n	8008572 <_free_r+0x26>
 80085c4:	6825      	ldr	r5, [r4, #0]
 80085c6:	1961      	adds	r1, r4, r5
 80085c8:	428b      	cmp	r3, r1
 80085ca:	bf04      	itt	eq
 80085cc:	6819      	ldreq	r1, [r3, #0]
 80085ce:	685b      	ldreq	r3, [r3, #4]
 80085d0:	6063      	str	r3, [r4, #4]
 80085d2:	bf04      	itt	eq
 80085d4:	1949      	addeq	r1, r1, r5
 80085d6:	6021      	streq	r1, [r4, #0]
 80085d8:	6054      	str	r4, [r2, #4]
 80085da:	e7ca      	b.n	8008572 <_free_r+0x26>
 80085dc:	b003      	add	sp, #12
 80085de:	bd30      	pop	{r4, r5, pc}
 80085e0:	20000e78 	.word	0x20000e78

080085e4 <sbrk_aligned>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4e0e      	ldr	r6, [pc, #56]	; (8008620 <sbrk_aligned+0x3c>)
 80085e8:	460c      	mov	r4, r1
 80085ea:	6831      	ldr	r1, [r6, #0]
 80085ec:	4605      	mov	r5, r0
 80085ee:	b911      	cbnz	r1, 80085f6 <sbrk_aligned+0x12>
 80085f0:	f000 f9f2 	bl	80089d8 <_sbrk_r>
 80085f4:	6030      	str	r0, [r6, #0]
 80085f6:	4621      	mov	r1, r4
 80085f8:	4628      	mov	r0, r5
 80085fa:	f000 f9ed 	bl	80089d8 <_sbrk_r>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	d00a      	beq.n	8008618 <sbrk_aligned+0x34>
 8008602:	1cc4      	adds	r4, r0, #3
 8008604:	f024 0403 	bic.w	r4, r4, #3
 8008608:	42a0      	cmp	r0, r4
 800860a:	d007      	beq.n	800861c <sbrk_aligned+0x38>
 800860c:	1a21      	subs	r1, r4, r0
 800860e:	4628      	mov	r0, r5
 8008610:	f000 f9e2 	bl	80089d8 <_sbrk_r>
 8008614:	3001      	adds	r0, #1
 8008616:	d101      	bne.n	800861c <sbrk_aligned+0x38>
 8008618:	f04f 34ff 	mov.w	r4, #4294967295
 800861c:	4620      	mov	r0, r4
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	20000e7c 	.word	0x20000e7c

08008624 <_malloc_r>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	1ccd      	adds	r5, r1, #3
 800862a:	f025 0503 	bic.w	r5, r5, #3
 800862e:	3508      	adds	r5, #8
 8008630:	2d0c      	cmp	r5, #12
 8008632:	bf38      	it	cc
 8008634:	250c      	movcc	r5, #12
 8008636:	2d00      	cmp	r5, #0
 8008638:	4607      	mov	r7, r0
 800863a:	db01      	blt.n	8008640 <_malloc_r+0x1c>
 800863c:	42a9      	cmp	r1, r5
 800863e:	d905      	bls.n	800864c <_malloc_r+0x28>
 8008640:	230c      	movs	r3, #12
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	2600      	movs	r6, #0
 8008646:	4630      	mov	r0, r6
 8008648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800864c:	4e2e      	ldr	r6, [pc, #184]	; (8008708 <_malloc_r+0xe4>)
 800864e:	f000 fa3f 	bl	8008ad0 <__malloc_lock>
 8008652:	6833      	ldr	r3, [r6, #0]
 8008654:	461c      	mov	r4, r3
 8008656:	bb34      	cbnz	r4, 80086a6 <_malloc_r+0x82>
 8008658:	4629      	mov	r1, r5
 800865a:	4638      	mov	r0, r7
 800865c:	f7ff ffc2 	bl	80085e4 <sbrk_aligned>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	4604      	mov	r4, r0
 8008664:	d14d      	bne.n	8008702 <_malloc_r+0xde>
 8008666:	6834      	ldr	r4, [r6, #0]
 8008668:	4626      	mov	r6, r4
 800866a:	2e00      	cmp	r6, #0
 800866c:	d140      	bne.n	80086f0 <_malloc_r+0xcc>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	4631      	mov	r1, r6
 8008672:	4638      	mov	r0, r7
 8008674:	eb04 0803 	add.w	r8, r4, r3
 8008678:	f000 f9ae 	bl	80089d8 <_sbrk_r>
 800867c:	4580      	cmp	r8, r0
 800867e:	d13a      	bne.n	80086f6 <_malloc_r+0xd2>
 8008680:	6821      	ldr	r1, [r4, #0]
 8008682:	3503      	adds	r5, #3
 8008684:	1a6d      	subs	r5, r5, r1
 8008686:	f025 0503 	bic.w	r5, r5, #3
 800868a:	3508      	adds	r5, #8
 800868c:	2d0c      	cmp	r5, #12
 800868e:	bf38      	it	cc
 8008690:	250c      	movcc	r5, #12
 8008692:	4629      	mov	r1, r5
 8008694:	4638      	mov	r0, r7
 8008696:	f7ff ffa5 	bl	80085e4 <sbrk_aligned>
 800869a:	3001      	adds	r0, #1
 800869c:	d02b      	beq.n	80086f6 <_malloc_r+0xd2>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	442b      	add	r3, r5
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	e00e      	b.n	80086c4 <_malloc_r+0xa0>
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	1b52      	subs	r2, r2, r5
 80086aa:	d41e      	bmi.n	80086ea <_malloc_r+0xc6>
 80086ac:	2a0b      	cmp	r2, #11
 80086ae:	d916      	bls.n	80086de <_malloc_r+0xba>
 80086b0:	1961      	adds	r1, r4, r5
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	6025      	str	r5, [r4, #0]
 80086b6:	bf18      	it	ne
 80086b8:	6059      	strne	r1, [r3, #4]
 80086ba:	6863      	ldr	r3, [r4, #4]
 80086bc:	bf08      	it	eq
 80086be:	6031      	streq	r1, [r6, #0]
 80086c0:	5162      	str	r2, [r4, r5]
 80086c2:	604b      	str	r3, [r1, #4]
 80086c4:	4638      	mov	r0, r7
 80086c6:	f104 060b 	add.w	r6, r4, #11
 80086ca:	f000 fa07 	bl	8008adc <__malloc_unlock>
 80086ce:	f026 0607 	bic.w	r6, r6, #7
 80086d2:	1d23      	adds	r3, r4, #4
 80086d4:	1af2      	subs	r2, r6, r3
 80086d6:	d0b6      	beq.n	8008646 <_malloc_r+0x22>
 80086d8:	1b9b      	subs	r3, r3, r6
 80086da:	50a3      	str	r3, [r4, r2]
 80086dc:	e7b3      	b.n	8008646 <_malloc_r+0x22>
 80086de:	6862      	ldr	r2, [r4, #4]
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	bf0c      	ite	eq
 80086e4:	6032      	streq	r2, [r6, #0]
 80086e6:	605a      	strne	r2, [r3, #4]
 80086e8:	e7ec      	b.n	80086c4 <_malloc_r+0xa0>
 80086ea:	4623      	mov	r3, r4
 80086ec:	6864      	ldr	r4, [r4, #4]
 80086ee:	e7b2      	b.n	8008656 <_malloc_r+0x32>
 80086f0:	4634      	mov	r4, r6
 80086f2:	6876      	ldr	r6, [r6, #4]
 80086f4:	e7b9      	b.n	800866a <_malloc_r+0x46>
 80086f6:	230c      	movs	r3, #12
 80086f8:	603b      	str	r3, [r7, #0]
 80086fa:	4638      	mov	r0, r7
 80086fc:	f000 f9ee 	bl	8008adc <__malloc_unlock>
 8008700:	e7a1      	b.n	8008646 <_malloc_r+0x22>
 8008702:	6025      	str	r5, [r4, #0]
 8008704:	e7de      	b.n	80086c4 <_malloc_r+0xa0>
 8008706:	bf00      	nop
 8008708:	20000e78 	.word	0x20000e78

0800870c <__ssputs_r>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	688e      	ldr	r6, [r1, #8]
 8008712:	429e      	cmp	r6, r3
 8008714:	4682      	mov	sl, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4690      	mov	r8, r2
 800871a:	461f      	mov	r7, r3
 800871c:	d838      	bhi.n	8008790 <__ssputs_r+0x84>
 800871e:	898a      	ldrh	r2, [r1, #12]
 8008720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008724:	d032      	beq.n	800878c <__ssputs_r+0x80>
 8008726:	6825      	ldr	r5, [r4, #0]
 8008728:	6909      	ldr	r1, [r1, #16]
 800872a:	eba5 0901 	sub.w	r9, r5, r1
 800872e:	6965      	ldr	r5, [r4, #20]
 8008730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008738:	3301      	adds	r3, #1
 800873a:	444b      	add	r3, r9
 800873c:	106d      	asrs	r5, r5, #1
 800873e:	429d      	cmp	r5, r3
 8008740:	bf38      	it	cc
 8008742:	461d      	movcc	r5, r3
 8008744:	0553      	lsls	r3, r2, #21
 8008746:	d531      	bpl.n	80087ac <__ssputs_r+0xa0>
 8008748:	4629      	mov	r1, r5
 800874a:	f7ff ff6b 	bl	8008624 <_malloc_r>
 800874e:	4606      	mov	r6, r0
 8008750:	b950      	cbnz	r0, 8008768 <__ssputs_r+0x5c>
 8008752:	230c      	movs	r3, #12
 8008754:	f8ca 3000 	str.w	r3, [sl]
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	6921      	ldr	r1, [r4, #16]
 800876a:	464a      	mov	r2, r9
 800876c:	f7ff fa08 	bl	8007b80 <memcpy>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	6126      	str	r6, [r4, #16]
 800877e:	6165      	str	r5, [r4, #20]
 8008780:	444e      	add	r6, r9
 8008782:	eba5 0509 	sub.w	r5, r5, r9
 8008786:	6026      	str	r6, [r4, #0]
 8008788:	60a5      	str	r5, [r4, #8]
 800878a:	463e      	mov	r6, r7
 800878c:	42be      	cmp	r6, r7
 800878e:	d900      	bls.n	8008792 <__ssputs_r+0x86>
 8008790:	463e      	mov	r6, r7
 8008792:	6820      	ldr	r0, [r4, #0]
 8008794:	4632      	mov	r2, r6
 8008796:	4641      	mov	r1, r8
 8008798:	f000 f980 	bl	8008a9c <memmove>
 800879c:	68a3      	ldr	r3, [r4, #8]
 800879e:	1b9b      	subs	r3, r3, r6
 80087a0:	60a3      	str	r3, [r4, #8]
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	4433      	add	r3, r6
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	2000      	movs	r0, #0
 80087aa:	e7db      	b.n	8008764 <__ssputs_r+0x58>
 80087ac:	462a      	mov	r2, r5
 80087ae:	f000 f99b 	bl	8008ae8 <_realloc_r>
 80087b2:	4606      	mov	r6, r0
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d1e1      	bne.n	800877c <__ssputs_r+0x70>
 80087b8:	6921      	ldr	r1, [r4, #16]
 80087ba:	4650      	mov	r0, sl
 80087bc:	f7ff fec6 	bl	800854c <_free_r>
 80087c0:	e7c7      	b.n	8008752 <__ssputs_r+0x46>
	...

080087c4 <_svfiprintf_r>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	4698      	mov	r8, r3
 80087ca:	898b      	ldrh	r3, [r1, #12]
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	b09d      	sub	sp, #116	; 0x74
 80087d0:	4607      	mov	r7, r0
 80087d2:	460d      	mov	r5, r1
 80087d4:	4614      	mov	r4, r2
 80087d6:	d50e      	bpl.n	80087f6 <_svfiprintf_r+0x32>
 80087d8:	690b      	ldr	r3, [r1, #16]
 80087da:	b963      	cbnz	r3, 80087f6 <_svfiprintf_r+0x32>
 80087dc:	2140      	movs	r1, #64	; 0x40
 80087de:	f7ff ff21 	bl	8008624 <_malloc_r>
 80087e2:	6028      	str	r0, [r5, #0]
 80087e4:	6128      	str	r0, [r5, #16]
 80087e6:	b920      	cbnz	r0, 80087f2 <_svfiprintf_r+0x2e>
 80087e8:	230c      	movs	r3, #12
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	e0d1      	b.n	8008996 <_svfiprintf_r+0x1d2>
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	616b      	str	r3, [r5, #20]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9309      	str	r3, [sp, #36]	; 0x24
 80087fa:	2320      	movs	r3, #32
 80087fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008800:	f8cd 800c 	str.w	r8, [sp, #12]
 8008804:	2330      	movs	r3, #48	; 0x30
 8008806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089b0 <_svfiprintf_r+0x1ec>
 800880a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800880e:	f04f 0901 	mov.w	r9, #1
 8008812:	4623      	mov	r3, r4
 8008814:	469a      	mov	sl, r3
 8008816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800881a:	b10a      	cbz	r2, 8008820 <_svfiprintf_r+0x5c>
 800881c:	2a25      	cmp	r2, #37	; 0x25
 800881e:	d1f9      	bne.n	8008814 <_svfiprintf_r+0x50>
 8008820:	ebba 0b04 	subs.w	fp, sl, r4
 8008824:	d00b      	beq.n	800883e <_svfiprintf_r+0x7a>
 8008826:	465b      	mov	r3, fp
 8008828:	4622      	mov	r2, r4
 800882a:	4629      	mov	r1, r5
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff ff6d 	bl	800870c <__ssputs_r>
 8008832:	3001      	adds	r0, #1
 8008834:	f000 80aa 	beq.w	800898c <_svfiprintf_r+0x1c8>
 8008838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800883a:	445a      	add	r2, fp
 800883c:	9209      	str	r2, [sp, #36]	; 0x24
 800883e:	f89a 3000 	ldrb.w	r3, [sl]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 80a2 	beq.w	800898c <_svfiprintf_r+0x1c8>
 8008848:	2300      	movs	r3, #0
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008852:	f10a 0a01 	add.w	sl, sl, #1
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	9307      	str	r3, [sp, #28]
 800885a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800885e:	931a      	str	r3, [sp, #104]	; 0x68
 8008860:	4654      	mov	r4, sl
 8008862:	2205      	movs	r2, #5
 8008864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008868:	4851      	ldr	r0, [pc, #324]	; (80089b0 <_svfiprintf_r+0x1ec>)
 800886a:	f7f7 fcc1 	bl	80001f0 <memchr>
 800886e:	9a04      	ldr	r2, [sp, #16]
 8008870:	b9d8      	cbnz	r0, 80088aa <_svfiprintf_r+0xe6>
 8008872:	06d0      	lsls	r0, r2, #27
 8008874:	bf44      	itt	mi
 8008876:	2320      	movmi	r3, #32
 8008878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887c:	0711      	lsls	r1, r2, #28
 800887e:	bf44      	itt	mi
 8008880:	232b      	movmi	r3, #43	; 0x2b
 8008882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008886:	f89a 3000 	ldrb.w	r3, [sl]
 800888a:	2b2a      	cmp	r3, #42	; 0x2a
 800888c:	d015      	beq.n	80088ba <_svfiprintf_r+0xf6>
 800888e:	9a07      	ldr	r2, [sp, #28]
 8008890:	4654      	mov	r4, sl
 8008892:	2000      	movs	r0, #0
 8008894:	f04f 0c0a 	mov.w	ip, #10
 8008898:	4621      	mov	r1, r4
 800889a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800889e:	3b30      	subs	r3, #48	; 0x30
 80088a0:	2b09      	cmp	r3, #9
 80088a2:	d94e      	bls.n	8008942 <_svfiprintf_r+0x17e>
 80088a4:	b1b0      	cbz	r0, 80088d4 <_svfiprintf_r+0x110>
 80088a6:	9207      	str	r2, [sp, #28]
 80088a8:	e014      	b.n	80088d4 <_svfiprintf_r+0x110>
 80088aa:	eba0 0308 	sub.w	r3, r0, r8
 80088ae:	fa09 f303 	lsl.w	r3, r9, r3
 80088b2:	4313      	orrs	r3, r2
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	46a2      	mov	sl, r4
 80088b8:	e7d2      	b.n	8008860 <_svfiprintf_r+0x9c>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	1d19      	adds	r1, r3, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	9103      	str	r1, [sp, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bfbb      	ittet	lt
 80088c6:	425b      	neglt	r3, r3
 80088c8:	f042 0202 	orrlt.w	r2, r2, #2
 80088cc:	9307      	strge	r3, [sp, #28]
 80088ce:	9307      	strlt	r3, [sp, #28]
 80088d0:	bfb8      	it	lt
 80088d2:	9204      	strlt	r2, [sp, #16]
 80088d4:	7823      	ldrb	r3, [r4, #0]
 80088d6:	2b2e      	cmp	r3, #46	; 0x2e
 80088d8:	d10c      	bne.n	80088f4 <_svfiprintf_r+0x130>
 80088da:	7863      	ldrb	r3, [r4, #1]
 80088dc:	2b2a      	cmp	r3, #42	; 0x2a
 80088de:	d135      	bne.n	800894c <_svfiprintf_r+0x188>
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	9203      	str	r2, [sp, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfb8      	it	lt
 80088ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80088f0:	3402      	adds	r4, #2
 80088f2:	9305      	str	r3, [sp, #20]
 80088f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089c0 <_svfiprintf_r+0x1fc>
 80088f8:	7821      	ldrb	r1, [r4, #0]
 80088fa:	2203      	movs	r2, #3
 80088fc:	4650      	mov	r0, sl
 80088fe:	f7f7 fc77 	bl	80001f0 <memchr>
 8008902:	b140      	cbz	r0, 8008916 <_svfiprintf_r+0x152>
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	eba0 000a 	sub.w	r0, r0, sl
 800890a:	fa03 f000 	lsl.w	r0, r3, r0
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	4303      	orrs	r3, r0
 8008912:	3401      	adds	r4, #1
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891a:	4826      	ldr	r0, [pc, #152]	; (80089b4 <_svfiprintf_r+0x1f0>)
 800891c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008920:	2206      	movs	r2, #6
 8008922:	f7f7 fc65 	bl	80001f0 <memchr>
 8008926:	2800      	cmp	r0, #0
 8008928:	d038      	beq.n	800899c <_svfiprintf_r+0x1d8>
 800892a:	4b23      	ldr	r3, [pc, #140]	; (80089b8 <_svfiprintf_r+0x1f4>)
 800892c:	bb1b      	cbnz	r3, 8008976 <_svfiprintf_r+0x1b2>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	3307      	adds	r3, #7
 8008932:	f023 0307 	bic.w	r3, r3, #7
 8008936:	3308      	adds	r3, #8
 8008938:	9303      	str	r3, [sp, #12]
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	4433      	add	r3, r6
 800893e:	9309      	str	r3, [sp, #36]	; 0x24
 8008940:	e767      	b.n	8008812 <_svfiprintf_r+0x4e>
 8008942:	fb0c 3202 	mla	r2, ip, r2, r3
 8008946:	460c      	mov	r4, r1
 8008948:	2001      	movs	r0, #1
 800894a:	e7a5      	b.n	8008898 <_svfiprintf_r+0xd4>
 800894c:	2300      	movs	r3, #0
 800894e:	3401      	adds	r4, #1
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	4619      	mov	r1, r3
 8008954:	f04f 0c0a 	mov.w	ip, #10
 8008958:	4620      	mov	r0, r4
 800895a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800895e:	3a30      	subs	r2, #48	; 0x30
 8008960:	2a09      	cmp	r2, #9
 8008962:	d903      	bls.n	800896c <_svfiprintf_r+0x1a8>
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0c5      	beq.n	80088f4 <_svfiprintf_r+0x130>
 8008968:	9105      	str	r1, [sp, #20]
 800896a:	e7c3      	b.n	80088f4 <_svfiprintf_r+0x130>
 800896c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008970:	4604      	mov	r4, r0
 8008972:	2301      	movs	r3, #1
 8008974:	e7f0      	b.n	8008958 <_svfiprintf_r+0x194>
 8008976:	ab03      	add	r3, sp, #12
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	462a      	mov	r2, r5
 800897c:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <_svfiprintf_r+0x1f8>)
 800897e:	a904      	add	r1, sp, #16
 8008980:	4638      	mov	r0, r7
 8008982:	f7fc fa15 	bl	8004db0 <_printf_float>
 8008986:	1c42      	adds	r2, r0, #1
 8008988:	4606      	mov	r6, r0
 800898a:	d1d6      	bne.n	800893a <_svfiprintf_r+0x176>
 800898c:	89ab      	ldrh	r3, [r5, #12]
 800898e:	065b      	lsls	r3, r3, #25
 8008990:	f53f af2c 	bmi.w	80087ec <_svfiprintf_r+0x28>
 8008994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008996:	b01d      	add	sp, #116	; 0x74
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	ab03      	add	r3, sp, #12
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	462a      	mov	r2, r5
 80089a2:	4b06      	ldr	r3, [pc, #24]	; (80089bc <_svfiprintf_r+0x1f8>)
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	4638      	mov	r0, r7
 80089a8:	f7fc fca6 	bl	80052f8 <_printf_i>
 80089ac:	e7eb      	b.n	8008986 <_svfiprintf_r+0x1c2>
 80089ae:	bf00      	nop
 80089b0:	0800a8cc 	.word	0x0800a8cc
 80089b4:	0800a8d6 	.word	0x0800a8d6
 80089b8:	08004db1 	.word	0x08004db1
 80089bc:	0800870d 	.word	0x0800870d
 80089c0:	0800a8d2 	.word	0x0800a8d2
 80089c4:	00000000 	.word	0x00000000

080089c8 <nan>:
 80089c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80089d0 <nan+0x8>
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	00000000 	.word	0x00000000
 80089d4:	7ff80000 	.word	0x7ff80000

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 fdac 	bl	8002540 <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000e80 	.word	0x20000e80

080089f8 <strncmp>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	b17a      	cbz	r2, 8008a1c <strncmp+0x24>
 80089fc:	4603      	mov	r3, r0
 80089fe:	3901      	subs	r1, #1
 8008a00:	1884      	adds	r4, r0, r2
 8008a02:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a0a:	4290      	cmp	r0, r2
 8008a0c:	d101      	bne.n	8008a12 <strncmp+0x1a>
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	d101      	bne.n	8008a16 <strncmp+0x1e>
 8008a12:	1a80      	subs	r0, r0, r2
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d1f3      	bne.n	8008a02 <strncmp+0xa>
 8008a1a:	e7fa      	b.n	8008a12 <strncmp+0x1a>
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	e7f9      	b.n	8008a14 <strncmp+0x1c>

08008a20 <__ascii_wctomb>:
 8008a20:	b149      	cbz	r1, 8008a36 <__ascii_wctomb+0x16>
 8008a22:	2aff      	cmp	r2, #255	; 0xff
 8008a24:	bf85      	ittet	hi
 8008a26:	238a      	movhi	r3, #138	; 0x8a
 8008a28:	6003      	strhi	r3, [r0, #0]
 8008a2a:	700a      	strbls	r2, [r1, #0]
 8008a2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a30:	bf98      	it	ls
 8008a32:	2001      	movls	r0, #1
 8008a34:	4770      	bx	lr
 8008a36:	4608      	mov	r0, r1
 8008a38:	4770      	bx	lr
	...

08008a3c <__assert_func>:
 8008a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a3e:	4614      	mov	r4, r2
 8008a40:	461a      	mov	r2, r3
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <__assert_func+0x2c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4605      	mov	r5, r0
 8008a48:	68d8      	ldr	r0, [r3, #12]
 8008a4a:	b14c      	cbz	r4, 8008a60 <__assert_func+0x24>
 8008a4c:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <__assert_func+0x30>)
 8008a4e:	9100      	str	r1, [sp, #0]
 8008a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a54:	4906      	ldr	r1, [pc, #24]	; (8008a70 <__assert_func+0x34>)
 8008a56:	462b      	mov	r3, r5
 8008a58:	f000 f80e 	bl	8008a78 <fiprintf>
 8008a5c:	f000 fa8c 	bl	8008f78 <abort>
 8008a60:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <__assert_func+0x38>)
 8008a62:	461c      	mov	r4, r3
 8008a64:	e7f3      	b.n	8008a4e <__assert_func+0x12>
 8008a66:	bf00      	nop
 8008a68:	20000b6c 	.word	0x20000b6c
 8008a6c:	0800a8dd 	.word	0x0800a8dd
 8008a70:	0800a8ea 	.word	0x0800a8ea
 8008a74:	0800a918 	.word	0x0800a918

08008a78 <fiprintf>:
 8008a78:	b40e      	push	{r1, r2, r3}
 8008a7a:	b503      	push	{r0, r1, lr}
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	4805      	ldr	r0, [pc, #20]	; (8008a98 <fiprintf+0x20>)
 8008a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a86:	6800      	ldr	r0, [r0, #0]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	f000 f885 	bl	8008b98 <_vfiprintf_r>
 8008a8e:	b002      	add	sp, #8
 8008a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a94:	b003      	add	sp, #12
 8008a96:	4770      	bx	lr
 8008a98:	20000b6c 	.word	0x20000b6c

08008a9c <memmove>:
 8008a9c:	4288      	cmp	r0, r1
 8008a9e:	b510      	push	{r4, lr}
 8008aa0:	eb01 0402 	add.w	r4, r1, r2
 8008aa4:	d902      	bls.n	8008aac <memmove+0x10>
 8008aa6:	4284      	cmp	r4, r0
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	d807      	bhi.n	8008abc <memmove+0x20>
 8008aac:	1e43      	subs	r3, r0, #1
 8008aae:	42a1      	cmp	r1, r4
 8008ab0:	d008      	beq.n	8008ac4 <memmove+0x28>
 8008ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aba:	e7f8      	b.n	8008aae <memmove+0x12>
 8008abc:	4402      	add	r2, r0
 8008abe:	4601      	mov	r1, r0
 8008ac0:	428a      	cmp	r2, r1
 8008ac2:	d100      	bne.n	8008ac6 <memmove+0x2a>
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ace:	e7f7      	b.n	8008ac0 <memmove+0x24>

08008ad0 <__malloc_lock>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__malloc_lock+0x8>)
 8008ad2:	f000 bc11 	b.w	80092f8 <__retarget_lock_acquire_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	20000e84 	.word	0x20000e84

08008adc <__malloc_unlock>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__malloc_unlock+0x8>)
 8008ade:	f000 bc0c 	b.w	80092fa <__retarget_lock_release_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	20000e84 	.word	0x20000e84

08008ae8 <_realloc_r>:
 8008ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aec:	4680      	mov	r8, r0
 8008aee:	4614      	mov	r4, r2
 8008af0:	460e      	mov	r6, r1
 8008af2:	b921      	cbnz	r1, 8008afe <_realloc_r+0x16>
 8008af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	4611      	mov	r1, r2
 8008afa:	f7ff bd93 	b.w	8008624 <_malloc_r>
 8008afe:	b92a      	cbnz	r2, 8008b0c <_realloc_r+0x24>
 8008b00:	f7ff fd24 	bl	800854c <_free_r>
 8008b04:	4625      	mov	r5, r4
 8008b06:	4628      	mov	r0, r5
 8008b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b0c:	f000 fc5c 	bl	80093c8 <_malloc_usable_size_r>
 8008b10:	4284      	cmp	r4, r0
 8008b12:	4607      	mov	r7, r0
 8008b14:	d802      	bhi.n	8008b1c <_realloc_r+0x34>
 8008b16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b1a:	d812      	bhi.n	8008b42 <_realloc_r+0x5a>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4640      	mov	r0, r8
 8008b20:	f7ff fd80 	bl	8008624 <_malloc_r>
 8008b24:	4605      	mov	r5, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d0ed      	beq.n	8008b06 <_realloc_r+0x1e>
 8008b2a:	42bc      	cmp	r4, r7
 8008b2c:	4622      	mov	r2, r4
 8008b2e:	4631      	mov	r1, r6
 8008b30:	bf28      	it	cs
 8008b32:	463a      	movcs	r2, r7
 8008b34:	f7ff f824 	bl	8007b80 <memcpy>
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	f7ff fd06 	bl	800854c <_free_r>
 8008b40:	e7e1      	b.n	8008b06 <_realloc_r+0x1e>
 8008b42:	4635      	mov	r5, r6
 8008b44:	e7df      	b.n	8008b06 <_realloc_r+0x1e>

08008b46 <__sfputc_r>:
 8008b46:	6893      	ldr	r3, [r2, #8]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	b410      	push	{r4}
 8008b4e:	6093      	str	r3, [r2, #8]
 8008b50:	da08      	bge.n	8008b64 <__sfputc_r+0x1e>
 8008b52:	6994      	ldr	r4, [r2, #24]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	db01      	blt.n	8008b5c <__sfputc_r+0x16>
 8008b58:	290a      	cmp	r1, #10
 8008b5a:	d103      	bne.n	8008b64 <__sfputc_r+0x1e>
 8008b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b60:	f000 b94a 	b.w	8008df8 <__swbuf_r>
 8008b64:	6813      	ldr	r3, [r2, #0]
 8008b66:	1c58      	adds	r0, r3, #1
 8008b68:	6010      	str	r0, [r2, #0]
 8008b6a:	7019      	strb	r1, [r3, #0]
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <__sfputs_r>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	4614      	mov	r4, r2
 8008b7c:	18d5      	adds	r5, r2, r3
 8008b7e:	42ac      	cmp	r4, r5
 8008b80:	d101      	bne.n	8008b86 <__sfputs_r+0x12>
 8008b82:	2000      	movs	r0, #0
 8008b84:	e007      	b.n	8008b96 <__sfputs_r+0x22>
 8008b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8a:	463a      	mov	r2, r7
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff ffda 	bl	8008b46 <__sfputc_r>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d1f3      	bne.n	8008b7e <__sfputs_r+0xa>
 8008b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b98 <_vfiprintf_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	b09d      	sub	sp, #116	; 0x74
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	4698      	mov	r8, r3
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	b118      	cbz	r0, 8008bb0 <_vfiprintf_r+0x18>
 8008ba8:	6983      	ldr	r3, [r0, #24]
 8008baa:	b90b      	cbnz	r3, 8008bb0 <_vfiprintf_r+0x18>
 8008bac:	f000 fb06 	bl	80091bc <__sinit>
 8008bb0:	4b89      	ldr	r3, [pc, #548]	; (8008dd8 <_vfiprintf_r+0x240>)
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	d11b      	bne.n	8008bee <_vfiprintf_r+0x56>
 8008bb6:	6875      	ldr	r5, [r6, #4]
 8008bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bba:	07d9      	lsls	r1, r3, #31
 8008bbc:	d405      	bmi.n	8008bca <_vfiprintf_r+0x32>
 8008bbe:	89ab      	ldrh	r3, [r5, #12]
 8008bc0:	059a      	lsls	r2, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <_vfiprintf_r+0x32>
 8008bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc6:	f000 fb97 	bl	80092f8 <__retarget_lock_acquire_recursive>
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	071b      	lsls	r3, r3, #28
 8008bce:	d501      	bpl.n	8008bd4 <_vfiprintf_r+0x3c>
 8008bd0:	692b      	ldr	r3, [r5, #16]
 8008bd2:	b9eb      	cbnz	r3, 8008c10 <_vfiprintf_r+0x78>
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f960 	bl	8008e9c <__swsetup_r>
 8008bdc:	b1c0      	cbz	r0, 8008c10 <_vfiprintf_r+0x78>
 8008bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be0:	07dc      	lsls	r4, r3, #31
 8008be2:	d50e      	bpl.n	8008c02 <_vfiprintf_r+0x6a>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295
 8008be8:	b01d      	add	sp, #116	; 0x74
 8008bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	4b7b      	ldr	r3, [pc, #492]	; (8008ddc <_vfiprintf_r+0x244>)
 8008bf0:	429d      	cmp	r5, r3
 8008bf2:	d101      	bne.n	8008bf8 <_vfiprintf_r+0x60>
 8008bf4:	68b5      	ldr	r5, [r6, #8]
 8008bf6:	e7df      	b.n	8008bb8 <_vfiprintf_r+0x20>
 8008bf8:	4b79      	ldr	r3, [pc, #484]	; (8008de0 <_vfiprintf_r+0x248>)
 8008bfa:	429d      	cmp	r5, r3
 8008bfc:	bf08      	it	eq
 8008bfe:	68f5      	ldreq	r5, [r6, #12]
 8008c00:	e7da      	b.n	8008bb8 <_vfiprintf_r+0x20>
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	0598      	lsls	r0, r3, #22
 8008c06:	d4ed      	bmi.n	8008be4 <_vfiprintf_r+0x4c>
 8008c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c0a:	f000 fb76 	bl	80092fa <__retarget_lock_release_recursive>
 8008c0e:	e7e9      	b.n	8008be4 <_vfiprintf_r+0x4c>
 8008c10:	2300      	movs	r3, #0
 8008c12:	9309      	str	r3, [sp, #36]	; 0x24
 8008c14:	2320      	movs	r3, #32
 8008c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c1e:	2330      	movs	r3, #48	; 0x30
 8008c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008de4 <_vfiprintf_r+0x24c>
 8008c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c28:	f04f 0901 	mov.w	r9, #1
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	469a      	mov	sl, r3
 8008c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c34:	b10a      	cbz	r2, 8008c3a <_vfiprintf_r+0xa2>
 8008c36:	2a25      	cmp	r2, #37	; 0x25
 8008c38:	d1f9      	bne.n	8008c2e <_vfiprintf_r+0x96>
 8008c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c3e:	d00b      	beq.n	8008c58 <_vfiprintf_r+0xc0>
 8008c40:	465b      	mov	r3, fp
 8008c42:	4622      	mov	r2, r4
 8008c44:	4629      	mov	r1, r5
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ff94 	bl	8008b74 <__sfputs_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	f000 80aa 	beq.w	8008da6 <_vfiprintf_r+0x20e>
 8008c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c54:	445a      	add	r2, fp
 8008c56:	9209      	str	r2, [sp, #36]	; 0x24
 8008c58:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80a2 	beq.w	8008da6 <_vfiprintf_r+0x20e>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295
 8008c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6c:	f10a 0a01 	add.w	sl, sl, #1
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	9307      	str	r3, [sp, #28]
 8008c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c78:	931a      	str	r3, [sp, #104]	; 0x68
 8008c7a:	4654      	mov	r4, sl
 8008c7c:	2205      	movs	r2, #5
 8008c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c82:	4858      	ldr	r0, [pc, #352]	; (8008de4 <_vfiprintf_r+0x24c>)
 8008c84:	f7f7 fab4 	bl	80001f0 <memchr>
 8008c88:	9a04      	ldr	r2, [sp, #16]
 8008c8a:	b9d8      	cbnz	r0, 8008cc4 <_vfiprintf_r+0x12c>
 8008c8c:	06d1      	lsls	r1, r2, #27
 8008c8e:	bf44      	itt	mi
 8008c90:	2320      	movmi	r3, #32
 8008c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c96:	0713      	lsls	r3, r2, #28
 8008c98:	bf44      	itt	mi
 8008c9a:	232b      	movmi	r3, #43	; 0x2b
 8008c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca6:	d015      	beq.n	8008cd4 <_vfiprintf_r+0x13c>
 8008ca8:	9a07      	ldr	r2, [sp, #28]
 8008caa:	4654      	mov	r4, sl
 8008cac:	2000      	movs	r0, #0
 8008cae:	f04f 0c0a 	mov.w	ip, #10
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cb8:	3b30      	subs	r3, #48	; 0x30
 8008cba:	2b09      	cmp	r3, #9
 8008cbc:	d94e      	bls.n	8008d5c <_vfiprintf_r+0x1c4>
 8008cbe:	b1b0      	cbz	r0, 8008cee <_vfiprintf_r+0x156>
 8008cc0:	9207      	str	r2, [sp, #28]
 8008cc2:	e014      	b.n	8008cee <_vfiprintf_r+0x156>
 8008cc4:	eba0 0308 	sub.w	r3, r0, r8
 8008cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	46a2      	mov	sl, r4
 8008cd2:	e7d2      	b.n	8008c7a <_vfiprintf_r+0xe2>
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	1d19      	adds	r1, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	9103      	str	r1, [sp, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfbb      	ittet	lt
 8008ce0:	425b      	neglt	r3, r3
 8008ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce6:	9307      	strge	r3, [sp, #28]
 8008ce8:	9307      	strlt	r3, [sp, #28]
 8008cea:	bfb8      	it	lt
 8008cec:	9204      	strlt	r2, [sp, #16]
 8008cee:	7823      	ldrb	r3, [r4, #0]
 8008cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cf2:	d10c      	bne.n	8008d0e <_vfiprintf_r+0x176>
 8008cf4:	7863      	ldrb	r3, [r4, #1]
 8008cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf8:	d135      	bne.n	8008d66 <_vfiprintf_r+0x1ce>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	1d1a      	adds	r2, r3, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	9203      	str	r2, [sp, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	bfb8      	it	lt
 8008d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d0a:	3402      	adds	r4, #2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008df4 <_vfiprintf_r+0x25c>
 8008d12:	7821      	ldrb	r1, [r4, #0]
 8008d14:	2203      	movs	r2, #3
 8008d16:	4650      	mov	r0, sl
 8008d18:	f7f7 fa6a 	bl	80001f0 <memchr>
 8008d1c:	b140      	cbz	r0, 8008d30 <_vfiprintf_r+0x198>
 8008d1e:	2340      	movs	r3, #64	; 0x40
 8008d20:	eba0 000a 	sub.w	r0, r0, sl
 8008d24:	fa03 f000 	lsl.w	r0, r3, r0
 8008d28:	9b04      	ldr	r3, [sp, #16]
 8008d2a:	4303      	orrs	r3, r0
 8008d2c:	3401      	adds	r4, #1
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d34:	482c      	ldr	r0, [pc, #176]	; (8008de8 <_vfiprintf_r+0x250>)
 8008d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d3a:	2206      	movs	r2, #6
 8008d3c:	f7f7 fa58 	bl	80001f0 <memchr>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d03f      	beq.n	8008dc4 <_vfiprintf_r+0x22c>
 8008d44:	4b29      	ldr	r3, [pc, #164]	; (8008dec <_vfiprintf_r+0x254>)
 8008d46:	bb1b      	cbnz	r3, 8008d90 <_vfiprintf_r+0x1f8>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	3307      	adds	r3, #7
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	3308      	adds	r3, #8
 8008d52:	9303      	str	r3, [sp, #12]
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	443b      	add	r3, r7
 8008d58:	9309      	str	r3, [sp, #36]	; 0x24
 8008d5a:	e767      	b.n	8008c2c <_vfiprintf_r+0x94>
 8008d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d60:	460c      	mov	r4, r1
 8008d62:	2001      	movs	r0, #1
 8008d64:	e7a5      	b.n	8008cb2 <_vfiprintf_r+0x11a>
 8008d66:	2300      	movs	r3, #0
 8008d68:	3401      	adds	r4, #1
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f04f 0c0a 	mov.w	ip, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d78:	3a30      	subs	r2, #48	; 0x30
 8008d7a:	2a09      	cmp	r2, #9
 8008d7c:	d903      	bls.n	8008d86 <_vfiprintf_r+0x1ee>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0c5      	beq.n	8008d0e <_vfiprintf_r+0x176>
 8008d82:	9105      	str	r1, [sp, #20]
 8008d84:	e7c3      	b.n	8008d0e <_vfiprintf_r+0x176>
 8008d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e7f0      	b.n	8008d72 <_vfiprintf_r+0x1da>
 8008d90:	ab03      	add	r3, sp, #12
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	462a      	mov	r2, r5
 8008d96:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <_vfiprintf_r+0x258>)
 8008d98:	a904      	add	r1, sp, #16
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7fc f808 	bl	8004db0 <_printf_float>
 8008da0:	4607      	mov	r7, r0
 8008da2:	1c78      	adds	r0, r7, #1
 8008da4:	d1d6      	bne.n	8008d54 <_vfiprintf_r+0x1bc>
 8008da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d405      	bmi.n	8008db8 <_vfiprintf_r+0x220>
 8008dac:	89ab      	ldrh	r3, [r5, #12]
 8008dae:	059a      	lsls	r2, r3, #22
 8008db0:	d402      	bmi.n	8008db8 <_vfiprintf_r+0x220>
 8008db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008db4:	f000 faa1 	bl	80092fa <__retarget_lock_release_recursive>
 8008db8:	89ab      	ldrh	r3, [r5, #12]
 8008dba:	065b      	lsls	r3, r3, #25
 8008dbc:	f53f af12 	bmi.w	8008be4 <_vfiprintf_r+0x4c>
 8008dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dc2:	e711      	b.n	8008be8 <_vfiprintf_r+0x50>
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <_vfiprintf_r+0x258>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7fc fa92 	bl	80052f8 <_printf_i>
 8008dd4:	e7e4      	b.n	8008da0 <_vfiprintf_r+0x208>
 8008dd6:	bf00      	nop
 8008dd8:	0800a93c 	.word	0x0800a93c
 8008ddc:	0800a95c 	.word	0x0800a95c
 8008de0:	0800a91c 	.word	0x0800a91c
 8008de4:	0800a8cc 	.word	0x0800a8cc
 8008de8:	0800a8d6 	.word	0x0800a8d6
 8008dec:	08004db1 	.word	0x08004db1
 8008df0:	08008b75 	.word	0x08008b75
 8008df4:	0800a8d2 	.word	0x0800a8d2

08008df8 <__swbuf_r>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	460e      	mov	r6, r1
 8008dfc:	4614      	mov	r4, r2
 8008dfe:	4605      	mov	r5, r0
 8008e00:	b118      	cbz	r0, 8008e0a <__swbuf_r+0x12>
 8008e02:	6983      	ldr	r3, [r0, #24]
 8008e04:	b90b      	cbnz	r3, 8008e0a <__swbuf_r+0x12>
 8008e06:	f000 f9d9 	bl	80091bc <__sinit>
 8008e0a:	4b21      	ldr	r3, [pc, #132]	; (8008e90 <__swbuf_r+0x98>)
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	d12b      	bne.n	8008e68 <__swbuf_r+0x70>
 8008e10:	686c      	ldr	r4, [r5, #4]
 8008e12:	69a3      	ldr	r3, [r4, #24]
 8008e14:	60a3      	str	r3, [r4, #8]
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	071a      	lsls	r2, r3, #28
 8008e1a:	d52f      	bpl.n	8008e7c <__swbuf_r+0x84>
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	b36b      	cbz	r3, 8008e7c <__swbuf_r+0x84>
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	1ac0      	subs	r0, r0, r3
 8008e26:	6963      	ldr	r3, [r4, #20]
 8008e28:	b2f6      	uxtb	r6, r6
 8008e2a:	4283      	cmp	r3, r0
 8008e2c:	4637      	mov	r7, r6
 8008e2e:	dc04      	bgt.n	8008e3a <__swbuf_r+0x42>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f92e 	bl	8009094 <_fflush_r>
 8008e38:	bb30      	cbnz	r0, 8008e88 <__swbuf_r+0x90>
 8008e3a:	68a3      	ldr	r3, [r4, #8]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	701e      	strb	r6, [r3, #0]
 8008e48:	6963      	ldr	r3, [r4, #20]
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	4283      	cmp	r3, r0
 8008e4e:	d004      	beq.n	8008e5a <__swbuf_r+0x62>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	07db      	lsls	r3, r3, #31
 8008e54:	d506      	bpl.n	8008e64 <__swbuf_r+0x6c>
 8008e56:	2e0a      	cmp	r6, #10
 8008e58:	d104      	bne.n	8008e64 <__swbuf_r+0x6c>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f000 f919 	bl	8009094 <_fflush_r>
 8008e62:	b988      	cbnz	r0, 8008e88 <__swbuf_r+0x90>
 8008e64:	4638      	mov	r0, r7
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <__swbuf_r+0x9c>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <__swbuf_r+0x7a>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7cf      	b.n	8008e12 <__swbuf_r+0x1a>
 8008e72:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <__swbuf_r+0xa0>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7ca      	b.n	8008e12 <__swbuf_r+0x1a>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 f80c 	bl	8008e9c <__swsetup_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0cb      	beq.n	8008e20 <__swbuf_r+0x28>
 8008e88:	f04f 37ff 	mov.w	r7, #4294967295
 8008e8c:	e7ea      	b.n	8008e64 <__swbuf_r+0x6c>
 8008e8e:	bf00      	nop
 8008e90:	0800a93c 	.word	0x0800a93c
 8008e94:	0800a95c 	.word	0x0800a95c
 8008e98:	0800a91c 	.word	0x0800a91c

08008e9c <__swsetup_r>:
 8008e9c:	4b32      	ldr	r3, [pc, #200]	; (8008f68 <__swsetup_r+0xcc>)
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	b125      	cbz	r5, 8008eb2 <__swsetup_r+0x16>
 8008ea8:	69ab      	ldr	r3, [r5, #24]
 8008eaa:	b913      	cbnz	r3, 8008eb2 <__swsetup_r+0x16>
 8008eac:	4628      	mov	r0, r5
 8008eae:	f000 f985 	bl	80091bc <__sinit>
 8008eb2:	4b2e      	ldr	r3, [pc, #184]	; (8008f6c <__swsetup_r+0xd0>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	d10f      	bne.n	8008ed8 <__swsetup_r+0x3c>
 8008eb8:	686c      	ldr	r4, [r5, #4]
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec0:	0719      	lsls	r1, r3, #28
 8008ec2:	d42c      	bmi.n	8008f1e <__swsetup_r+0x82>
 8008ec4:	06dd      	lsls	r5, r3, #27
 8008ec6:	d411      	bmi.n	8008eec <__swsetup_r+0x50>
 8008ec8:	2309      	movs	r3, #9
 8008eca:	6033      	str	r3, [r6, #0]
 8008ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed6:	e03e      	b.n	8008f56 <__swsetup_r+0xba>
 8008ed8:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <__swsetup_r+0xd4>)
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d101      	bne.n	8008ee2 <__swsetup_r+0x46>
 8008ede:	68ac      	ldr	r4, [r5, #8]
 8008ee0:	e7eb      	b.n	8008eba <__swsetup_r+0x1e>
 8008ee2:	4b24      	ldr	r3, [pc, #144]	; (8008f74 <__swsetup_r+0xd8>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	bf08      	it	eq
 8008ee8:	68ec      	ldreq	r4, [r5, #12]
 8008eea:	e7e6      	b.n	8008eba <__swsetup_r+0x1e>
 8008eec:	0758      	lsls	r0, r3, #29
 8008eee:	d512      	bpl.n	8008f16 <__swsetup_r+0x7a>
 8008ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ef2:	b141      	cbz	r1, 8008f06 <__swsetup_r+0x6a>
 8008ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef8:	4299      	cmp	r1, r3
 8008efa:	d002      	beq.n	8008f02 <__swsetup_r+0x66>
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7ff fb25 	bl	800854c <_free_r>
 8008f02:	2300      	movs	r3, #0
 8008f04:	6363      	str	r3, [r4, #52]	; 0x34
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	6063      	str	r3, [r4, #4]
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f043 0308 	orr.w	r3, r3, #8
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	b94b      	cbnz	r3, 8008f36 <__swsetup_r+0x9a>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f2c:	d003      	beq.n	8008f36 <__swsetup_r+0x9a>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4630      	mov	r0, r6
 8008f32:	f000 fa09 	bl	8009348 <__smakebuf_r>
 8008f36:	89a0      	ldrh	r0, [r4, #12]
 8008f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f3c:	f010 0301 	ands.w	r3, r0, #1
 8008f40:	d00a      	beq.n	8008f58 <__swsetup_r+0xbc>
 8008f42:	2300      	movs	r3, #0
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	6963      	ldr	r3, [r4, #20]
 8008f48:	425b      	negs	r3, r3
 8008f4a:	61a3      	str	r3, [r4, #24]
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	b943      	cbnz	r3, 8008f62 <__swsetup_r+0xc6>
 8008f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f54:	d1ba      	bne.n	8008ecc <__swsetup_r+0x30>
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	0781      	lsls	r1, r0, #30
 8008f5a:	bf58      	it	pl
 8008f5c:	6963      	ldrpl	r3, [r4, #20]
 8008f5e:	60a3      	str	r3, [r4, #8]
 8008f60:	e7f4      	b.n	8008f4c <__swsetup_r+0xb0>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7f7      	b.n	8008f56 <__swsetup_r+0xba>
 8008f66:	bf00      	nop
 8008f68:	20000b6c 	.word	0x20000b6c
 8008f6c:	0800a93c 	.word	0x0800a93c
 8008f70:	0800a95c 	.word	0x0800a95c
 8008f74:	0800a91c 	.word	0x0800a91c

08008f78 <abort>:
 8008f78:	b508      	push	{r3, lr}
 8008f7a:	2006      	movs	r0, #6
 8008f7c:	f000 fa54 	bl	8009428 <raise>
 8008f80:	2001      	movs	r0, #1
 8008f82:	f7f9 fa81 	bl	8002488 <_exit>
	...

08008f88 <__sflush_r>:
 8008f88:	898a      	ldrh	r2, [r1, #12]
 8008f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	4605      	mov	r5, r0
 8008f90:	0710      	lsls	r0, r2, #28
 8008f92:	460c      	mov	r4, r1
 8008f94:	d458      	bmi.n	8009048 <__sflush_r+0xc0>
 8008f96:	684b      	ldr	r3, [r1, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	dc05      	bgt.n	8008fa8 <__sflush_r+0x20>
 8008f9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dc02      	bgt.n	8008fa8 <__sflush_r+0x20>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	d0f9      	beq.n	8008fa2 <__sflush_r+0x1a>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fb4:	682f      	ldr	r7, [r5, #0]
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	d032      	beq.n	8009020 <__sflush_r+0x98>
 8008fba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	075a      	lsls	r2, r3, #29
 8008fc0:	d505      	bpl.n	8008fce <__sflush_r+0x46>
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	1ac0      	subs	r0, r0, r3
 8008fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fc8:	b10b      	cbz	r3, 8008fce <__sflush_r+0x46>
 8008fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fcc:	1ac0      	subs	r0, r0, r3
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fd4:	6a21      	ldr	r1, [r4, #32]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b0      	blx	r6
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	d106      	bne.n	8008fee <__sflush_r+0x66>
 8008fe0:	6829      	ldr	r1, [r5, #0]
 8008fe2:	291d      	cmp	r1, #29
 8008fe4:	d82c      	bhi.n	8009040 <__sflush_r+0xb8>
 8008fe6:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <__sflush_r+0x108>)
 8008fe8:	40ca      	lsrs	r2, r1
 8008fea:	07d6      	lsls	r6, r2, #31
 8008fec:	d528      	bpl.n	8009040 <__sflush_r+0xb8>
 8008fee:	2200      	movs	r2, #0
 8008ff0:	6062      	str	r2, [r4, #4]
 8008ff2:	04d9      	lsls	r1, r3, #19
 8008ff4:	6922      	ldr	r2, [r4, #16]
 8008ff6:	6022      	str	r2, [r4, #0]
 8008ff8:	d504      	bpl.n	8009004 <__sflush_r+0x7c>
 8008ffa:	1c42      	adds	r2, r0, #1
 8008ffc:	d101      	bne.n	8009002 <__sflush_r+0x7a>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	b903      	cbnz	r3, 8009004 <__sflush_r+0x7c>
 8009002:	6560      	str	r0, [r4, #84]	; 0x54
 8009004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009006:	602f      	str	r7, [r5, #0]
 8009008:	2900      	cmp	r1, #0
 800900a:	d0ca      	beq.n	8008fa2 <__sflush_r+0x1a>
 800900c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009010:	4299      	cmp	r1, r3
 8009012:	d002      	beq.n	800901a <__sflush_r+0x92>
 8009014:	4628      	mov	r0, r5
 8009016:	f7ff fa99 	bl	800854c <_free_r>
 800901a:	2000      	movs	r0, #0
 800901c:	6360      	str	r0, [r4, #52]	; 0x34
 800901e:	e7c1      	b.n	8008fa4 <__sflush_r+0x1c>
 8009020:	6a21      	ldr	r1, [r4, #32]
 8009022:	2301      	movs	r3, #1
 8009024:	4628      	mov	r0, r5
 8009026:	47b0      	blx	r6
 8009028:	1c41      	adds	r1, r0, #1
 800902a:	d1c7      	bne.n	8008fbc <__sflush_r+0x34>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0c4      	beq.n	8008fbc <__sflush_r+0x34>
 8009032:	2b1d      	cmp	r3, #29
 8009034:	d001      	beq.n	800903a <__sflush_r+0xb2>
 8009036:	2b16      	cmp	r3, #22
 8009038:	d101      	bne.n	800903e <__sflush_r+0xb6>
 800903a:	602f      	str	r7, [r5, #0]
 800903c:	e7b1      	b.n	8008fa2 <__sflush_r+0x1a>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	e7ad      	b.n	8008fa4 <__sflush_r+0x1c>
 8009048:	690f      	ldr	r7, [r1, #16]
 800904a:	2f00      	cmp	r7, #0
 800904c:	d0a9      	beq.n	8008fa2 <__sflush_r+0x1a>
 800904e:	0793      	lsls	r3, r2, #30
 8009050:	680e      	ldr	r6, [r1, #0]
 8009052:	bf08      	it	eq
 8009054:	694b      	ldreq	r3, [r1, #20]
 8009056:	600f      	str	r7, [r1, #0]
 8009058:	bf18      	it	ne
 800905a:	2300      	movne	r3, #0
 800905c:	eba6 0807 	sub.w	r8, r6, r7
 8009060:	608b      	str	r3, [r1, #8]
 8009062:	f1b8 0f00 	cmp.w	r8, #0
 8009066:	dd9c      	ble.n	8008fa2 <__sflush_r+0x1a>
 8009068:	6a21      	ldr	r1, [r4, #32]
 800906a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800906c:	4643      	mov	r3, r8
 800906e:	463a      	mov	r2, r7
 8009070:	4628      	mov	r0, r5
 8009072:	47b0      	blx	r6
 8009074:	2800      	cmp	r0, #0
 8009076:	dc06      	bgt.n	8009086 <__sflush_r+0xfe>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e78e      	b.n	8008fa4 <__sflush_r+0x1c>
 8009086:	4407      	add	r7, r0
 8009088:	eba8 0800 	sub.w	r8, r8, r0
 800908c:	e7e9      	b.n	8009062 <__sflush_r+0xda>
 800908e:	bf00      	nop
 8009090:	20400001 	.word	0x20400001

08009094 <_fflush_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	690b      	ldr	r3, [r1, #16]
 8009098:	4605      	mov	r5, r0
 800909a:	460c      	mov	r4, r1
 800909c:	b913      	cbnz	r3, 80090a4 <_fflush_r+0x10>
 800909e:	2500      	movs	r5, #0
 80090a0:	4628      	mov	r0, r5
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	b118      	cbz	r0, 80090ae <_fflush_r+0x1a>
 80090a6:	6983      	ldr	r3, [r0, #24]
 80090a8:	b90b      	cbnz	r3, 80090ae <_fflush_r+0x1a>
 80090aa:	f000 f887 	bl	80091bc <__sinit>
 80090ae:	4b14      	ldr	r3, [pc, #80]	; (8009100 <_fflush_r+0x6c>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	d11b      	bne.n	80090ec <_fflush_r+0x58>
 80090b4:	686c      	ldr	r4, [r5, #4]
 80090b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0ef      	beq.n	800909e <_fflush_r+0xa>
 80090be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090c0:	07d0      	lsls	r0, r2, #31
 80090c2:	d404      	bmi.n	80090ce <_fflush_r+0x3a>
 80090c4:	0599      	lsls	r1, r3, #22
 80090c6:	d402      	bmi.n	80090ce <_fflush_r+0x3a>
 80090c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090ca:	f000 f915 	bl	80092f8 <__retarget_lock_acquire_recursive>
 80090ce:	4628      	mov	r0, r5
 80090d0:	4621      	mov	r1, r4
 80090d2:	f7ff ff59 	bl	8008f88 <__sflush_r>
 80090d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090d8:	07da      	lsls	r2, r3, #31
 80090da:	4605      	mov	r5, r0
 80090dc:	d4e0      	bmi.n	80090a0 <_fflush_r+0xc>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	059b      	lsls	r3, r3, #22
 80090e2:	d4dd      	bmi.n	80090a0 <_fflush_r+0xc>
 80090e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e6:	f000 f908 	bl	80092fa <__retarget_lock_release_recursive>
 80090ea:	e7d9      	b.n	80090a0 <_fflush_r+0xc>
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <_fflush_r+0x70>)
 80090ee:	429c      	cmp	r4, r3
 80090f0:	d101      	bne.n	80090f6 <_fflush_r+0x62>
 80090f2:	68ac      	ldr	r4, [r5, #8]
 80090f4:	e7df      	b.n	80090b6 <_fflush_r+0x22>
 80090f6:	4b04      	ldr	r3, [pc, #16]	; (8009108 <_fflush_r+0x74>)
 80090f8:	429c      	cmp	r4, r3
 80090fa:	bf08      	it	eq
 80090fc:	68ec      	ldreq	r4, [r5, #12]
 80090fe:	e7da      	b.n	80090b6 <_fflush_r+0x22>
 8009100:	0800a93c 	.word	0x0800a93c
 8009104:	0800a95c 	.word	0x0800a95c
 8009108:	0800a91c 	.word	0x0800a91c

0800910c <std>:
 800910c:	2300      	movs	r3, #0
 800910e:	b510      	push	{r4, lr}
 8009110:	4604      	mov	r4, r0
 8009112:	e9c0 3300 	strd	r3, r3, [r0]
 8009116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800911a:	6083      	str	r3, [r0, #8]
 800911c:	8181      	strh	r1, [r0, #12]
 800911e:	6643      	str	r3, [r0, #100]	; 0x64
 8009120:	81c2      	strh	r2, [r0, #14]
 8009122:	6183      	str	r3, [r0, #24]
 8009124:	4619      	mov	r1, r3
 8009126:	2208      	movs	r2, #8
 8009128:	305c      	adds	r0, #92	; 0x5c
 800912a:	f7fb fd99 	bl	8004c60 <memset>
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <std+0x38>)
 8009130:	6263      	str	r3, [r4, #36]	; 0x24
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <std+0x3c>)
 8009134:	62a3      	str	r3, [r4, #40]	; 0x28
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <std+0x40>)
 8009138:	62e3      	str	r3, [r4, #44]	; 0x2c
 800913a:	4b05      	ldr	r3, [pc, #20]	; (8009150 <std+0x44>)
 800913c:	6224      	str	r4, [r4, #32]
 800913e:	6323      	str	r3, [r4, #48]	; 0x30
 8009140:	bd10      	pop	{r4, pc}
 8009142:	bf00      	nop
 8009144:	08009461 	.word	0x08009461
 8009148:	08009483 	.word	0x08009483
 800914c:	080094bb 	.word	0x080094bb
 8009150:	080094df 	.word	0x080094df

08009154 <_cleanup_r>:
 8009154:	4901      	ldr	r1, [pc, #4]	; (800915c <_cleanup_r+0x8>)
 8009156:	f000 b8af 	b.w	80092b8 <_fwalk_reent>
 800915a:	bf00      	nop
 800915c:	08009095 	.word	0x08009095

08009160 <__sfmoreglue>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	2268      	movs	r2, #104	; 0x68
 8009164:	1e4d      	subs	r5, r1, #1
 8009166:	4355      	muls	r5, r2
 8009168:	460e      	mov	r6, r1
 800916a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800916e:	f7ff fa59 	bl	8008624 <_malloc_r>
 8009172:	4604      	mov	r4, r0
 8009174:	b140      	cbz	r0, 8009188 <__sfmoreglue+0x28>
 8009176:	2100      	movs	r1, #0
 8009178:	e9c0 1600 	strd	r1, r6, [r0]
 800917c:	300c      	adds	r0, #12
 800917e:	60a0      	str	r0, [r4, #8]
 8009180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009184:	f7fb fd6c 	bl	8004c60 <memset>
 8009188:	4620      	mov	r0, r4
 800918a:	bd70      	pop	{r4, r5, r6, pc}

0800918c <__sfp_lock_acquire>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__sfp_lock_acquire+0x8>)
 800918e:	f000 b8b3 	b.w	80092f8 <__retarget_lock_acquire_recursive>
 8009192:	bf00      	nop
 8009194:	20000e85 	.word	0x20000e85

08009198 <__sfp_lock_release>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__sfp_lock_release+0x8>)
 800919a:	f000 b8ae 	b.w	80092fa <__retarget_lock_release_recursive>
 800919e:	bf00      	nop
 80091a0:	20000e85 	.word	0x20000e85

080091a4 <__sinit_lock_acquire>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sinit_lock_acquire+0x8>)
 80091a6:	f000 b8a7 	b.w	80092f8 <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000e86 	.word	0x20000e86

080091b0 <__sinit_lock_release>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__sinit_lock_release+0x8>)
 80091b2:	f000 b8a2 	b.w	80092fa <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	20000e86 	.word	0x20000e86

080091bc <__sinit>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	4604      	mov	r4, r0
 80091c0:	f7ff fff0 	bl	80091a4 <__sinit_lock_acquire>
 80091c4:	69a3      	ldr	r3, [r4, #24]
 80091c6:	b11b      	cbz	r3, 80091d0 <__sinit+0x14>
 80091c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091cc:	f7ff bff0 	b.w	80091b0 <__sinit_lock_release>
 80091d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091d4:	6523      	str	r3, [r4, #80]	; 0x50
 80091d6:	4b13      	ldr	r3, [pc, #76]	; (8009224 <__sinit+0x68>)
 80091d8:	4a13      	ldr	r2, [pc, #76]	; (8009228 <__sinit+0x6c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091de:	42a3      	cmp	r3, r4
 80091e0:	bf04      	itt	eq
 80091e2:	2301      	moveq	r3, #1
 80091e4:	61a3      	streq	r3, [r4, #24]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f820 	bl	800922c <__sfp>
 80091ec:	6060      	str	r0, [r4, #4]
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 f81c 	bl	800922c <__sfp>
 80091f4:	60a0      	str	r0, [r4, #8]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 f818 	bl	800922c <__sfp>
 80091fc:	2200      	movs	r2, #0
 80091fe:	60e0      	str	r0, [r4, #12]
 8009200:	2104      	movs	r1, #4
 8009202:	6860      	ldr	r0, [r4, #4]
 8009204:	f7ff ff82 	bl	800910c <std>
 8009208:	68a0      	ldr	r0, [r4, #8]
 800920a:	2201      	movs	r2, #1
 800920c:	2109      	movs	r1, #9
 800920e:	f7ff ff7d 	bl	800910c <std>
 8009212:	68e0      	ldr	r0, [r4, #12]
 8009214:	2202      	movs	r2, #2
 8009216:	2112      	movs	r1, #18
 8009218:	f7ff ff78 	bl	800910c <std>
 800921c:	2301      	movs	r3, #1
 800921e:	61a3      	str	r3, [r4, #24]
 8009220:	e7d2      	b.n	80091c8 <__sinit+0xc>
 8009222:	bf00      	nop
 8009224:	0800a4d8 	.word	0x0800a4d8
 8009228:	08009155 	.word	0x08009155

0800922c <__sfp>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	4607      	mov	r7, r0
 8009230:	f7ff ffac 	bl	800918c <__sfp_lock_acquire>
 8009234:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <__sfp+0x84>)
 8009236:	681e      	ldr	r6, [r3, #0]
 8009238:	69b3      	ldr	r3, [r6, #24]
 800923a:	b913      	cbnz	r3, 8009242 <__sfp+0x16>
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff ffbd 	bl	80091bc <__sinit>
 8009242:	3648      	adds	r6, #72	; 0x48
 8009244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009248:	3b01      	subs	r3, #1
 800924a:	d503      	bpl.n	8009254 <__sfp+0x28>
 800924c:	6833      	ldr	r3, [r6, #0]
 800924e:	b30b      	cbz	r3, 8009294 <__sfp+0x68>
 8009250:	6836      	ldr	r6, [r6, #0]
 8009252:	e7f7      	b.n	8009244 <__sfp+0x18>
 8009254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009258:	b9d5      	cbnz	r5, 8009290 <__sfp+0x64>
 800925a:	4b16      	ldr	r3, [pc, #88]	; (80092b4 <__sfp+0x88>)
 800925c:	60e3      	str	r3, [r4, #12]
 800925e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009262:	6665      	str	r5, [r4, #100]	; 0x64
 8009264:	f000 f847 	bl	80092f6 <__retarget_lock_init_recursive>
 8009268:	f7ff ff96 	bl	8009198 <__sfp_lock_release>
 800926c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009270:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009274:	6025      	str	r5, [r4, #0]
 8009276:	61a5      	str	r5, [r4, #24]
 8009278:	2208      	movs	r2, #8
 800927a:	4629      	mov	r1, r5
 800927c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009280:	f7fb fcee 	bl	8004c60 <memset>
 8009284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800928c:	4620      	mov	r0, r4
 800928e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009290:	3468      	adds	r4, #104	; 0x68
 8009292:	e7d9      	b.n	8009248 <__sfp+0x1c>
 8009294:	2104      	movs	r1, #4
 8009296:	4638      	mov	r0, r7
 8009298:	f7ff ff62 	bl	8009160 <__sfmoreglue>
 800929c:	4604      	mov	r4, r0
 800929e:	6030      	str	r0, [r6, #0]
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d1d5      	bne.n	8009250 <__sfp+0x24>
 80092a4:	f7ff ff78 	bl	8009198 <__sfp_lock_release>
 80092a8:	230c      	movs	r3, #12
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	e7ee      	b.n	800928c <__sfp+0x60>
 80092ae:	bf00      	nop
 80092b0:	0800a4d8 	.word	0x0800a4d8
 80092b4:	ffff0001 	.word	0xffff0001

080092b8 <_fwalk_reent>:
 80092b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092bc:	4606      	mov	r6, r0
 80092be:	4688      	mov	r8, r1
 80092c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092c4:	2700      	movs	r7, #0
 80092c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ca:	f1b9 0901 	subs.w	r9, r9, #1
 80092ce:	d505      	bpl.n	80092dc <_fwalk_reent+0x24>
 80092d0:	6824      	ldr	r4, [r4, #0]
 80092d2:	2c00      	cmp	r4, #0
 80092d4:	d1f7      	bne.n	80092c6 <_fwalk_reent+0xe>
 80092d6:	4638      	mov	r0, r7
 80092d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092dc:	89ab      	ldrh	r3, [r5, #12]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d907      	bls.n	80092f2 <_fwalk_reent+0x3a>
 80092e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092e6:	3301      	adds	r3, #1
 80092e8:	d003      	beq.n	80092f2 <_fwalk_reent+0x3a>
 80092ea:	4629      	mov	r1, r5
 80092ec:	4630      	mov	r0, r6
 80092ee:	47c0      	blx	r8
 80092f0:	4307      	orrs	r7, r0
 80092f2:	3568      	adds	r5, #104	; 0x68
 80092f4:	e7e9      	b.n	80092ca <_fwalk_reent+0x12>

080092f6 <__retarget_lock_init_recursive>:
 80092f6:	4770      	bx	lr

080092f8 <__retarget_lock_acquire_recursive>:
 80092f8:	4770      	bx	lr

080092fa <__retarget_lock_release_recursive>:
 80092fa:	4770      	bx	lr

080092fc <__swhatbuf_r>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	460e      	mov	r6, r1
 8009300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009304:	2900      	cmp	r1, #0
 8009306:	b096      	sub	sp, #88	; 0x58
 8009308:	4614      	mov	r4, r2
 800930a:	461d      	mov	r5, r3
 800930c:	da08      	bge.n	8009320 <__swhatbuf_r+0x24>
 800930e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	602a      	str	r2, [r5, #0]
 8009316:	061a      	lsls	r2, r3, #24
 8009318:	d410      	bmi.n	800933c <__swhatbuf_r+0x40>
 800931a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931e:	e00e      	b.n	800933e <__swhatbuf_r+0x42>
 8009320:	466a      	mov	r2, sp
 8009322:	f000 f903 	bl	800952c <_fstat_r>
 8009326:	2800      	cmp	r0, #0
 8009328:	dbf1      	blt.n	800930e <__swhatbuf_r+0x12>
 800932a:	9a01      	ldr	r2, [sp, #4]
 800932c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009334:	425a      	negs	r2, r3
 8009336:	415a      	adcs	r2, r3
 8009338:	602a      	str	r2, [r5, #0]
 800933a:	e7ee      	b.n	800931a <__swhatbuf_r+0x1e>
 800933c:	2340      	movs	r3, #64	; 0x40
 800933e:	2000      	movs	r0, #0
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	b016      	add	sp, #88	; 0x58
 8009344:	bd70      	pop	{r4, r5, r6, pc}
	...

08009348 <__smakebuf_r>:
 8009348:	898b      	ldrh	r3, [r1, #12]
 800934a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800934c:	079d      	lsls	r5, r3, #30
 800934e:	4606      	mov	r6, r0
 8009350:	460c      	mov	r4, r1
 8009352:	d507      	bpl.n	8009364 <__smakebuf_r+0x1c>
 8009354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	6123      	str	r3, [r4, #16]
 800935c:	2301      	movs	r3, #1
 800935e:	6163      	str	r3, [r4, #20]
 8009360:	b002      	add	sp, #8
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	ab01      	add	r3, sp, #4
 8009366:	466a      	mov	r2, sp
 8009368:	f7ff ffc8 	bl	80092fc <__swhatbuf_r>
 800936c:	9900      	ldr	r1, [sp, #0]
 800936e:	4605      	mov	r5, r0
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff f957 	bl	8008624 <_malloc_r>
 8009376:	b948      	cbnz	r0, 800938c <__smakebuf_r+0x44>
 8009378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800937c:	059a      	lsls	r2, r3, #22
 800937e:	d4ef      	bmi.n	8009360 <__smakebuf_r+0x18>
 8009380:	f023 0303 	bic.w	r3, r3, #3
 8009384:	f043 0302 	orr.w	r3, r3, #2
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	e7e3      	b.n	8009354 <__smakebuf_r+0xc>
 800938c:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <__smakebuf_r+0x7c>)
 800938e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	6020      	str	r0, [r4, #0]
 8009394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	6163      	str	r3, [r4, #20]
 800939e:	9b01      	ldr	r3, [sp, #4]
 80093a0:	6120      	str	r0, [r4, #16]
 80093a2:	b15b      	cbz	r3, 80093bc <__smakebuf_r+0x74>
 80093a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f8d1 	bl	8009550 <_isatty_r>
 80093ae:	b128      	cbz	r0, 80093bc <__smakebuf_r+0x74>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f023 0303 	bic.w	r3, r3, #3
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	89a0      	ldrh	r0, [r4, #12]
 80093be:	4305      	orrs	r5, r0
 80093c0:	81a5      	strh	r5, [r4, #12]
 80093c2:	e7cd      	b.n	8009360 <__smakebuf_r+0x18>
 80093c4:	08009155 	.word	0x08009155

080093c8 <_malloc_usable_size_r>:
 80093c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093cc:	1f18      	subs	r0, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfbc      	itt	lt
 80093d2:	580b      	ldrlt	r3, [r1, r0]
 80093d4:	18c0      	addlt	r0, r0, r3
 80093d6:	4770      	bx	lr

080093d8 <_raise_r>:
 80093d8:	291f      	cmp	r1, #31
 80093da:	b538      	push	{r3, r4, r5, lr}
 80093dc:	4604      	mov	r4, r0
 80093de:	460d      	mov	r5, r1
 80093e0:	d904      	bls.n	80093ec <_raise_r+0x14>
 80093e2:	2316      	movs	r3, #22
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093ee:	b112      	cbz	r2, 80093f6 <_raise_r+0x1e>
 80093f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093f4:	b94b      	cbnz	r3, 800940a <_raise_r+0x32>
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f830 	bl	800945c <_getpid_r>
 80093fc:	462a      	mov	r2, r5
 80093fe:	4601      	mov	r1, r0
 8009400:	4620      	mov	r0, r4
 8009402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009406:	f000 b817 	b.w	8009438 <_kill_r>
 800940a:	2b01      	cmp	r3, #1
 800940c:	d00a      	beq.n	8009424 <_raise_r+0x4c>
 800940e:	1c59      	adds	r1, r3, #1
 8009410:	d103      	bne.n	800941a <_raise_r+0x42>
 8009412:	2316      	movs	r3, #22
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	2001      	movs	r0, #1
 8009418:	e7e7      	b.n	80093ea <_raise_r+0x12>
 800941a:	2400      	movs	r4, #0
 800941c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009420:	4628      	mov	r0, r5
 8009422:	4798      	blx	r3
 8009424:	2000      	movs	r0, #0
 8009426:	e7e0      	b.n	80093ea <_raise_r+0x12>

08009428 <raise>:
 8009428:	4b02      	ldr	r3, [pc, #8]	; (8009434 <raise+0xc>)
 800942a:	4601      	mov	r1, r0
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f7ff bfd3 	b.w	80093d8 <_raise_r>
 8009432:	bf00      	nop
 8009434:	20000b6c 	.word	0x20000b6c

08009438 <_kill_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	; (8009458 <_kill_r+0x20>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f7f9 f80f 	bl	8002468 <_kill>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d102      	bne.n	8009454 <_kill_r+0x1c>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	b103      	cbz	r3, 8009454 <_kill_r+0x1c>
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	bf00      	nop
 8009458:	20000e80 	.word	0x20000e80

0800945c <_getpid_r>:
 800945c:	f7f8 bffc 	b.w	8002458 <_getpid>

08009460 <__sread>:
 8009460:	b510      	push	{r4, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	f000 f894 	bl	8009594 <_read_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	bfab      	itete	ge
 8009470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009472:	89a3      	ldrhlt	r3, [r4, #12]
 8009474:	181b      	addge	r3, r3, r0
 8009476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800947a:	bfac      	ite	ge
 800947c:	6563      	strge	r3, [r4, #84]	; 0x54
 800947e:	81a3      	strhlt	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__swrite>:
 8009482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	461f      	mov	r7, r3
 8009488:	898b      	ldrh	r3, [r1, #12]
 800948a:	05db      	lsls	r3, r3, #23
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
 8009490:	4616      	mov	r6, r2
 8009492:	d505      	bpl.n	80094a0 <__swrite+0x1e>
 8009494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009498:	2302      	movs	r3, #2
 800949a:	2200      	movs	r2, #0
 800949c:	f000 f868 	bl	8009570 <_lseek_r>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	f000 b817 	b.w	80094e8 <_write_r>

080094ba <__sseek>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 f855 	bl	8009570 <_lseek_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	bf15      	itete	ne
 80094cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strheq	r3, [r4, #12]
 80094d8:	bf18      	it	ne
 80094da:	81a3      	strhne	r3, [r4, #12]
 80094dc:	bd10      	pop	{r4, pc}

080094de <__sclose>:
 80094de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e2:	f000 b813 	b.w	800950c <_close_r>
	...

080094e8 <_write_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d07      	ldr	r5, [pc, #28]	; (8009508 <_write_r+0x20>)
 80094ec:	4604      	mov	r4, r0
 80094ee:	4608      	mov	r0, r1
 80094f0:	4611      	mov	r1, r2
 80094f2:	2200      	movs	r2, #0
 80094f4:	602a      	str	r2, [r5, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	f7f8 f9f9 	bl	80018ee <_write>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_write_r+0x1e>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_write_r+0x1e>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000e80 	.word	0x20000e80

0800950c <_close_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d06      	ldr	r5, [pc, #24]	; (8009528 <_close_r+0x1c>)
 8009510:	2300      	movs	r3, #0
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7f8 ffdd 	bl	80024d6 <_close>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_close_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_close_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20000e80 	.word	0x20000e80

0800952c <_fstat_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	; (800954c <_fstat_r+0x20>)
 8009530:	2300      	movs	r3, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	4611      	mov	r1, r2
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	f7f8 ffd8 	bl	80024ee <_fstat>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d102      	bne.n	8009548 <_fstat_r+0x1c>
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	b103      	cbz	r3, 8009548 <_fstat_r+0x1c>
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	bd38      	pop	{r3, r4, r5, pc}
 800954a:	bf00      	nop
 800954c:	20000e80 	.word	0x20000e80

08009550 <_isatty_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d06      	ldr	r5, [pc, #24]	; (800956c <_isatty_r+0x1c>)
 8009554:	2300      	movs	r3, #0
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7f8 ffd7 	bl	800250e <_isatty>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_isatty_r+0x1a>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_isatty_r+0x1a>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000e80 	.word	0x20000e80

08009570 <_lseek_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d07      	ldr	r5, [pc, #28]	; (8009590 <_lseek_r+0x20>)
 8009574:	4604      	mov	r4, r0
 8009576:	4608      	mov	r0, r1
 8009578:	4611      	mov	r1, r2
 800957a:	2200      	movs	r2, #0
 800957c:	602a      	str	r2, [r5, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	f7f8 ffd0 	bl	8002524 <_lseek>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d102      	bne.n	800958e <_lseek_r+0x1e>
 8009588:	682b      	ldr	r3, [r5, #0]
 800958a:	b103      	cbz	r3, 800958e <_lseek_r+0x1e>
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	20000e80 	.word	0x20000e80

08009594 <_read_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_read_r+0x20>)
 8009598:	4604      	mov	r4, r0
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	2200      	movs	r2, #0
 80095a0:	602a      	str	r2, [r5, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f7f8 ff7a 	bl	800249c <_read>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_read_r+0x1e>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_read_r+0x1e>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20000e80 	.word	0x20000e80

080095b8 <pow>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	ed2d 8b02 	vpush	{d8}
 80095be:	eeb0 8a40 	vmov.f32	s16, s0
 80095c2:	eef0 8a60 	vmov.f32	s17, s1
 80095c6:	ec55 4b11 	vmov	r4, r5, d1
 80095ca:	f000 f865 	bl	8009698 <__ieee754_pow>
 80095ce:	4622      	mov	r2, r4
 80095d0:	462b      	mov	r3, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	4629      	mov	r1, r5
 80095d6:	ec57 6b10 	vmov	r6, r7, d0
 80095da:	f7f7 faaf 	bl	8000b3c <__aeabi_dcmpun>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d13b      	bne.n	800965a <pow+0xa2>
 80095e2:	ec51 0b18 	vmov	r0, r1, d8
 80095e6:	2200      	movs	r2, #0
 80095e8:	2300      	movs	r3, #0
 80095ea:	f7f7 fa75 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ee:	b1b8      	cbz	r0, 8009620 <pow+0x68>
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f7 fa6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d146      	bne.n	800968e <pow+0xd6>
 8009600:	ec45 4b10 	vmov	d0, r4, r5
 8009604:	f000 fe61 	bl	800a2ca <finite>
 8009608:	b338      	cbz	r0, 800965a <pow+0xa2>
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	4620      	mov	r0, r4
 8009610:	4629      	mov	r1, r5
 8009612:	f7f7 fa6b 	bl	8000aec <__aeabi_dcmplt>
 8009616:	b300      	cbz	r0, 800965a <pow+0xa2>
 8009618:	f7fb faf8 	bl	8004c0c <__errno>
 800961c:	2322      	movs	r3, #34	; 0x22
 800961e:	e01b      	b.n	8009658 <pow+0xa0>
 8009620:	ec47 6b10 	vmov	d0, r6, r7
 8009624:	f000 fe51 	bl	800a2ca <finite>
 8009628:	b9e0      	cbnz	r0, 8009664 <pow+0xac>
 800962a:	eeb0 0a48 	vmov.f32	s0, s16
 800962e:	eef0 0a68 	vmov.f32	s1, s17
 8009632:	f000 fe4a 	bl	800a2ca <finite>
 8009636:	b1a8      	cbz	r0, 8009664 <pow+0xac>
 8009638:	ec45 4b10 	vmov	d0, r4, r5
 800963c:	f000 fe45 	bl	800a2ca <finite>
 8009640:	b180      	cbz	r0, 8009664 <pow+0xac>
 8009642:	4632      	mov	r2, r6
 8009644:	463b      	mov	r3, r7
 8009646:	4630      	mov	r0, r6
 8009648:	4639      	mov	r1, r7
 800964a:	f7f7 fa77 	bl	8000b3c <__aeabi_dcmpun>
 800964e:	2800      	cmp	r0, #0
 8009650:	d0e2      	beq.n	8009618 <pow+0x60>
 8009652:	f7fb fadb 	bl	8004c0c <__errno>
 8009656:	2321      	movs	r3, #33	; 0x21
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	ecbd 8b02 	vpop	{d8}
 800965e:	ec47 6b10 	vmov	d0, r6, r7
 8009662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009664:	2200      	movs	r2, #0
 8009666:	2300      	movs	r3, #0
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f7 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8009670:	2800      	cmp	r0, #0
 8009672:	d0f2      	beq.n	800965a <pow+0xa2>
 8009674:	eeb0 0a48 	vmov.f32	s0, s16
 8009678:	eef0 0a68 	vmov.f32	s1, s17
 800967c:	f000 fe25 	bl	800a2ca <finite>
 8009680:	2800      	cmp	r0, #0
 8009682:	d0ea      	beq.n	800965a <pow+0xa2>
 8009684:	ec45 4b10 	vmov	d0, r4, r5
 8009688:	f000 fe1f 	bl	800a2ca <finite>
 800968c:	e7c3      	b.n	8009616 <pow+0x5e>
 800968e:	4f01      	ldr	r7, [pc, #4]	; (8009694 <pow+0xdc>)
 8009690:	2600      	movs	r6, #0
 8009692:	e7e2      	b.n	800965a <pow+0xa2>
 8009694:	3ff00000 	.word	0x3ff00000

08009698 <__ieee754_pow>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	ed2d 8b06 	vpush	{d8-d10}
 80096a0:	b089      	sub	sp, #36	; 0x24
 80096a2:	ed8d 1b00 	vstr	d1, [sp]
 80096a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80096aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80096ae:	ea58 0102 	orrs.w	r1, r8, r2
 80096b2:	ec57 6b10 	vmov	r6, r7, d0
 80096b6:	d115      	bne.n	80096e4 <__ieee754_pow+0x4c>
 80096b8:	19b3      	adds	r3, r6, r6
 80096ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80096be:	4152      	adcs	r2, r2
 80096c0:	4299      	cmp	r1, r3
 80096c2:	4b89      	ldr	r3, [pc, #548]	; (80098e8 <__ieee754_pow+0x250>)
 80096c4:	4193      	sbcs	r3, r2
 80096c6:	f080 84d2 	bcs.w	800a06e <__ieee754_pow+0x9d6>
 80096ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ce:	4630      	mov	r0, r6
 80096d0:	4639      	mov	r1, r7
 80096d2:	f7f6 fde3 	bl	800029c <__adddf3>
 80096d6:	ec41 0b10 	vmov	d0, r0, r1
 80096da:	b009      	add	sp, #36	; 0x24
 80096dc:	ecbd 8b06 	vpop	{d8-d10}
 80096e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	4b81      	ldr	r3, [pc, #516]	; (80098ec <__ieee754_pow+0x254>)
 80096e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80096ea:	429c      	cmp	r4, r3
 80096ec:	ee10 aa10 	vmov	sl, s0
 80096f0:	463d      	mov	r5, r7
 80096f2:	dc06      	bgt.n	8009702 <__ieee754_pow+0x6a>
 80096f4:	d101      	bne.n	80096fa <__ieee754_pow+0x62>
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	d1e7      	bne.n	80096ca <__ieee754_pow+0x32>
 80096fa:	4598      	cmp	r8, r3
 80096fc:	dc01      	bgt.n	8009702 <__ieee754_pow+0x6a>
 80096fe:	d10f      	bne.n	8009720 <__ieee754_pow+0x88>
 8009700:	b172      	cbz	r2, 8009720 <__ieee754_pow+0x88>
 8009702:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009706:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800970a:	ea55 050a 	orrs.w	r5, r5, sl
 800970e:	d1dc      	bne.n	80096ca <__ieee754_pow+0x32>
 8009710:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009714:	18db      	adds	r3, r3, r3
 8009716:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800971a:	4152      	adcs	r2, r2
 800971c:	429d      	cmp	r5, r3
 800971e:	e7d0      	b.n	80096c2 <__ieee754_pow+0x2a>
 8009720:	2d00      	cmp	r5, #0
 8009722:	da3b      	bge.n	800979c <__ieee754_pow+0x104>
 8009724:	4b72      	ldr	r3, [pc, #456]	; (80098f0 <__ieee754_pow+0x258>)
 8009726:	4598      	cmp	r8, r3
 8009728:	dc51      	bgt.n	80097ce <__ieee754_pow+0x136>
 800972a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800972e:	4598      	cmp	r8, r3
 8009730:	f340 84ac 	ble.w	800a08c <__ieee754_pow+0x9f4>
 8009734:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009738:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800973c:	2b14      	cmp	r3, #20
 800973e:	dd0f      	ble.n	8009760 <__ieee754_pow+0xc8>
 8009740:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009744:	fa22 f103 	lsr.w	r1, r2, r3
 8009748:	fa01 f303 	lsl.w	r3, r1, r3
 800974c:	4293      	cmp	r3, r2
 800974e:	f040 849d 	bne.w	800a08c <__ieee754_pow+0x9f4>
 8009752:	f001 0101 	and.w	r1, r1, #1
 8009756:	f1c1 0302 	rsb	r3, r1, #2
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	b182      	cbz	r2, 8009780 <__ieee754_pow+0xe8>
 800975e:	e05f      	b.n	8009820 <__ieee754_pow+0x188>
 8009760:	2a00      	cmp	r2, #0
 8009762:	d15b      	bne.n	800981c <__ieee754_pow+0x184>
 8009764:	f1c3 0314 	rsb	r3, r3, #20
 8009768:	fa48 f103 	asr.w	r1, r8, r3
 800976c:	fa01 f303 	lsl.w	r3, r1, r3
 8009770:	4543      	cmp	r3, r8
 8009772:	f040 8488 	bne.w	800a086 <__ieee754_pow+0x9ee>
 8009776:	f001 0101 	and.w	r1, r1, #1
 800977a:	f1c1 0302 	rsb	r3, r1, #2
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	4b5c      	ldr	r3, [pc, #368]	; (80098f4 <__ieee754_pow+0x25c>)
 8009782:	4598      	cmp	r8, r3
 8009784:	d132      	bne.n	80097ec <__ieee754_pow+0x154>
 8009786:	f1b9 0f00 	cmp.w	r9, #0
 800978a:	f280 8478 	bge.w	800a07e <__ieee754_pow+0x9e6>
 800978e:	4959      	ldr	r1, [pc, #356]	; (80098f4 <__ieee754_pow+0x25c>)
 8009790:	4632      	mov	r2, r6
 8009792:	463b      	mov	r3, r7
 8009794:	2000      	movs	r0, #0
 8009796:	f7f7 f861 	bl	800085c <__aeabi_ddiv>
 800979a:	e79c      	b.n	80096d6 <__ieee754_pow+0x3e>
 800979c:	2300      	movs	r3, #0
 800979e:	9304      	str	r3, [sp, #16]
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d13d      	bne.n	8009820 <__ieee754_pow+0x188>
 80097a4:	4b51      	ldr	r3, [pc, #324]	; (80098ec <__ieee754_pow+0x254>)
 80097a6:	4598      	cmp	r8, r3
 80097a8:	d1ea      	bne.n	8009780 <__ieee754_pow+0xe8>
 80097aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097b2:	ea53 030a 	orrs.w	r3, r3, sl
 80097b6:	f000 845a 	beq.w	800a06e <__ieee754_pow+0x9d6>
 80097ba:	4b4f      	ldr	r3, [pc, #316]	; (80098f8 <__ieee754_pow+0x260>)
 80097bc:	429c      	cmp	r4, r3
 80097be:	dd08      	ble.n	80097d2 <__ieee754_pow+0x13a>
 80097c0:	f1b9 0f00 	cmp.w	r9, #0
 80097c4:	f2c0 8457 	blt.w	800a076 <__ieee754_pow+0x9de>
 80097c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097cc:	e783      	b.n	80096d6 <__ieee754_pow+0x3e>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e7e5      	b.n	800979e <__ieee754_pow+0x106>
 80097d2:	f1b9 0f00 	cmp.w	r9, #0
 80097d6:	f04f 0000 	mov.w	r0, #0
 80097da:	f04f 0100 	mov.w	r1, #0
 80097de:	f6bf af7a 	bge.w	80096d6 <__ieee754_pow+0x3e>
 80097e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80097e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80097ea:	e774      	b.n	80096d6 <__ieee754_pow+0x3e>
 80097ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80097f0:	d106      	bne.n	8009800 <__ieee754_pow+0x168>
 80097f2:	4632      	mov	r2, r6
 80097f4:	463b      	mov	r3, r7
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f6 ff05 	bl	8000608 <__aeabi_dmul>
 80097fe:	e76a      	b.n	80096d6 <__ieee754_pow+0x3e>
 8009800:	4b3e      	ldr	r3, [pc, #248]	; (80098fc <__ieee754_pow+0x264>)
 8009802:	4599      	cmp	r9, r3
 8009804:	d10c      	bne.n	8009820 <__ieee754_pow+0x188>
 8009806:	2d00      	cmp	r5, #0
 8009808:	db0a      	blt.n	8009820 <__ieee754_pow+0x188>
 800980a:	ec47 6b10 	vmov	d0, r6, r7
 800980e:	b009      	add	sp, #36	; 0x24
 8009810:	ecbd 8b06 	vpop	{d8-d10}
 8009814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	f000 bc6c 	b.w	800a0f4 <__ieee754_sqrt>
 800981c:	2300      	movs	r3, #0
 800981e:	9304      	str	r3, [sp, #16]
 8009820:	ec47 6b10 	vmov	d0, r6, r7
 8009824:	f000 fd48 	bl	800a2b8 <fabs>
 8009828:	ec51 0b10 	vmov	r0, r1, d0
 800982c:	f1ba 0f00 	cmp.w	sl, #0
 8009830:	d129      	bne.n	8009886 <__ieee754_pow+0x1ee>
 8009832:	b124      	cbz	r4, 800983e <__ieee754_pow+0x1a6>
 8009834:	4b2f      	ldr	r3, [pc, #188]	; (80098f4 <__ieee754_pow+0x25c>)
 8009836:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800983a:	429a      	cmp	r2, r3
 800983c:	d123      	bne.n	8009886 <__ieee754_pow+0x1ee>
 800983e:	f1b9 0f00 	cmp.w	r9, #0
 8009842:	da05      	bge.n	8009850 <__ieee754_pow+0x1b8>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	2000      	movs	r0, #0
 800984a:	492a      	ldr	r1, [pc, #168]	; (80098f4 <__ieee754_pow+0x25c>)
 800984c:	f7f7 f806 	bl	800085c <__aeabi_ddiv>
 8009850:	2d00      	cmp	r5, #0
 8009852:	f6bf af40 	bge.w	80096d6 <__ieee754_pow+0x3e>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800985c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009860:	4323      	orrs	r3, r4
 8009862:	d108      	bne.n	8009876 <__ieee754_pow+0x1de>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4610      	mov	r0, r2
 800986a:	4619      	mov	r1, r3
 800986c:	f7f6 fd14 	bl	8000298 <__aeabi_dsub>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	e78f      	b.n	8009796 <__ieee754_pow+0xfe>
 8009876:	9b04      	ldr	r3, [sp, #16]
 8009878:	2b01      	cmp	r3, #1
 800987a:	f47f af2c 	bne.w	80096d6 <__ieee754_pow+0x3e>
 800987e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009882:	4619      	mov	r1, r3
 8009884:	e727      	b.n	80096d6 <__ieee754_pow+0x3e>
 8009886:	0feb      	lsrs	r3, r5, #31
 8009888:	3b01      	subs	r3, #1
 800988a:	9306      	str	r3, [sp, #24]
 800988c:	9a06      	ldr	r2, [sp, #24]
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	4313      	orrs	r3, r2
 8009892:	d102      	bne.n	800989a <__ieee754_pow+0x202>
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	e7e6      	b.n	8009868 <__ieee754_pow+0x1d0>
 800989a:	4b19      	ldr	r3, [pc, #100]	; (8009900 <__ieee754_pow+0x268>)
 800989c:	4598      	cmp	r8, r3
 800989e:	f340 80fb 	ble.w	8009a98 <__ieee754_pow+0x400>
 80098a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098a6:	4598      	cmp	r8, r3
 80098a8:	4b13      	ldr	r3, [pc, #76]	; (80098f8 <__ieee754_pow+0x260>)
 80098aa:	dd0c      	ble.n	80098c6 <__ieee754_pow+0x22e>
 80098ac:	429c      	cmp	r4, r3
 80098ae:	dc0f      	bgt.n	80098d0 <__ieee754_pow+0x238>
 80098b0:	f1b9 0f00 	cmp.w	r9, #0
 80098b4:	da0f      	bge.n	80098d6 <__ieee754_pow+0x23e>
 80098b6:	2000      	movs	r0, #0
 80098b8:	b009      	add	sp, #36	; 0x24
 80098ba:	ecbd 8b06 	vpop	{d8-d10}
 80098be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c2:	f000 bcf0 	b.w	800a2a6 <__math_oflow>
 80098c6:	429c      	cmp	r4, r3
 80098c8:	dbf2      	blt.n	80098b0 <__ieee754_pow+0x218>
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <__ieee754_pow+0x25c>)
 80098cc:	429c      	cmp	r4, r3
 80098ce:	dd19      	ble.n	8009904 <__ieee754_pow+0x26c>
 80098d0:	f1b9 0f00 	cmp.w	r9, #0
 80098d4:	dcef      	bgt.n	80098b6 <__ieee754_pow+0x21e>
 80098d6:	2000      	movs	r0, #0
 80098d8:	b009      	add	sp, #36	; 0x24
 80098da:	ecbd 8b06 	vpop	{d8-d10}
 80098de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e2:	f000 bcd7 	b.w	800a294 <__math_uflow>
 80098e6:	bf00      	nop
 80098e8:	fff00000 	.word	0xfff00000
 80098ec:	7ff00000 	.word	0x7ff00000
 80098f0:	433fffff 	.word	0x433fffff
 80098f4:	3ff00000 	.word	0x3ff00000
 80098f8:	3fefffff 	.word	0x3fefffff
 80098fc:	3fe00000 	.word	0x3fe00000
 8009900:	41e00000 	.word	0x41e00000
 8009904:	4b60      	ldr	r3, [pc, #384]	; (8009a88 <__ieee754_pow+0x3f0>)
 8009906:	2200      	movs	r2, #0
 8009908:	f7f6 fcc6 	bl	8000298 <__aeabi_dsub>
 800990c:	a354      	add	r3, pc, #336	; (adr r3, 8009a60 <__ieee754_pow+0x3c8>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	4604      	mov	r4, r0
 8009914:	460d      	mov	r5, r1
 8009916:	f7f6 fe77 	bl	8000608 <__aeabi_dmul>
 800991a:	a353      	add	r3, pc, #332	; (adr r3, 8009a68 <__ieee754_pow+0x3d0>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	4606      	mov	r6, r0
 8009922:	460f      	mov	r7, r1
 8009924:	4620      	mov	r0, r4
 8009926:	4629      	mov	r1, r5
 8009928:	f7f6 fe6e 	bl	8000608 <__aeabi_dmul>
 800992c:	4b57      	ldr	r3, [pc, #348]	; (8009a8c <__ieee754_pow+0x3f4>)
 800992e:	4682      	mov	sl, r0
 8009930:	468b      	mov	fp, r1
 8009932:	2200      	movs	r2, #0
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fe66 	bl	8000608 <__aeabi_dmul>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	a14b      	add	r1, pc, #300	; (adr r1, 8009a70 <__ieee754_pow+0x3d8>)
 8009942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009946:	f7f6 fca7 	bl	8000298 <__aeabi_dsub>
 800994a:	4622      	mov	r2, r4
 800994c:	462b      	mov	r3, r5
 800994e:	f7f6 fe5b 	bl	8000608 <__aeabi_dmul>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	2000      	movs	r0, #0
 8009958:	494d      	ldr	r1, [pc, #308]	; (8009a90 <__ieee754_pow+0x3f8>)
 800995a:	f7f6 fc9d 	bl	8000298 <__aeabi_dsub>
 800995e:	4622      	mov	r2, r4
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	462b      	mov	r3, r5
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f6 fe4d 	bl	8000608 <__aeabi_dmul>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fe47 	bl	8000608 <__aeabi_dmul>
 800997a:	a33f      	add	r3, pc, #252	; (adr r3, 8009a78 <__ieee754_pow+0x3e0>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fe42 	bl	8000608 <__aeabi_dmul>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4650      	mov	r0, sl
 800998a:	4659      	mov	r1, fp
 800998c:	f7f6 fc84 	bl	8000298 <__aeabi_dsub>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4680      	mov	r8, r0
 8009996:	4689      	mov	r9, r1
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fc7e 	bl	800029c <__adddf3>
 80099a0:	2000      	movs	r0, #0
 80099a2:	4632      	mov	r2, r6
 80099a4:	463b      	mov	r3, r7
 80099a6:	4604      	mov	r4, r0
 80099a8:	460d      	mov	r5, r1
 80099aa:	f7f6 fc75 	bl	8000298 <__aeabi_dsub>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f6 fc6f 	bl	8000298 <__aeabi_dsub>
 80099ba:	9b04      	ldr	r3, [sp, #16]
 80099bc:	9a06      	ldr	r2, [sp, #24]
 80099be:	3b01      	subs	r3, #1
 80099c0:	4313      	orrs	r3, r2
 80099c2:	4682      	mov	sl, r0
 80099c4:	468b      	mov	fp, r1
 80099c6:	f040 81e7 	bne.w	8009d98 <__ieee754_pow+0x700>
 80099ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009a80 <__ieee754_pow+0x3e8>
 80099ce:	eeb0 8a47 	vmov.f32	s16, s14
 80099d2:	eef0 8a67 	vmov.f32	s17, s15
 80099d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80099da:	2600      	movs	r6, #0
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099e4:	f7f6 fc58 	bl	8000298 <__aeabi_dsub>
 80099e8:	4622      	mov	r2, r4
 80099ea:	462b      	mov	r3, r5
 80099ec:	f7f6 fe0c 	bl	8000608 <__aeabi_dmul>
 80099f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099f4:	4680      	mov	r8, r0
 80099f6:	4689      	mov	r9, r1
 80099f8:	4650      	mov	r0, sl
 80099fa:	4659      	mov	r1, fp
 80099fc:	f7f6 fe04 	bl	8000608 <__aeabi_dmul>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	4640      	mov	r0, r8
 8009a06:	4649      	mov	r1, r9
 8009a08:	f7f6 fc48 	bl	800029c <__adddf3>
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	463b      	mov	r3, r7
 8009a10:	4680      	mov	r8, r0
 8009a12:	4689      	mov	r9, r1
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 fdf6 	bl	8000608 <__aeabi_dmul>
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4604      	mov	r4, r0
 8009a20:	460d      	mov	r5, r1
 8009a22:	4602      	mov	r2, r0
 8009a24:	4649      	mov	r1, r9
 8009a26:	4640      	mov	r0, r8
 8009a28:	f7f6 fc38 	bl	800029c <__adddf3>
 8009a2c:	4b19      	ldr	r3, [pc, #100]	; (8009a94 <__ieee754_pow+0x3fc>)
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	ec45 4b19 	vmov	d9, r4, r5
 8009a34:	4606      	mov	r6, r0
 8009a36:	460f      	mov	r7, r1
 8009a38:	468b      	mov	fp, r1
 8009a3a:	f340 82f1 	ble.w	800a020 <__ieee754_pow+0x988>
 8009a3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a46:	4303      	orrs	r3, r0
 8009a48:	f000 81e4 	beq.w	8009e14 <__ieee754_pow+0x77c>
 8009a4c:	ec51 0b18 	vmov	r0, r1, d8
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	f7f7 f84a 	bl	8000aec <__aeabi_dcmplt>
 8009a58:	3800      	subs	r0, #0
 8009a5a:	bf18      	it	ne
 8009a5c:	2001      	movne	r0, #1
 8009a5e:	e72b      	b.n	80098b8 <__ieee754_pow+0x220>
 8009a60:	60000000 	.word	0x60000000
 8009a64:	3ff71547 	.word	0x3ff71547
 8009a68:	f85ddf44 	.word	0xf85ddf44
 8009a6c:	3e54ae0b 	.word	0x3e54ae0b
 8009a70:	55555555 	.word	0x55555555
 8009a74:	3fd55555 	.word	0x3fd55555
 8009a78:	652b82fe 	.word	0x652b82fe
 8009a7c:	3ff71547 	.word	0x3ff71547
 8009a80:	00000000 	.word	0x00000000
 8009a84:	bff00000 	.word	0xbff00000
 8009a88:	3ff00000 	.word	0x3ff00000
 8009a8c:	3fd00000 	.word	0x3fd00000
 8009a90:	3fe00000 	.word	0x3fe00000
 8009a94:	408fffff 	.word	0x408fffff
 8009a98:	4bd5      	ldr	r3, [pc, #852]	; (8009df0 <__ieee754_pow+0x758>)
 8009a9a:	402b      	ands	r3, r5
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	b92b      	cbnz	r3, 8009aac <__ieee754_pow+0x414>
 8009aa0:	4bd4      	ldr	r3, [pc, #848]	; (8009df4 <__ieee754_pow+0x75c>)
 8009aa2:	f7f6 fdb1 	bl	8000608 <__aeabi_dmul>
 8009aa6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009aaa:	460c      	mov	r4, r1
 8009aac:	1523      	asrs	r3, r4, #20
 8009aae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ab2:	4413      	add	r3, r2
 8009ab4:	9305      	str	r3, [sp, #20]
 8009ab6:	4bd0      	ldr	r3, [pc, #832]	; (8009df8 <__ieee754_pow+0x760>)
 8009ab8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009abc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ac6:	dd08      	ble.n	8009ada <__ieee754_pow+0x442>
 8009ac8:	4bcc      	ldr	r3, [pc, #816]	; (8009dfc <__ieee754_pow+0x764>)
 8009aca:	429c      	cmp	r4, r3
 8009acc:	f340 8162 	ble.w	8009d94 <__ieee754_pow+0x6fc>
 8009ad0:	9b05      	ldr	r3, [sp, #20]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009ada:	2400      	movs	r4, #0
 8009adc:	00e3      	lsls	r3, r4, #3
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	4bc7      	ldr	r3, [pc, #796]	; (8009e00 <__ieee754_pow+0x768>)
 8009ae2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ae6:	ed93 7b00 	vldr	d7, [r3]
 8009aea:	4629      	mov	r1, r5
 8009aec:	ec53 2b17 	vmov	r2, r3, d7
 8009af0:	eeb0 9a47 	vmov.f32	s18, s14
 8009af4:	eef0 9a67 	vmov.f32	s19, s15
 8009af8:	4682      	mov	sl, r0
 8009afa:	f7f6 fbcd 	bl	8000298 <__aeabi_dsub>
 8009afe:	4652      	mov	r2, sl
 8009b00:	4606      	mov	r6, r0
 8009b02:	460f      	mov	r7, r1
 8009b04:	462b      	mov	r3, r5
 8009b06:	ec51 0b19 	vmov	r0, r1, d9
 8009b0a:	f7f6 fbc7 	bl	800029c <__adddf3>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	2000      	movs	r0, #0
 8009b14:	49bb      	ldr	r1, [pc, #748]	; (8009e04 <__ieee754_pow+0x76c>)
 8009b16:	f7f6 fea1 	bl	800085c <__aeabi_ddiv>
 8009b1a:	ec41 0b1a 	vmov	d10, r0, r1
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fd6f 	bl	8000608 <__aeabi_dmul>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b30:	9302      	str	r3, [sp, #8]
 8009b32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b36:	46ab      	mov	fp, r5
 8009b38:	106d      	asrs	r5, r5, #1
 8009b3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b42:	ec41 0b18 	vmov	d8, r0, r1
 8009b46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	4614      	mov	r4, r2
 8009b52:	461d      	mov	r5, r3
 8009b54:	f7f6 fd58 	bl	8000608 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 fb9a 	bl	8000298 <__aeabi_dsub>
 8009b64:	ec53 2b19 	vmov	r2, r3, d9
 8009b68:	4606      	mov	r6, r0
 8009b6a:	460f      	mov	r7, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fb92 	bl	8000298 <__aeabi_dsub>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	f7f6 fb8c 	bl	8000298 <__aeabi_dsub>
 8009b80:	4642      	mov	r2, r8
 8009b82:	464b      	mov	r3, r9
 8009b84:	f7f6 fd40 	bl	8000608 <__aeabi_dmul>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	4639      	mov	r1, r7
 8009b90:	f7f6 fb82 	bl	8000298 <__aeabi_dsub>
 8009b94:	ec53 2b1a 	vmov	r2, r3, d10
 8009b98:	f7f6 fd36 	bl	8000608 <__aeabi_dmul>
 8009b9c:	ec53 2b18 	vmov	r2, r3, d8
 8009ba0:	ec41 0b19 	vmov	d9, r0, r1
 8009ba4:	ec51 0b18 	vmov	r0, r1, d8
 8009ba8:	f7f6 fd2e 	bl	8000608 <__aeabi_dmul>
 8009bac:	a37c      	add	r3, pc, #496	; (adr r3, 8009da0 <__ieee754_pow+0x708>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	f7f6 fd27 	bl	8000608 <__aeabi_dmul>
 8009bba:	a37b      	add	r3, pc, #492	; (adr r3, 8009da8 <__ieee754_pow+0x710>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f7f6 fb6c 	bl	800029c <__adddf3>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f7f6 fd1e 	bl	8000608 <__aeabi_dmul>
 8009bcc:	a378      	add	r3, pc, #480	; (adr r3, 8009db0 <__ieee754_pow+0x718>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fb63 	bl	800029c <__adddf3>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	462b      	mov	r3, r5
 8009bda:	f7f6 fd15 	bl	8000608 <__aeabi_dmul>
 8009bde:	a376      	add	r3, pc, #472	; (adr r3, 8009db8 <__ieee754_pow+0x720>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fb5a 	bl	800029c <__adddf3>
 8009be8:	4622      	mov	r2, r4
 8009bea:	462b      	mov	r3, r5
 8009bec:	f7f6 fd0c 	bl	8000608 <__aeabi_dmul>
 8009bf0:	a373      	add	r3, pc, #460	; (adr r3, 8009dc0 <__ieee754_pow+0x728>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 fb51 	bl	800029c <__adddf3>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 fd03 	bl	8000608 <__aeabi_dmul>
 8009c02:	a371      	add	r3, pc, #452	; (adr r3, 8009dc8 <__ieee754_pow+0x730>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 fb48 	bl	800029c <__adddf3>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	462b      	mov	r3, r5
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fcf6 	bl	8000608 <__aeabi_dmul>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4630      	mov	r0, r6
 8009c22:	4639      	mov	r1, r7
 8009c24:	f7f6 fcf0 	bl	8000608 <__aeabi_dmul>
 8009c28:	4642      	mov	r2, r8
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	464b      	mov	r3, r9
 8009c30:	ec51 0b18 	vmov	r0, r1, d8
 8009c34:	f7f6 fb32 	bl	800029c <__adddf3>
 8009c38:	ec53 2b19 	vmov	r2, r3, d9
 8009c3c:	f7f6 fce4 	bl	8000608 <__aeabi_dmul>
 8009c40:	4622      	mov	r2, r4
 8009c42:	462b      	mov	r3, r5
 8009c44:	f7f6 fb2a 	bl	800029c <__adddf3>
 8009c48:	4642      	mov	r2, r8
 8009c4a:	4682      	mov	sl, r0
 8009c4c:	468b      	mov	fp, r1
 8009c4e:	464b      	mov	r3, r9
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 fcd8 	bl	8000608 <__aeabi_dmul>
 8009c58:	4b6b      	ldr	r3, [pc, #428]	; (8009e08 <__ieee754_pow+0x770>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	f7f6 fb1c 	bl	800029c <__adddf3>
 8009c64:	4652      	mov	r2, sl
 8009c66:	465b      	mov	r3, fp
 8009c68:	f7f6 fb18 	bl	800029c <__adddf3>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	4604      	mov	r4, r0
 8009c70:	460d      	mov	r5, r1
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4640      	mov	r0, r8
 8009c78:	4649      	mov	r1, r9
 8009c7a:	f7f6 fcc5 	bl	8000608 <__aeabi_dmul>
 8009c7e:	4b62      	ldr	r3, [pc, #392]	; (8009e08 <__ieee754_pow+0x770>)
 8009c80:	4680      	mov	r8, r0
 8009c82:	4689      	mov	r9, r1
 8009c84:	2200      	movs	r2, #0
 8009c86:	4620      	mov	r0, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	f7f6 fb05 	bl	8000298 <__aeabi_dsub>
 8009c8e:	4632      	mov	r2, r6
 8009c90:	463b      	mov	r3, r7
 8009c92:	f7f6 fb01 	bl	8000298 <__aeabi_dsub>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	f7f6 fafb 	bl	8000298 <__aeabi_dsub>
 8009ca2:	ec53 2b18 	vmov	r2, r3, d8
 8009ca6:	f7f6 fcaf 	bl	8000608 <__aeabi_dmul>
 8009caa:	4622      	mov	r2, r4
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	ec51 0b19 	vmov	r0, r1, d9
 8009cb6:	f7f6 fca7 	bl	8000608 <__aeabi_dmul>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	f7f6 faeb 	bl	800029c <__adddf3>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4640      	mov	r0, r8
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	f7f6 fae3 	bl	800029c <__adddf3>
 8009cd6:	a33e      	add	r3, pc, #248	; (adr r3, 8009dd0 <__ieee754_pow+0x738>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	2000      	movs	r0, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	f7f6 fc91 	bl	8000608 <__aeabi_dmul>
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	ec41 0b18 	vmov	d8, r0, r1
 8009cec:	464b      	mov	r3, r9
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	f7f6 fad1 	bl	8000298 <__aeabi_dsub>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	f7f6 facb 	bl	8000298 <__aeabi_dsub>
 8009d02:	a335      	add	r3, pc, #212	; (adr r3, 8009dd8 <__ieee754_pow+0x740>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fc7e 	bl	8000608 <__aeabi_dmul>
 8009d0c:	a334      	add	r3, pc, #208	; (adr r3, 8009de0 <__ieee754_pow+0x748>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fc75 	bl	8000608 <__aeabi_dmul>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4630      	mov	r0, r6
 8009d24:	4639      	mov	r1, r7
 8009d26:	f7f6 fab9 	bl	800029c <__adddf3>
 8009d2a:	9a07      	ldr	r2, [sp, #28]
 8009d2c:	4b37      	ldr	r3, [pc, #220]	; (8009e0c <__ieee754_pow+0x774>)
 8009d2e:	4413      	add	r3, r2
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fab2 	bl	800029c <__adddf3>
 8009d38:	4682      	mov	sl, r0
 8009d3a:	9805      	ldr	r0, [sp, #20]
 8009d3c:	468b      	mov	fp, r1
 8009d3e:	f7f6 fbf9 	bl	8000534 <__aeabi_i2d>
 8009d42:	9a07      	ldr	r2, [sp, #28]
 8009d44:	4b32      	ldr	r3, [pc, #200]	; (8009e10 <__ieee754_pow+0x778>)
 8009d46:	4413      	add	r3, r2
 8009d48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	460f      	mov	r7, r1
 8009d50:	4652      	mov	r2, sl
 8009d52:	465b      	mov	r3, fp
 8009d54:	ec51 0b18 	vmov	r0, r1, d8
 8009d58:	f7f6 faa0 	bl	800029c <__adddf3>
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	464b      	mov	r3, r9
 8009d60:	f7f6 fa9c 	bl	800029c <__adddf3>
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	f7f6 fa98 	bl	800029c <__adddf3>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	4632      	mov	r2, r6
 8009d70:	463b      	mov	r3, r7
 8009d72:	4604      	mov	r4, r0
 8009d74:	460d      	mov	r5, r1
 8009d76:	f7f6 fa8f 	bl	8000298 <__aeabi_dsub>
 8009d7a:	4642      	mov	r2, r8
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	f7f6 fa8b 	bl	8000298 <__aeabi_dsub>
 8009d82:	ec53 2b18 	vmov	r2, r3, d8
 8009d86:	f7f6 fa87 	bl	8000298 <__aeabi_dsub>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4650      	mov	r0, sl
 8009d90:	4659      	mov	r1, fp
 8009d92:	e610      	b.n	80099b6 <__ieee754_pow+0x31e>
 8009d94:	2401      	movs	r4, #1
 8009d96:	e6a1      	b.n	8009adc <__ieee754_pow+0x444>
 8009d98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009de8 <__ieee754_pow+0x750>
 8009d9c:	e617      	b.n	80099ce <__ieee754_pow+0x336>
 8009d9e:	bf00      	nop
 8009da0:	4a454eef 	.word	0x4a454eef
 8009da4:	3fca7e28 	.word	0x3fca7e28
 8009da8:	93c9db65 	.word	0x93c9db65
 8009dac:	3fcd864a 	.word	0x3fcd864a
 8009db0:	a91d4101 	.word	0xa91d4101
 8009db4:	3fd17460 	.word	0x3fd17460
 8009db8:	518f264d 	.word	0x518f264d
 8009dbc:	3fd55555 	.word	0x3fd55555
 8009dc0:	db6fabff 	.word	0xdb6fabff
 8009dc4:	3fdb6db6 	.word	0x3fdb6db6
 8009dc8:	33333303 	.word	0x33333303
 8009dcc:	3fe33333 	.word	0x3fe33333
 8009dd0:	e0000000 	.word	0xe0000000
 8009dd4:	3feec709 	.word	0x3feec709
 8009dd8:	dc3a03fd 	.word	0xdc3a03fd
 8009ddc:	3feec709 	.word	0x3feec709
 8009de0:	145b01f5 	.word	0x145b01f5
 8009de4:	be3e2fe0 	.word	0xbe3e2fe0
 8009de8:	00000000 	.word	0x00000000
 8009dec:	3ff00000 	.word	0x3ff00000
 8009df0:	7ff00000 	.word	0x7ff00000
 8009df4:	43400000 	.word	0x43400000
 8009df8:	0003988e 	.word	0x0003988e
 8009dfc:	000bb679 	.word	0x000bb679
 8009e00:	0800a980 	.word	0x0800a980
 8009e04:	3ff00000 	.word	0x3ff00000
 8009e08:	40080000 	.word	0x40080000
 8009e0c:	0800a9a0 	.word	0x0800a9a0
 8009e10:	0800a990 	.word	0x0800a990
 8009e14:	a3b5      	add	r3, pc, #724	; (adr r3, 800a0ec <__ieee754_pow+0xa54>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fa3d 	bl	800029c <__adddf3>
 8009e22:	4622      	mov	r2, r4
 8009e24:	ec41 0b1a 	vmov	d10, r0, r1
 8009e28:	462b      	mov	r3, r5
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7f6 fa33 	bl	8000298 <__aeabi_dsub>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	ec51 0b1a 	vmov	r0, r1, d10
 8009e3a:	f7f6 fe75 	bl	8000b28 <__aeabi_dcmpgt>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f47f ae04 	bne.w	8009a4c <__ieee754_pow+0x3b4>
 8009e44:	4aa4      	ldr	r2, [pc, #656]	; (800a0d8 <__ieee754_pow+0xa40>)
 8009e46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	f340 8108 	ble.w	800a060 <__ieee754_pow+0x9c8>
 8009e50:	151b      	asrs	r3, r3, #20
 8009e52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e5a:	fa4a f303 	asr.w	r3, sl, r3
 8009e5e:	445b      	add	r3, fp
 8009e60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009e64:	4e9d      	ldr	r6, [pc, #628]	; (800a0dc <__ieee754_pow+0xa44>)
 8009e66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009e6a:	4116      	asrs	r6, r2
 8009e6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009e70:	2000      	movs	r0, #0
 8009e72:	ea23 0106 	bic.w	r1, r3, r6
 8009e76:	f1c2 0214 	rsb	r2, r2, #20
 8009e7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009e7e:	fa4a fa02 	asr.w	sl, sl, r2
 8009e82:	f1bb 0f00 	cmp.w	fp, #0
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	bfb8      	it	lt
 8009e90:	f1ca 0a00 	rsblt	sl, sl, #0
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	ec41 0b19 	vmov	d9, r0, r1
 8009e9c:	4642      	mov	r2, r8
 8009e9e:	464b      	mov	r3, r9
 8009ea0:	ec51 0b19 	vmov	r0, r1, d9
 8009ea4:	f7f6 f9fa 	bl	800029c <__adddf3>
 8009ea8:	a37b      	add	r3, pc, #492	; (adr r3, 800a098 <__ieee754_pow+0xa00>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	2000      	movs	r0, #0
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	f7f6 fba8 	bl	8000608 <__aeabi_dmul>
 8009eb8:	ec53 2b19 	vmov	r2, r3, d9
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 f9e2 	bl	8000298 <__aeabi_dsub>
 8009ed4:	a372      	add	r3, pc, #456	; (adr r3, 800a0a0 <__ieee754_pow+0xa08>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f7f6 fb95 	bl	8000608 <__aeabi_dmul>
 8009ede:	a372      	add	r3, pc, #456	; (adr r3, 800a0a8 <__ieee754_pow+0xa10>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	4689      	mov	r9, r1
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 fb8c 	bl	8000608 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	f7f6 f9d0 	bl	800029c <__adddf3>
 8009efc:	4604      	mov	r4, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4630      	mov	r0, r6
 8009f06:	4639      	mov	r1, r7
 8009f08:	f7f6 f9c8 	bl	800029c <__adddf3>
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	4680      	mov	r8, r0
 8009f12:	4689      	mov	r9, r1
 8009f14:	f7f6 f9c0 	bl	8000298 <__aeabi_dsub>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 f9ba 	bl	8000298 <__aeabi_dsub>
 8009f24:	4642      	mov	r2, r8
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 fb6a 	bl	8000608 <__aeabi_dmul>
 8009f34:	a35e      	add	r3, pc, #376	; (adr r3, 800a0b0 <__ieee754_pow+0xa18>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	460d      	mov	r5, r1
 8009f3e:	f7f6 fb63 	bl	8000608 <__aeabi_dmul>
 8009f42:	a35d      	add	r3, pc, #372	; (adr r3, 800a0b8 <__ieee754_pow+0xa20>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f7f6 f9a6 	bl	8000298 <__aeabi_dsub>
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	462b      	mov	r3, r5
 8009f50:	f7f6 fb5a 	bl	8000608 <__aeabi_dmul>
 8009f54:	a35a      	add	r3, pc, #360	; (adr r3, 800a0c0 <__ieee754_pow+0xa28>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	f7f6 f99f 	bl	800029c <__adddf3>
 8009f5e:	4622      	mov	r2, r4
 8009f60:	462b      	mov	r3, r5
 8009f62:	f7f6 fb51 	bl	8000608 <__aeabi_dmul>
 8009f66:	a358      	add	r3, pc, #352	; (adr r3, 800a0c8 <__ieee754_pow+0xa30>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 f994 	bl	8000298 <__aeabi_dsub>
 8009f70:	4622      	mov	r2, r4
 8009f72:	462b      	mov	r3, r5
 8009f74:	f7f6 fb48 	bl	8000608 <__aeabi_dmul>
 8009f78:	a355      	add	r3, pc, #340	; (adr r3, 800a0d0 <__ieee754_pow+0xa38>)
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	f7f6 f98d 	bl	800029c <__adddf3>
 8009f82:	4622      	mov	r2, r4
 8009f84:	462b      	mov	r3, r5
 8009f86:	f7f6 fb3f 	bl	8000608 <__aeabi_dmul>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4640      	mov	r0, r8
 8009f90:	4649      	mov	r1, r9
 8009f92:	f7f6 f981 	bl	8000298 <__aeabi_dsub>
 8009f96:	4604      	mov	r4, r0
 8009f98:	460d      	mov	r5, r1
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 fb31 	bl	8000608 <__aeabi_dmul>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	ec41 0b19 	vmov	d9, r0, r1
 8009fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7f6 f970 	bl	8000298 <__aeabi_dsub>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	ec51 0b19 	vmov	r0, r1, d9
 8009fc0:	f7f6 fc4c 	bl	800085c <__aeabi_ddiv>
 8009fc4:	4632      	mov	r2, r6
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	460d      	mov	r5, r1
 8009fca:	463b      	mov	r3, r7
 8009fcc:	4640      	mov	r0, r8
 8009fce:	4649      	mov	r1, r9
 8009fd0:	f7f6 fb1a 	bl	8000608 <__aeabi_dmul>
 8009fd4:	4632      	mov	r2, r6
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	f7f6 f960 	bl	800029c <__adddf3>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	f7f6 f958 	bl	8000298 <__aeabi_dsub>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	f7f6 f954 	bl	8000298 <__aeabi_dsub>
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	493a      	ldr	r1, [pc, #232]	; (800a0e0 <__ieee754_pow+0xa48>)
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f7f6 f94e 	bl	8000298 <__aeabi_dsub>
 8009ffc:	ec41 0b10 	vmov	d0, r0, r1
 800a000:	ee10 3a90 	vmov	r3, s1
 800a004:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a00c:	da2b      	bge.n	800a066 <__ieee754_pow+0x9ce>
 800a00e:	4650      	mov	r0, sl
 800a010:	f000 f966 	bl	800a2e0 <scalbn>
 800a014:	ec51 0b10 	vmov	r0, r1, d0
 800a018:	ec53 2b18 	vmov	r2, r3, d8
 800a01c:	f7ff bbed 	b.w	80097fa <__ieee754_pow+0x162>
 800a020:	4b30      	ldr	r3, [pc, #192]	; (800a0e4 <__ieee754_pow+0xa4c>)
 800a022:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a026:	429e      	cmp	r6, r3
 800a028:	f77f af0c 	ble.w	8009e44 <__ieee754_pow+0x7ac>
 800a02c:	4b2e      	ldr	r3, [pc, #184]	; (800a0e8 <__ieee754_pow+0xa50>)
 800a02e:	440b      	add	r3, r1
 800a030:	4303      	orrs	r3, r0
 800a032:	d009      	beq.n	800a048 <__ieee754_pow+0x9b0>
 800a034:	ec51 0b18 	vmov	r0, r1, d8
 800a038:	2200      	movs	r2, #0
 800a03a:	2300      	movs	r3, #0
 800a03c:	f7f6 fd56 	bl	8000aec <__aeabi_dcmplt>
 800a040:	3800      	subs	r0, #0
 800a042:	bf18      	it	ne
 800a044:	2001      	movne	r0, #1
 800a046:	e447      	b.n	80098d8 <__ieee754_pow+0x240>
 800a048:	4622      	mov	r2, r4
 800a04a:	462b      	mov	r3, r5
 800a04c:	f7f6 f924 	bl	8000298 <__aeabi_dsub>
 800a050:	4642      	mov	r2, r8
 800a052:	464b      	mov	r3, r9
 800a054:	f7f6 fd5e 	bl	8000b14 <__aeabi_dcmpge>
 800a058:	2800      	cmp	r0, #0
 800a05a:	f43f aef3 	beq.w	8009e44 <__ieee754_pow+0x7ac>
 800a05e:	e7e9      	b.n	800a034 <__ieee754_pow+0x99c>
 800a060:	f04f 0a00 	mov.w	sl, #0
 800a064:	e71a      	b.n	8009e9c <__ieee754_pow+0x804>
 800a066:	ec51 0b10 	vmov	r0, r1, d0
 800a06a:	4619      	mov	r1, r3
 800a06c:	e7d4      	b.n	800a018 <__ieee754_pow+0x980>
 800a06e:	491c      	ldr	r1, [pc, #112]	; (800a0e0 <__ieee754_pow+0xa48>)
 800a070:	2000      	movs	r0, #0
 800a072:	f7ff bb30 	b.w	80096d6 <__ieee754_pow+0x3e>
 800a076:	2000      	movs	r0, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	f7ff bb2c 	b.w	80096d6 <__ieee754_pow+0x3e>
 800a07e:	4630      	mov	r0, r6
 800a080:	4639      	mov	r1, r7
 800a082:	f7ff bb28 	b.w	80096d6 <__ieee754_pow+0x3e>
 800a086:	9204      	str	r2, [sp, #16]
 800a088:	f7ff bb7a 	b.w	8009780 <__ieee754_pow+0xe8>
 800a08c:	2300      	movs	r3, #0
 800a08e:	f7ff bb64 	b.w	800975a <__ieee754_pow+0xc2>
 800a092:	bf00      	nop
 800a094:	f3af 8000 	nop.w
 800a098:	00000000 	.word	0x00000000
 800a09c:	3fe62e43 	.word	0x3fe62e43
 800a0a0:	fefa39ef 	.word	0xfefa39ef
 800a0a4:	3fe62e42 	.word	0x3fe62e42
 800a0a8:	0ca86c39 	.word	0x0ca86c39
 800a0ac:	be205c61 	.word	0xbe205c61
 800a0b0:	72bea4d0 	.word	0x72bea4d0
 800a0b4:	3e663769 	.word	0x3e663769
 800a0b8:	c5d26bf1 	.word	0xc5d26bf1
 800a0bc:	3ebbbd41 	.word	0x3ebbbd41
 800a0c0:	af25de2c 	.word	0xaf25de2c
 800a0c4:	3f11566a 	.word	0x3f11566a
 800a0c8:	16bebd93 	.word	0x16bebd93
 800a0cc:	3f66c16c 	.word	0x3f66c16c
 800a0d0:	5555553e 	.word	0x5555553e
 800a0d4:	3fc55555 	.word	0x3fc55555
 800a0d8:	3fe00000 	.word	0x3fe00000
 800a0dc:	000fffff 	.word	0x000fffff
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	4090cbff 	.word	0x4090cbff
 800a0e8:	3f6f3400 	.word	0x3f6f3400
 800a0ec:	652b82fe 	.word	0x652b82fe
 800a0f0:	3c971547 	.word	0x3c971547

0800a0f4 <__ieee754_sqrt>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	ec55 4b10 	vmov	r4, r5, d0
 800a0fc:	4e55      	ldr	r6, [pc, #340]	; (800a254 <__ieee754_sqrt+0x160>)
 800a0fe:	43ae      	bics	r6, r5
 800a100:	ee10 0a10 	vmov	r0, s0
 800a104:	ee10 3a10 	vmov	r3, s0
 800a108:	462a      	mov	r2, r5
 800a10a:	4629      	mov	r1, r5
 800a10c:	d110      	bne.n	800a130 <__ieee754_sqrt+0x3c>
 800a10e:	ee10 2a10 	vmov	r2, s0
 800a112:	462b      	mov	r3, r5
 800a114:	f7f6 fa78 	bl	8000608 <__aeabi_dmul>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 f8bc 	bl	800029c <__adddf3>
 800a124:	4604      	mov	r4, r0
 800a126:	460d      	mov	r5, r1
 800a128:	ec45 4b10 	vmov	d0, r4, r5
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a130:	2d00      	cmp	r5, #0
 800a132:	dc10      	bgt.n	800a156 <__ieee754_sqrt+0x62>
 800a134:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a138:	4330      	orrs	r0, r6
 800a13a:	d0f5      	beq.n	800a128 <__ieee754_sqrt+0x34>
 800a13c:	b15d      	cbz	r5, 800a156 <__ieee754_sqrt+0x62>
 800a13e:	ee10 2a10 	vmov	r2, s0
 800a142:	462b      	mov	r3, r5
 800a144:	ee10 0a10 	vmov	r0, s0
 800a148:	f7f6 f8a6 	bl	8000298 <__aeabi_dsub>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	f7f6 fb84 	bl	800085c <__aeabi_ddiv>
 800a154:	e7e6      	b.n	800a124 <__ieee754_sqrt+0x30>
 800a156:	1512      	asrs	r2, r2, #20
 800a158:	d074      	beq.n	800a244 <__ieee754_sqrt+0x150>
 800a15a:	07d4      	lsls	r4, r2, #31
 800a15c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a160:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a168:	bf5e      	ittt	pl
 800a16a:	0fda      	lsrpl	r2, r3, #31
 800a16c:	005b      	lslpl	r3, r3, #1
 800a16e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a172:	2400      	movs	r4, #0
 800a174:	0fda      	lsrs	r2, r3, #31
 800a176:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a17a:	107f      	asrs	r7, r7, #1
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	2516      	movs	r5, #22
 800a180:	4620      	mov	r0, r4
 800a182:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a186:	1886      	adds	r6, r0, r2
 800a188:	428e      	cmp	r6, r1
 800a18a:	bfde      	ittt	le
 800a18c:	1b89      	suble	r1, r1, r6
 800a18e:	18b0      	addle	r0, r6, r2
 800a190:	18a4      	addle	r4, r4, r2
 800a192:	0049      	lsls	r1, r1, #1
 800a194:	3d01      	subs	r5, #1
 800a196:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a19a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a19e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1a2:	d1f0      	bne.n	800a186 <__ieee754_sqrt+0x92>
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	f04f 0e20 	mov.w	lr, #32
 800a1aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a1ae:	4281      	cmp	r1, r0
 800a1b0:	eb06 0c05 	add.w	ip, r6, r5
 800a1b4:	dc02      	bgt.n	800a1bc <__ieee754_sqrt+0xc8>
 800a1b6:	d113      	bne.n	800a1e0 <__ieee754_sqrt+0xec>
 800a1b8:	459c      	cmp	ip, r3
 800a1ba:	d811      	bhi.n	800a1e0 <__ieee754_sqrt+0xec>
 800a1bc:	f1bc 0f00 	cmp.w	ip, #0
 800a1c0:	eb0c 0506 	add.w	r5, ip, r6
 800a1c4:	da43      	bge.n	800a24e <__ieee754_sqrt+0x15a>
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	db41      	blt.n	800a24e <__ieee754_sqrt+0x15a>
 800a1ca:	f100 0801 	add.w	r8, r0, #1
 800a1ce:	1a09      	subs	r1, r1, r0
 800a1d0:	459c      	cmp	ip, r3
 800a1d2:	bf88      	it	hi
 800a1d4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a1d8:	eba3 030c 	sub.w	r3, r3, ip
 800a1dc:	4432      	add	r2, r6
 800a1de:	4640      	mov	r0, r8
 800a1e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a1e4:	f1be 0e01 	subs.w	lr, lr, #1
 800a1e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a1ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a1f4:	d1db      	bne.n	800a1ae <__ieee754_sqrt+0xba>
 800a1f6:	430b      	orrs	r3, r1
 800a1f8:	d006      	beq.n	800a208 <__ieee754_sqrt+0x114>
 800a1fa:	1c50      	adds	r0, r2, #1
 800a1fc:	bf13      	iteet	ne
 800a1fe:	3201      	addne	r2, #1
 800a200:	3401      	addeq	r4, #1
 800a202:	4672      	moveq	r2, lr
 800a204:	f022 0201 	bicne.w	r2, r2, #1
 800a208:	1063      	asrs	r3, r4, #1
 800a20a:	0852      	lsrs	r2, r2, #1
 800a20c:	07e1      	lsls	r1, r4, #31
 800a20e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a212:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a216:	bf48      	it	mi
 800a218:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a21c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a220:	4614      	mov	r4, r2
 800a222:	e781      	b.n	800a128 <__ieee754_sqrt+0x34>
 800a224:	0ad9      	lsrs	r1, r3, #11
 800a226:	3815      	subs	r0, #21
 800a228:	055b      	lsls	r3, r3, #21
 800a22a:	2900      	cmp	r1, #0
 800a22c:	d0fa      	beq.n	800a224 <__ieee754_sqrt+0x130>
 800a22e:	02cd      	lsls	r5, r1, #11
 800a230:	d50a      	bpl.n	800a248 <__ieee754_sqrt+0x154>
 800a232:	f1c2 0420 	rsb	r4, r2, #32
 800a236:	fa23 f404 	lsr.w	r4, r3, r4
 800a23a:	1e55      	subs	r5, r2, #1
 800a23c:	4093      	lsls	r3, r2
 800a23e:	4321      	orrs	r1, r4
 800a240:	1b42      	subs	r2, r0, r5
 800a242:	e78a      	b.n	800a15a <__ieee754_sqrt+0x66>
 800a244:	4610      	mov	r0, r2
 800a246:	e7f0      	b.n	800a22a <__ieee754_sqrt+0x136>
 800a248:	0049      	lsls	r1, r1, #1
 800a24a:	3201      	adds	r2, #1
 800a24c:	e7ef      	b.n	800a22e <__ieee754_sqrt+0x13a>
 800a24e:	4680      	mov	r8, r0
 800a250:	e7bd      	b.n	800a1ce <__ieee754_sqrt+0xda>
 800a252:	bf00      	nop
 800a254:	7ff00000 	.word	0x7ff00000

0800a258 <with_errno>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	4604      	mov	r4, r0
 800a25c:	460d      	mov	r5, r1
 800a25e:	4616      	mov	r6, r2
 800a260:	f7fa fcd4 	bl	8004c0c <__errno>
 800a264:	4629      	mov	r1, r5
 800a266:	6006      	str	r6, [r0, #0]
 800a268:	4620      	mov	r0, r4
 800a26a:	bd70      	pop	{r4, r5, r6, pc}

0800a26c <xflow>:
 800a26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a26e:	4614      	mov	r4, r2
 800a270:	461d      	mov	r5, r3
 800a272:	b108      	cbz	r0, 800a278 <xflow+0xc>
 800a274:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a278:	e9cd 2300 	strd	r2, r3, [sp]
 800a27c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	2222      	movs	r2, #34	; 0x22
 800a28a:	b003      	add	sp, #12
 800a28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a290:	f7ff bfe2 	b.w	800a258 <with_errno>

0800a294 <__math_uflow>:
 800a294:	b508      	push	{r3, lr}
 800a296:	2200      	movs	r2, #0
 800a298:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a29c:	f7ff ffe6 	bl	800a26c <xflow>
 800a2a0:	ec41 0b10 	vmov	d0, r0, r1
 800a2a4:	bd08      	pop	{r3, pc}

0800a2a6 <__math_oflow>:
 800a2a6:	b508      	push	{r3, lr}
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a2ae:	f7ff ffdd 	bl	800a26c <xflow>
 800a2b2:	ec41 0b10 	vmov	d0, r0, r1
 800a2b6:	bd08      	pop	{r3, pc}

0800a2b8 <fabs>:
 800a2b8:	ec51 0b10 	vmov	r0, r1, d0
 800a2bc:	ee10 2a10 	vmov	r2, s0
 800a2c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2c4:	ec43 2b10 	vmov	d0, r2, r3
 800a2c8:	4770      	bx	lr

0800a2ca <finite>:
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	ed8d 0b00 	vstr	d0, [sp]
 800a2d0:	9801      	ldr	r0, [sp, #4]
 800a2d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a2d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a2da:	0fc0      	lsrs	r0, r0, #31
 800a2dc:	b002      	add	sp, #8
 800a2de:	4770      	bx	lr

0800a2e0 <scalbn>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	ec55 4b10 	vmov	r4, r5, d0
 800a2e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	b99a      	cbnz	r2, 800a318 <scalbn+0x38>
 800a2f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2f4:	4323      	orrs	r3, r4
 800a2f6:	d036      	beq.n	800a366 <scalbn+0x86>
 800a2f8:	4b39      	ldr	r3, [pc, #228]	; (800a3e0 <scalbn+0x100>)
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	ee10 0a10 	vmov	r0, s0
 800a300:	2200      	movs	r2, #0
 800a302:	f7f6 f981 	bl	8000608 <__aeabi_dmul>
 800a306:	4b37      	ldr	r3, [pc, #220]	; (800a3e4 <scalbn+0x104>)
 800a308:	429e      	cmp	r6, r3
 800a30a:	4604      	mov	r4, r0
 800a30c:	460d      	mov	r5, r1
 800a30e:	da10      	bge.n	800a332 <scalbn+0x52>
 800a310:	a32b      	add	r3, pc, #172	; (adr r3, 800a3c0 <scalbn+0xe0>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	e03a      	b.n	800a38e <scalbn+0xae>
 800a318:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a31c:	428a      	cmp	r2, r1
 800a31e:	d10c      	bne.n	800a33a <scalbn+0x5a>
 800a320:	ee10 2a10 	vmov	r2, s0
 800a324:	4620      	mov	r0, r4
 800a326:	4629      	mov	r1, r5
 800a328:	f7f5 ffb8 	bl	800029c <__adddf3>
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	e019      	b.n	800a366 <scalbn+0x86>
 800a332:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a336:	460b      	mov	r3, r1
 800a338:	3a36      	subs	r2, #54	; 0x36
 800a33a:	4432      	add	r2, r6
 800a33c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a340:	428a      	cmp	r2, r1
 800a342:	dd08      	ble.n	800a356 <scalbn+0x76>
 800a344:	2d00      	cmp	r5, #0
 800a346:	a120      	add	r1, pc, #128	; (adr r1, 800a3c8 <scalbn+0xe8>)
 800a348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a34c:	da1c      	bge.n	800a388 <scalbn+0xa8>
 800a34e:	a120      	add	r1, pc, #128	; (adr r1, 800a3d0 <scalbn+0xf0>)
 800a350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a354:	e018      	b.n	800a388 <scalbn+0xa8>
 800a356:	2a00      	cmp	r2, #0
 800a358:	dd08      	ble.n	800a36c <scalbn+0x8c>
 800a35a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a35e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a362:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a366:	ec45 4b10 	vmov	d0, r4, r5
 800a36a:	bd70      	pop	{r4, r5, r6, pc}
 800a36c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a370:	da19      	bge.n	800a3a6 <scalbn+0xc6>
 800a372:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a376:	429e      	cmp	r6, r3
 800a378:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a37c:	dd0a      	ble.n	800a394 <scalbn+0xb4>
 800a37e:	a112      	add	r1, pc, #72	; (adr r1, 800a3c8 <scalbn+0xe8>)
 800a380:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1e2      	bne.n	800a34e <scalbn+0x6e>
 800a388:	a30f      	add	r3, pc, #60	; (adr r3, 800a3c8 <scalbn+0xe8>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	e7cb      	b.n	800a32c <scalbn+0x4c>
 800a394:	a10a      	add	r1, pc, #40	; (adr r1, 800a3c0 <scalbn+0xe0>)
 800a396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0b8      	beq.n	800a310 <scalbn+0x30>
 800a39e:	a10e      	add	r1, pc, #56	; (adr r1, 800a3d8 <scalbn+0xf8>)
 800a3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a4:	e7b4      	b.n	800a310 <scalbn+0x30>
 800a3a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3aa:	3236      	adds	r2, #54	; 0x36
 800a3ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <scalbn+0x108>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	e7e8      	b.n	800a38e <scalbn+0xae>
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	c2f8f359 	.word	0xc2f8f359
 800a3c4:	01a56e1f 	.word	0x01a56e1f
 800a3c8:	8800759c 	.word	0x8800759c
 800a3cc:	7e37e43c 	.word	0x7e37e43c
 800a3d0:	8800759c 	.word	0x8800759c
 800a3d4:	fe37e43c 	.word	0xfe37e43c
 800a3d8:	c2f8f359 	.word	0xc2f8f359
 800a3dc:	81a56e1f 	.word	0x81a56e1f
 800a3e0:	43500000 	.word	0x43500000
 800a3e4:	ffff3cb0 	.word	0xffff3cb0
 800a3e8:	3c900000 	.word	0x3c900000

0800a3ec <_init>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	bf00      	nop
 800a3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f2:	bc08      	pop	{r3}
 800a3f4:	469e      	mov	lr, r3
 800a3f6:	4770      	bx	lr

0800a3f8 <_fini>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr
